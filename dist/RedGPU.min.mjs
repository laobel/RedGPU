/*
 *   RedGPU - MIT License
 *   Copyright (c) 2019 ~ By RedCamel( webseon@gmail.com )
 *   issue : https://github.com/redcamel/RedGPU/issues
 *   Last modification time of this file - 2020.3.23 18:29:56
 *
 */

var t=1e-6,e="undefined"!=typeof Float32Array?Float32Array:Array,r=Math.random,n=Math.PI/180;Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var a=Object.freeze({EPSILON:t,get ARRAY_TYPE(){return e},RANDOM:r,setMatrixArrayType:function(t){e=t},toRadian:function(t){return t*n},equals:function(e,r){return Math.abs(e-r)<=t*Math.max(1,Math.abs(e),Math.abs(r))}});function o(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=r[0],c=r[1],h=r[2],p=r[3];return t[0]=n*u+s*c,t[1]=a*u+l*c,t[2]=n*h+s*p,t[3]=a*h+l*p,t}function i(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t}var s=o,l=i,u=Object.freeze({create:function(){var t=new e(4);return e!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t},clone:function(t){var r=new e(4);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t},fromValues:function(t,r,n,a){var s=new e(4);return s[0]=t,s[1]=r,s[2]=n,s[3]=a,s},set:function(t,e,r,n,a){return t[0]=e,t[1]=r,t[2]=n,t[3]=a,t},transpose:function(t,e){if(t===e){var r=e[1];t[1]=e[2],t[2]=r}else t[0]=e[0],t[1]=e[2],t[2]=e[1],t[3]=e[3];return t},invert:function(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=r*s-a*n;return l?(l=1/l,t[0]=s*l,t[1]=-n*l,t[2]=-a*l,t[3]=r*l,t):null},adjoint:function(t,e){var r=e[0];return t[0]=e[3],t[1]=-e[1],t[2]=-e[2],t[3]=r,t},determinant:function(t){return t[0]*t[3]-t[2]*t[1]},multiply:o,rotate:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=Math.sin(r),c=Math.cos(r);return t[0]=n*c+s*u,t[1]=a*c+l*u,t[2]=n*-u+s*c,t[3]=a*-u+l*c,t},scale:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=r[0],c=r[1];return t[0]=n*u,t[1]=a*u,t[2]=s*c,t[3]=l*c,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=-r,t[3]=n,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t},str:function(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3])},LDU:function(t,e,r,n){return t[2]=n[2]/n[0],r[0]=n[0],r[1]=n[1],r[3]=n[3]-t[2]*r[1],[t,e,r]},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t},subtract:i,exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},equals:function(e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=r[0],c=r[1],h=r[2],p=r[3];return Math.abs(n-u)<=t*Math.max(1,Math.abs(n),Math.abs(u))&&Math.abs(a-c)<=t*Math.max(1,Math.abs(a),Math.abs(c))&&Math.abs(s-h)<=t*Math.max(1,Math.abs(s),Math.abs(h))&&Math.abs(l-p)<=t*Math.max(1,Math.abs(l),Math.abs(p))},multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t},mul:s,sub:l});function M(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=r[0],p=r[1],v=r[2],S=r[3],y=r[4],G=r[5];return t[0]=n*h+s*p,t[1]=a*h+l*p,t[2]=n*v+s*S,t[3]=a*v+l*S,t[4]=n*y+s*G+u,t[5]=a*y+l*G+c,t}function f(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t}var c=M,h=f,p=Object.freeze({create:function(){var t=new e(6);return e!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t},clone:function(t){var r=new e(6);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t},fromValues:function(t,r,n,a,s,l){var u=new e(6);return u[0]=t,u[1]=r,u[2]=n,u[3]=a,u[4]=s,u[5]=l,u},set:function(t,e,r,n,a,s,l){return t[0]=e,t[1]=r,t[2]=n,t[3]=a,t[4]=s,t[5]=l,t},invert:function(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=e[4],u=e[5],c=r*s-n*a;return c?(c=1/c,t[0]=s*c,t[1]=-n*c,t[2]=-a*c,t[3]=r*c,t[4]=(a*u-s*l)*c,t[5]=(n*l-r*u)*c,t):null},determinant:function(t){return t[0]*t[3]-t[1]*t[2]},multiply:M,rotate:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=Math.sin(r),p=Math.cos(r);return t[0]=n*p+s*h,t[1]=a*p+l*h,t[2]=n*-h+s*p,t[3]=a*-h+l*p,t[4]=u,t[5]=c,t},scale:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=r[0],p=r[1];return t[0]=n*h,t[1]=a*h,t[2]=s*p,t[3]=l*p,t[4]=u,t[5]=c,t},translate:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=r[0],p=r[1];return t[0]=n,t[1]=a,t[2]=s,t[3]=l,t[4]=n*h+s*p+u,t[5]=a*h+l*p+c,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=-r,t[3]=n,t[4]=0,t[5]=0,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t[4]=0,t[5]=0,t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=e[0],t[5]=e[1],t},str:function(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],1)},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t},subtract:f,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]},equals:function(e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=r[0],p=r[1],v=r[2],S=r[3],y=r[4],G=r[5];return Math.abs(n-h)<=t*Math.max(1,Math.abs(n),Math.abs(h))&&Math.abs(a-p)<=t*Math.max(1,Math.abs(a),Math.abs(p))&&Math.abs(s-v)<=t*Math.max(1,Math.abs(s),Math.abs(v))&&Math.abs(l-S)<=t*Math.max(1,Math.abs(l),Math.abs(S))&&Math.abs(u-y)<=t*Math.max(1,Math.abs(u),Math.abs(y))&&Math.abs(c-G)<=t*Math.max(1,Math.abs(c),Math.abs(G))},mul:c,sub:h});function m(){var t=new e(9);return e!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function d(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=e[8],S=r[0],y=r[1],G=r[2],U=r[3],b=r[4],E=r[5],C=r[6],I=r[7],N=r[8];return t[0]=S*n+y*l+G*h,t[1]=S*a+y*u+G*p,t[2]=S*s+y*c+G*v,t[3]=U*n+b*l+E*h,t[4]=U*a+b*u+E*p,t[5]=U*s+b*c+E*v,t[6]=C*n+I*l+N*h,t[7]=C*a+I*u+N*p,t[8]=C*s+I*c+N*v,t}function x(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t}var v=d,S=x,y=Object.freeze({create:m,fromMat4:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t},clone:function(t){var r=new e(9);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},fromValues:function(t,r,n,a,s,l,u,c,h){var p=new e(9);return p[0]=t,p[1]=r,p[2]=n,p[3]=a,p[4]=s,p[5]=l,p[6]=u,p[7]=c,p[8]=h,p},set:function(t,e,r,n,a,s,l,u,c,h){return t[0]=e,t[1]=r,t[2]=n,t[3]=a,t[4]=s,t[5]=l,t[6]=u,t[7]=c,t[8]=h,t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},transpose:function(t,e){if(t===e){var r=e[1],n=e[2],a=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=n,t[7]=a}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t},invert:function(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=e[4],u=e[5],c=e[6],h=e[7],p=e[8],v=p*l-u*h,S=-p*s+u*c,y=h*s-l*c,G=r*v+n*S+a*y;return G?(G=1/G,t[0]=v*G,t[1]=(-p*n+a*h)*G,t[2]=(u*n-a*l)*G,t[3]=S*G,t[4]=(p*r-a*c)*G,t[5]=(-u*r+a*s)*G,t[6]=y*G,t[7]=(-h*r+n*c)*G,t[8]=(l*r-n*s)*G,t):null},adjoint:function(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=e[4],u=e[5],c=e[6],h=e[7],p=e[8];return t[0]=l*p-u*h,t[1]=a*h-n*p,t[2]=n*u-a*l,t[3]=u*c-s*p,t[4]=r*p-a*c,t[5]=a*s-r*u,t[6]=s*h-l*c,t[7]=n*c-r*h,t[8]=r*l-n*s,t},determinant:function(t){var e=t[0],r=t[1],n=t[2],a=t[3],s=t[4],l=t[5],u=t[6],c=t[7],h=t[8];return e*(h*s-l*c)+r*(-h*a+l*u)+n*(c*a-s*u)},multiply:d,translate:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=e[8],S=r[0],y=r[1];return t[0]=n,t[1]=a,t[2]=s,t[3]=l,t[4]=u,t[5]=c,t[6]=S*n+y*l+h,t[7]=S*a+y*u+p,t[8]=S*s+y*c+v,t},rotate:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=e[8],S=Math.sin(r),y=Math.cos(r);return t[0]=y*n+S*l,t[1]=y*a+S*u,t[2]=y*s+S*c,t[3]=y*l-S*n,t[4]=y*u-S*a,t[5]=y*c-S*s,t[6]=h,t[7]=p,t[8]=v,t},scale:function(t,e,r){var n=r[0],a=r[1];return t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=a*e[3],t[4]=a*e[4],t[5]=a*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=e[0],t[7]=e[1],t[8]=1,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=-r,t[4]=n,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=e[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromMat2d:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=0,t[3]=e[2],t[4]=e[3],t[5]=0,t[6]=e[4],t[7]=e[5],t[8]=1,t},fromQuat:function(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=r+r,u=n+n,c=a+a,h=r*l,p=n*l,v=n*u,S=a*l,y=a*u,G=a*c,U=s*l,b=s*u,E=s*c;return t[0]=1-v-G,t[3]=p-E,t[6]=S+b,t[1]=p+E,t[4]=1-h-G,t[7]=y-U,t[2]=S-b,t[5]=y+U,t[8]=1-h-v,t},normalFromMat4:function(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=e[4],u=e[5],c=e[6],h=e[7],p=e[8],v=e[9],S=e[10],y=e[11],G=e[12],U=e[13],b=e[14],E=e[15],C=r*u-n*l,I=r*c-a*l,N=r*h-s*l,$=n*c-a*u,k=n*h-s*u,W=a*h-s*c,H=p*U-v*G,q=p*b-S*G,J=p*E-y*G,K=v*b-S*U,pt=v*E-y*U,_t=S*E-y*b,gt=C*_t-I*pt+N*K+$*J-k*q+W*H;return gt?(gt=1/gt,t[0]=(u*_t-c*pt+h*K)*gt,t[1]=(c*J-l*_t-h*q)*gt,t[2]=(l*pt-u*J+h*H)*gt,t[3]=(a*pt-n*_t-s*K)*gt,t[4]=(r*_t-a*J+s*q)*gt,t[5]=(n*J-r*pt-s*H)*gt,t[6]=(U*W-b*k+E*$)*gt,t[7]=(b*N-G*W-E*I)*gt,t[8]=(G*k-U*N+E*C)*gt,t):null},projection:function(t,e,r){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t},str:function(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t},subtract:x,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t[6]=e[6]+r[6]*n,t[7]=e[7]+r[7]*n,t[8]=e[8]+r[8]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]},equals:function(e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=e[8],S=r[0],y=r[1],G=r[2],U=r[3],b=r[4],E=r[5],C=r[6],I=r[7],N=r[8];return Math.abs(n-S)<=t*Math.max(1,Math.abs(n),Math.abs(S))&&Math.abs(a-y)<=t*Math.max(1,Math.abs(a),Math.abs(y))&&Math.abs(s-G)<=t*Math.max(1,Math.abs(s),Math.abs(G))&&Math.abs(l-U)<=t*Math.max(1,Math.abs(l),Math.abs(U))&&Math.abs(u-b)<=t*Math.max(1,Math.abs(u),Math.abs(b))&&Math.abs(c-E)<=t*Math.max(1,Math.abs(c),Math.abs(E))&&Math.abs(h-C)<=t*Math.max(1,Math.abs(h),Math.abs(C))&&Math.abs(p-I)<=t*Math.max(1,Math.abs(p),Math.abs(I))&&Math.abs(v-N)<=t*Math.max(1,Math.abs(v),Math.abs(N))},mul:v,sub:S});function g(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function A(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=e[8],S=e[9],y=e[10],G=e[11],U=e[12],b=e[13],E=e[14],C=e[15],I=r[0],N=r[1],$=r[2],k=r[3];return t[0]=I*n+N*u+$*v+k*U,t[1]=I*a+N*c+$*S+k*b,t[2]=I*s+N*h+$*y+k*E,t[3]=I*l+N*p+$*G+k*C,I=r[4],N=r[5],$=r[6],k=r[7],t[4]=I*n+N*u+$*v+k*U,t[5]=I*a+N*c+$*S+k*b,t[6]=I*s+N*h+$*y+k*E,t[7]=I*l+N*p+$*G+k*C,I=r[8],N=r[9],$=r[10],k=r[11],t[8]=I*n+N*u+$*v+k*U,t[9]=I*a+N*c+$*S+k*b,t[10]=I*s+N*h+$*y+k*E,t[11]=I*l+N*p+$*G+k*C,I=r[12],N=r[13],$=r[14],k=r[15],t[12]=I*n+N*u+$*v+k*U,t[13]=I*a+N*c+$*S+k*b,t[14]=I*s+N*h+$*y+k*E,t[15]=I*l+N*p+$*G+k*C,t}function w(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=n+n,c=a+a,h=s+s,p=n*u,v=n*c,S=n*h,y=a*c,G=a*h,U=s*h,b=l*u,E=l*c,C=l*h;return t[0]=1-(y+U),t[1]=v+C,t[2]=S-E,t[3]=0,t[4]=v-C,t[5]=1-(p+U),t[6]=G+b,t[7]=0,t[8]=S+E,t[9]=G-b,t[10]=1-(p+y),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function R(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function z(t,e){var r=e[0],n=e[1],a=e[2],s=e[4],l=e[5],u=e[6],c=e[8],h=e[9],p=e[10];return t[0]=Math.hypot(r,n,a),t[1]=Math.hypot(s,l,u),t[2]=Math.hypot(c,h,p),t}function P(t,r){var n=new e(3);z(n,r);var a=1/n[0],s=1/n[1],l=1/n[2],u=r[0]*a,c=r[1]*s,h=r[2]*l,p=r[4]*a,v=r[5]*s,S=r[6]*l,y=r[8]*a,G=r[9]*s,U=r[10]*l,b=u+v+U,E=0;return b>0?(E=2*Math.sqrt(b+1),t[3]=.25*E,t[0]=(S-G)/E,t[1]=(y-h)/E,t[2]=(c-p)/E):u>v&&u>U?(E=2*Math.sqrt(1+u-v-U),t[3]=(S-G)/E,t[0]=.25*E,t[1]=(c+p)/E,t[2]=(y+h)/E):v>U?(E=2*Math.sqrt(1+v-u-U),t[3]=(y-h)/E,t[0]=(c+p)/E,t[1]=.25*E,t[2]=(S+G)/E):(E=2*Math.sqrt(1+U-u-v),t[3]=(c-p)/E,t[0]=(y+h)/E,t[1]=(S+G)/E,t[2]=.25*E),t}function j(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t[9]=e[9]-r[9],t[10]=e[10]-r[10],t[11]=e[11]-r[11],t[12]=e[12]-r[12],t[13]=e[13]-r[13],t[14]=e[14]-r[14],t[15]=e[15]-r[15],t}var G=A,U=j,b=Object.freeze({create:function(){var t=new e(16);return e!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t},clone:function(t){var r=new e(16);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t},fromValues:function(t,r,n,a,s,l,u,c,h,p,v,S,y,G,U,b){var E=new e(16);return E[0]=t,E[1]=r,E[2]=n,E[3]=a,E[4]=s,E[5]=l,E[6]=u,E[7]=c,E[8]=h,E[9]=p,E[10]=v,E[11]=S,E[12]=y,E[13]=G,E[14]=U,E[15]=b,E},set:function(t,e,r,n,a,s,l,u,c,h,p,v,S,y,G,U,b){return t[0]=e,t[1]=r,t[2]=n,t[3]=a,t[4]=s,t[5]=l,t[6]=u,t[7]=c,t[8]=h,t[9]=p,t[10]=v,t[11]=S,t[12]=y,t[13]=G,t[14]=U,t[15]=b,t},identity:g,transpose:function(t,e){if(t===e){var r=e[1],n=e[2],a=e[3],s=e[6],l=e[7],u=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=r,t[6]=e[9],t[7]=e[13],t[8]=n,t[9]=s,t[11]=e[14],t[12]=a,t[13]=l,t[14]=u}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t},invert:function(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=e[4],u=e[5],c=e[6],h=e[7],p=e[8],v=e[9],S=e[10],y=e[11],G=e[12],U=e[13],b=e[14],E=e[15],C=r*u-n*l,I=r*c-a*l,N=r*h-s*l,$=n*c-a*u,k=n*h-s*u,W=a*h-s*c,H=p*U-v*G,q=p*b-S*G,J=p*E-y*G,K=v*b-S*U,pt=v*E-y*U,_t=S*E-y*b,gt=C*_t-I*pt+N*K+$*J-k*q+W*H;return gt?(gt=1/gt,t[0]=(u*_t-c*pt+h*K)*gt,t[1]=(a*pt-n*_t-s*K)*gt,t[2]=(U*W-b*k+E*$)*gt,t[3]=(S*k-v*W-y*$)*gt,t[4]=(c*J-l*_t-h*q)*gt,t[5]=(r*_t-a*J+s*q)*gt,t[6]=(b*N-G*W-E*I)*gt,t[7]=(p*W-S*N+y*I)*gt,t[8]=(l*pt-u*J+h*H)*gt,t[9]=(n*J-r*pt-s*H)*gt,t[10]=(G*k-U*N+E*C)*gt,t[11]=(v*N-p*k-y*C)*gt,t[12]=(u*q-l*K-c*H)*gt,t[13]=(r*K-n*q+a*H)*gt,t[14]=(U*I-G*$-b*C)*gt,t[15]=(p*$-v*I+S*C)*gt,t):null},adjoint:function(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=e[4],u=e[5],c=e[6],h=e[7],p=e[8],v=e[9],S=e[10],y=e[11],G=e[12],U=e[13],b=e[14],E=e[15];return t[0]=u*(S*E-y*b)-v*(c*E-h*b)+U*(c*y-h*S),t[1]=-(n*(S*E-y*b)-v*(a*E-s*b)+U*(a*y-s*S)),t[2]=n*(c*E-h*b)-u*(a*E-s*b)+U*(a*h-s*c),t[3]=-(n*(c*y-h*S)-u*(a*y-s*S)+v*(a*h-s*c)),t[4]=-(l*(S*E-y*b)-p*(c*E-h*b)+G*(c*y-h*S)),t[5]=r*(S*E-y*b)-p*(a*E-s*b)+G*(a*y-s*S),t[6]=-(r*(c*E-h*b)-l*(a*E-s*b)+G*(a*h-s*c)),t[7]=r*(c*y-h*S)-l*(a*y-s*S)+p*(a*h-s*c),t[8]=l*(v*E-y*U)-p*(u*E-h*U)+G*(u*y-h*v),t[9]=-(r*(v*E-y*U)-p*(n*E-s*U)+G*(n*y-s*v)),t[10]=r*(u*E-h*U)-l*(n*E-s*U)+G*(n*h-s*u),t[11]=-(r*(u*y-h*v)-l*(n*y-s*v)+p*(n*h-s*u)),t[12]=-(l*(v*b-S*U)-p*(u*b-c*U)+G*(u*S-c*v)),t[13]=r*(v*b-S*U)-p*(n*b-a*U)+G*(n*S-a*v),t[14]=-(r*(u*b-c*U)-l*(n*b-a*U)+G*(n*c-a*u)),t[15]=r*(u*S-c*v)-l*(n*S-a*v)+p*(n*c-a*u),t},determinant:function(t){var e=t[0],r=t[1],n=t[2],a=t[3],s=t[4],l=t[5],u=t[6],c=t[7],h=t[8],p=t[9],v=t[10],S=t[11],y=t[12],G=t[13],U=t[14],b=t[15];return(e*l-r*s)*(v*b-S*U)-(e*u-n*s)*(p*b-S*G)+(e*c-a*s)*(p*U-v*G)+(r*u-n*l)*(h*b-S*y)-(r*c-a*l)*(h*U-v*y)+(n*c-a*u)*(h*G-p*y)},multiply:A,translate:function(t,e,r){var n,a,s,l,u,c,h,p,v,S,y,G,U=r[0],b=r[1],E=r[2];return e===t?(t[12]=e[0]*U+e[4]*b+e[8]*E+e[12],t[13]=e[1]*U+e[5]*b+e[9]*E+e[13],t[14]=e[2]*U+e[6]*b+e[10]*E+e[14],t[15]=e[3]*U+e[7]*b+e[11]*E+e[15]):(n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=e[8],S=e[9],y=e[10],G=e[11],t[0]=n,t[1]=a,t[2]=s,t[3]=l,t[4]=u,t[5]=c,t[6]=h,t[7]=p,t[8]=v,t[9]=S,t[10]=y,t[11]=G,t[12]=n*U+u*b+v*E+e[12],t[13]=a*U+c*b+S*E+e[13],t[14]=s*U+h*b+y*E+e[14],t[15]=l*U+p*b+G*E+e[15]),t},scale:function(t,e,r){var n=r[0],a=r[1],s=r[2];return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*a,t[5]=e[5]*a,t[6]=e[6]*a,t[7]=e[7]*a,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t},rotate:function(e,r,n,a){var s,l,u,c,h,p,v,S,y,G,U,b,E,C,I,N,$,k,W,H,q,J,K,pt,_t=a[0],gt=a[1],yt=a[2],Pt=Math.hypot(_t,gt,yt);return Pt<t?null:(_t*=Pt=1/Pt,gt*=Pt,yt*=Pt,s=Math.sin(n),u=1-(l=Math.cos(n)),c=r[0],h=r[1],p=r[2],v=r[3],S=r[4],y=r[5],G=r[6],U=r[7],b=r[8],E=r[9],C=r[10],I=r[11],N=_t*_t*u+l,$=gt*_t*u+yt*s,k=yt*_t*u-gt*s,W=_t*gt*u-yt*s,H=gt*gt*u+l,q=yt*gt*u+_t*s,J=_t*yt*u+gt*s,K=gt*yt*u-_t*s,pt=yt*yt*u+l,e[0]=c*N+S*$+b*k,e[1]=h*N+y*$+E*k,e[2]=p*N+G*$+C*k,e[3]=v*N+U*$+I*k,e[4]=c*W+S*H+b*q,e[5]=h*W+y*H+E*q,e[6]=p*W+G*H+C*q,e[7]=v*W+U*H+I*q,e[8]=c*J+S*K+b*pt,e[9]=h*J+y*K+E*pt,e[10]=p*J+G*K+C*pt,e[11]=v*J+U*K+I*pt,r!==e&&(e[12]=r[12],e[13]=r[13],e[14]=r[14],e[15]=r[15]),e)},rotateX:function(t,e,r){var n=Math.sin(r),a=Math.cos(r),s=e[4],l=e[5],u=e[6],c=e[7],h=e[8],p=e[9],v=e[10],S=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=s*a+h*n,t[5]=l*a+p*n,t[6]=u*a+v*n,t[7]=c*a+S*n,t[8]=h*a-s*n,t[9]=p*a-l*n,t[10]=v*a-u*n,t[11]=S*a-c*n,t},rotateY:function(t,e,r){var n=Math.sin(r),a=Math.cos(r),s=e[0],l=e[1],u=e[2],c=e[3],h=e[8],p=e[9],v=e[10],S=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=s*a-h*n,t[1]=l*a-p*n,t[2]=u*a-v*n,t[3]=c*a-S*n,t[8]=s*n+h*a,t[9]=l*n+p*a,t[10]=u*n+v*a,t[11]=c*n+S*a,t},rotateZ:function(t,e,r){var n=Math.sin(r),a=Math.cos(r),s=e[0],l=e[1],u=e[2],c=e[3],h=e[4],p=e[5],v=e[6],S=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=s*a+h*n,t[1]=l*a+p*n,t[2]=u*a+v*n,t[3]=c*a+S*n,t[4]=h*a-s*n,t[5]=p*a-l*n,t[6]=v*a-u*n,t[7]=S*a-c*n,t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromRotation:function(e,r,n){var a,s,l,u=n[0],c=n[1],h=n[2],p=Math.hypot(u,c,h);return p<t?null:(u*=p=1/p,c*=p,h*=p,a=Math.sin(r),l=1-(s=Math.cos(r)),e[0]=u*u*l+s,e[1]=c*u*l+h*a,e[2]=h*u*l-c*a,e[3]=0,e[4]=u*c*l-h*a,e[5]=c*c*l+s,e[6]=h*c*l+u*a,e[7]=0,e[8]=u*h*l+c*a,e[9]=c*h*l-u*a,e[10]=h*h*l+s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)},fromXRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromYRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromZRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromRotationTranslation:w,fromQuat2:function(t,r){var n=new e(3),a=-r[0],s=-r[1],l=-r[2],u=r[3],c=r[4],h=r[5],p=r[6],v=r[7],S=a*a+s*s+l*l+u*u;return S>0?(n[0]=2*(c*u+v*a+h*l-p*s)/S,n[1]=2*(h*u+v*s+p*a-c*l)/S,n[2]=2*(p*u+v*l+c*s-h*a)/S):(n[0]=2*(c*u+v*a+h*l-p*s),n[1]=2*(h*u+v*s+p*a-c*l),n[2]=2*(p*u+v*l+c*s-h*a)),w(t,r,n),t},getTranslation:R,getScaling:z,getRotation:P,fromRotationTranslationScale:function(t,e,r,n){var a=e[0],s=e[1],l=e[2],u=e[3],c=a+a,h=s+s,p=l+l,v=a*c,S=a*h,y=a*p,G=s*h,U=s*p,b=l*p,E=u*c,C=u*h,I=u*p,N=n[0],$=n[1],k=n[2];return t[0]=(1-(G+b))*N,t[1]=(S+I)*N,t[2]=(y-C)*N,t[3]=0,t[4]=(S-I)*$,t[5]=(1-(v+b))*$,t[6]=(U+E)*$,t[7]=0,t[8]=(y+C)*k,t[9]=(U-E)*k,t[10]=(1-(v+G))*k,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t},fromRotationTranslationScaleOrigin:function(t,e,r,n,a){var s=e[0],l=e[1],u=e[2],c=e[3],h=s+s,p=l+l,v=u+u,S=s*h,y=s*p,G=s*v,U=l*p,b=l*v,E=u*v,C=c*h,I=c*p,N=c*v,$=n[0],k=n[1],W=n[2],H=a[0],q=a[1],J=a[2],K=(1-(U+E))*$,pt=(y+N)*$,_t=(G-I)*$,gt=(y-N)*k,yt=(1-(S+E))*k,Pt=(b+C)*k,Gt=(G+I)*W,Ut=(b-C)*W,Bt=(1-(S+U))*W;return t[0]=K,t[1]=pt,t[2]=_t,t[3]=0,t[4]=gt,t[5]=yt,t[6]=Pt,t[7]=0,t[8]=Gt,t[9]=Ut,t[10]=Bt,t[11]=0,t[12]=r[0]+H-(K*H+gt*q+Gt*J),t[13]=r[1]+q-(pt*H+yt*q+Ut*J),t[14]=r[2]+J-(_t*H+Pt*q+Bt*J),t[15]=1,t},fromQuat:function(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=r+r,u=n+n,c=a+a,h=r*l,p=n*l,v=n*u,S=a*l,y=a*u,G=a*c,U=s*l,b=s*u,E=s*c;return t[0]=1-v-G,t[1]=p+E,t[2]=S-b,t[3]=0,t[4]=p-E,t[5]=1-h-G,t[6]=y+U,t[7]=0,t[8]=S+b,t[9]=y-U,t[10]=1-h-v,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},frustum:function(t,e,r,n,a,s,l){var u=1/(r-e),c=1/(a-n),h=1/(s-l);return t[0]=2*s*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*s*c,t[6]=0,t[7]=0,t[8]=(r+e)*u,t[9]=(a+n)*c,t[10]=(l+s)*h,t[11]=-1,t[12]=0,t[13]=0,t[14]=l*s*2*h,t[15]=0,t},perspective:function(t,e,r,n,a){var s,l=1/Math.tan(e/2);return t[0]=l/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=l,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=a&&a!==1/0?(s=1/(n-a),t[10]=(a+n)*s,t[14]=2*a*n*s):(t[10]=-1,t[14]=-2*n),t},perspectiveFromFieldOfView:function(t,e,r,n){var a=Math.tan(e.upDegrees*Math.PI/180),s=Math.tan(e.downDegrees*Math.PI/180),l=Math.tan(e.leftDegrees*Math.PI/180),u=Math.tan(e.rightDegrees*Math.PI/180),c=2/(l+u),h=2/(a+s);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=h,t[6]=0,t[7]=0,t[8]=-(l-u)*c*.5,t[9]=(a-s)*h*.5,t[10]=n/(r-n),t[11]=-1,t[12]=0,t[13]=0,t[14]=n*r/(r-n),t[15]=0,t},ortho:function(t,e,r,n,a,s,l){var u=1/(e-r),c=1/(n-a),h=1/(s-l);return t[0]=-2*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*h,t[11]=0,t[12]=(e+r)*u,t[13]=(a+n)*c,t[14]=(l+s)*h,t[15]=1,t},lookAt:function(e,r,n,a){var s,l,u,c,h,p,v,S,y,G,U=r[0],b=r[1],E=r[2],C=a[0],I=a[1],N=a[2],$=n[0],k=n[1],W=n[2];return Math.abs(U-$)<t&&Math.abs(b-k)<t&&Math.abs(E-W)<t?g(e):(v=U-$,S=b-k,y=E-W,s=I*(y*=G=1/Math.hypot(v,S,y))-N*(S*=G),l=N*(v*=G)-C*y,u=C*S-I*v,(G=Math.hypot(s,l,u))?(s*=G=1/G,l*=G,u*=G):(s=0,l=0,u=0),c=S*u-y*l,h=y*s-v*u,p=v*l-S*s,(G=Math.hypot(c,h,p))?(c*=G=1/G,h*=G,p*=G):(c=0,h=0,p=0),e[0]=s,e[1]=c,e[2]=v,e[3]=0,e[4]=l,e[5]=h,e[6]=S,e[7]=0,e[8]=u,e[9]=p,e[10]=y,e[11]=0,e[12]=-(s*U+l*b+u*E),e[13]=-(c*U+h*b+p*E),e[14]=-(v*U+S*b+y*E),e[15]=1,e)},targetTo:function(t,e,r,n){var a=e[0],s=e[1],l=e[2],u=n[0],c=n[1],h=n[2],p=a-r[0],v=s-r[1],S=l-r[2],y=p*p+v*v+S*S;y>0&&(p*=y=1/Math.sqrt(y),v*=y,S*=y);var G=c*S-h*v,U=h*p-u*S,b=u*v-c*p;return(y=G*G+U*U+b*b)>0&&(G*=y=1/Math.sqrt(y),U*=y,b*=y),t[0]=G,t[1]=U,t[2]=b,t[3]=0,t[4]=v*b-S*U,t[5]=S*G-p*b,t[6]=p*U-v*G,t[7]=0,t[8]=p,t[9]=v,t[10]=S,t[11]=0,t[12]=a,t[13]=s,t[14]=l,t[15]=1,t},str:function(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t[9]=e[9]+r[9],t[10]=e[10]+r[10],t[11]=e[11]+r[11],t[12]=e[12]+r[12],t[13]=e[13]+r[13],t[14]=e[14]+r[14],t[15]=e[15]+r[15],t},subtract:j,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t[9]=e[9]*r,t[10]=e[10]*r,t[11]=e[11]*r,t[12]=e[12]*r,t[13]=e[13]*r,t[14]=e[14]*r,t[15]=e[15]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t[6]=e[6]+r[6]*n,t[7]=e[7]+r[7]*n,t[8]=e[8]+r[8]*n,t[9]=e[9]+r[9]*n,t[10]=e[10]+r[10]*n,t[11]=e[11]+r[11]*n,t[12]=e[12]+r[12]*n,t[13]=e[13]+r[13]*n,t[14]=e[14]+r[14]*n,t[15]=e[15]+r[15]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]},equals:function(e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=e[8],S=e[9],y=e[10],G=e[11],U=e[12],b=e[13],E=e[14],C=e[15],I=r[0],N=r[1],$=r[2],k=r[3],W=r[4],H=r[5],q=r[6],J=r[7],K=r[8],pt=r[9],_t=r[10],gt=r[11],yt=r[12],Pt=r[13],Gt=r[14],Ut=r[15];return Math.abs(n-I)<=t*Math.max(1,Math.abs(n),Math.abs(I))&&Math.abs(a-N)<=t*Math.max(1,Math.abs(a),Math.abs(N))&&Math.abs(s-$)<=t*Math.max(1,Math.abs(s),Math.abs($))&&Math.abs(l-k)<=t*Math.max(1,Math.abs(l),Math.abs(k))&&Math.abs(u-W)<=t*Math.max(1,Math.abs(u),Math.abs(W))&&Math.abs(c-H)<=t*Math.max(1,Math.abs(c),Math.abs(H))&&Math.abs(h-q)<=t*Math.max(1,Math.abs(h),Math.abs(q))&&Math.abs(p-J)<=t*Math.max(1,Math.abs(p),Math.abs(J))&&Math.abs(v-K)<=t*Math.max(1,Math.abs(v),Math.abs(K))&&Math.abs(S-pt)<=t*Math.max(1,Math.abs(S),Math.abs(pt))&&Math.abs(y-_t)<=t*Math.max(1,Math.abs(y),Math.abs(_t))&&Math.abs(G-gt)<=t*Math.max(1,Math.abs(G),Math.abs(gt))&&Math.abs(U-yt)<=t*Math.max(1,Math.abs(U),Math.abs(yt))&&Math.abs(b-Pt)<=t*Math.max(1,Math.abs(b),Math.abs(Pt))&&Math.abs(E-Gt)<=t*Math.max(1,Math.abs(E),Math.abs(Gt))&&Math.abs(C-Ut)<=t*Math.max(1,Math.abs(C),Math.abs(Ut))},mul:G,sub:U});function O(){var t=new e(3);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function T(t){var e=t[0],r=t[1],n=t[2];return Math.hypot(e,r,n)}function D(t,r,n){var a=new e(3);return a[0]=t,a[1]=r,a[2]=n,a}function F(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t}function L(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t}function V(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t}function Q(t,e){var r=e[0]-t[0],n=e[1]-t[1],a=e[2]-t[2];return Math.hypot(r,n,a)}function Y(t,e){var r=e[0]-t[0],n=e[1]-t[1],a=e[2]-t[2];return r*r+n*n+a*a}function X(t){var e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}function Z(t,e){var r=e[0],n=e[1],a=e[2],s=r*r+n*n+a*a;return s>0&&(s=1/Math.sqrt(s)),t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function _(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function B(t,e,r){var n=e[0],a=e[1],s=e[2],l=r[0],u=r[1],c=r[2];return t[0]=a*c-s*u,t[1]=s*l-n*c,t[2]=n*u-a*l,t}var E,C=F,I=L,N=V,$=Q,k=Y,W=T,H=X,q=(E=O(),function(t,e,r,n,a,s){var l,u;for(e||(e=3),r||(r=0),u=n?Math.min(n*e+r,t.length):t.length,l=r;l<u;l+=e)E[0]=t[l],E[1]=t[l+1],E[2]=t[l+2],a(E,E,s),t[l]=E[0],t[l+1]=E[1],t[l+2]=E[2];return t}),J=Object.freeze({create:O,clone:function(t){var r=new e(3);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r},length:T,fromValues:D,copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t},set:function(t,e,r,n){return t[0]=e,t[1]=r,t[2]=n,t},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t},subtract:F,multiply:L,divide:V,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t},scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t},distance:Q,squaredDistance:Y,squaredLength:X,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t},normalize:Z,dot:_,cross:B,lerp:function(t,e,r,n){var a=e[0],s=e[1],l=e[2];return t[0]=a+n*(r[0]-a),t[1]=s+n*(r[1]-s),t[2]=l+n*(r[2]-l),t},hermite:function(t,e,r,n,a,s){var l=s*s,u=l*(2*s-3)+1,c=l*(s-2)+s,h=l*(s-1),p=l*(3-2*s);return t[0]=e[0]*u+r[0]*c+n[0]*h+a[0]*p,t[1]=e[1]*u+r[1]*c+n[1]*h+a[1]*p,t[2]=e[2]*u+r[2]*c+n[2]*h+a[2]*p,t},bezier:function(t,e,r,n,a,s){var l=1-s,u=l*l,c=s*s,h=u*l,p=3*s*u,v=3*c*l,S=c*s;return t[0]=e[0]*h+r[0]*p+n[0]*v+a[0]*S,t[1]=e[1]*h+r[1]*p+n[1]*v+a[1]*S,t[2]=e[2]*h+r[2]*p+n[2]*v+a[2]*S,t},random:function(t,e){e=e||1;var n=2*r()*Math.PI,a=2*r()-1,s=Math.sqrt(1-a*a)*e;return t[0]=Math.cos(n)*s,t[1]=Math.sin(n)*s,t[2]=a*e,t},transformMat4:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=r[3]*n+r[7]*a+r[11]*s+r[15];return l=l||1,t[0]=(r[0]*n+r[4]*a+r[8]*s+r[12])/l,t[1]=(r[1]*n+r[5]*a+r[9]*s+r[13])/l,t[2]=(r[2]*n+r[6]*a+r[10]*s+r[14])/l,t},transformMat3:function(t,e,r){var n=e[0],a=e[1],s=e[2];return t[0]=n*r[0]+a*r[3]+s*r[6],t[1]=n*r[1]+a*r[4]+s*r[7],t[2]=n*r[2]+a*r[5]+s*r[8],t},transformQuat:function(t,e,r){var n=r[0],a=r[1],s=r[2],l=r[3],u=e[0],c=e[1],h=e[2],p=a*h-s*c,v=s*u-n*h,S=n*c-a*u,y=a*S-s*v,G=s*p-n*S,U=n*v-a*p,b=2*l;return p*=b,v*=b,S*=b,y*=2,G*=2,U*=2,t[0]=u+p+y,t[1]=c+v+G,t[2]=h+S+U,t},rotateX:function(t,e,r,n){var a=[],s=[];return a[0]=e[0]-r[0],a[1]=e[1]-r[1],a[2]=e[2]-r[2],s[0]=a[0],s[1]=a[1]*Math.cos(n)-a[2]*Math.sin(n),s[2]=a[1]*Math.sin(n)+a[2]*Math.cos(n),t[0]=s[0]+r[0],t[1]=s[1]+r[1],t[2]=s[2]+r[2],t},rotateY:function(t,e,r,n){var a=[],s=[];return a[0]=e[0]-r[0],a[1]=e[1]-r[1],a[2]=e[2]-r[2],s[0]=a[2]*Math.sin(n)+a[0]*Math.cos(n),s[1]=a[1],s[2]=a[2]*Math.cos(n)-a[0]*Math.sin(n),t[0]=s[0]+r[0],t[1]=s[1]+r[1],t[2]=s[2]+r[2],t},rotateZ:function(t,e,r,n){var a=[],s=[];return a[0]=e[0]-r[0],a[1]=e[1]-r[1],a[2]=e[2]-r[2],s[0]=a[0]*Math.cos(n)-a[1]*Math.sin(n),s[1]=a[0]*Math.sin(n)+a[1]*Math.cos(n),s[2]=a[2],t[0]=s[0]+r[0],t[1]=s[1]+r[1],t[2]=s[2]+r[2],t},angle:function(t,e){var r=D(t[0],t[1],t[2]),n=D(e[0],e[1],e[2]);Z(r,r),Z(n,n);var a=_(r,n);return a>1?0:a<-1?Math.PI:Math.acos(a)},zero:function(t){return t[0]=0,t[1]=0,t[2]=0,t},str:function(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]},equals:function(e,r){var n=e[0],a=e[1],s=e[2],l=r[0],u=r[1],c=r[2];return Math.abs(n-l)<=t*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(a-u)<=t*Math.max(1,Math.abs(a),Math.abs(u))&&Math.abs(s-c)<=t*Math.max(1,Math.abs(s),Math.abs(c))},sub:C,mul:I,div:N,dist:$,sqrDist:k,len:W,sqrLen:H,forEach:q});function tt(){var t=new e(4);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function nt(t){var r=new e(4);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r}function at(t,r,n,a){var s=new e(4);return s[0]=t,s[1]=r,s[2]=n,s[3]=a,s}function rt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function ut(t,e,r,n,a){return t[0]=e,t[1]=r,t[2]=n,t[3]=a,t}function et(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t}function ot(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t}function it(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t[3]=e[3]*r[3],t}function ct(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t[3]=e[3]/r[3],t}function ht(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t}function st(t,e){var r=e[0]-t[0],n=e[1]-t[1],a=e[2]-t[2],s=e[3]-t[3];return Math.hypot(r,n,a,s)}function Mt(t,e){var r=e[0]-t[0],n=e[1]-t[1],a=e[2]-t[2],s=e[3]-t[3];return r*r+n*n+a*a+s*s}function ft(t){var e=t[0],r=t[1],n=t[2],a=t[3];return Math.hypot(e,r,n,a)}function lt(t){var e=t[0],r=t[1],n=t[2],a=t[3];return e*e+r*r+n*n+a*a}function vt(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=r*r+n*n+a*a+s*s;return l>0&&(l=1/Math.sqrt(l)),t[0]=r*l,t[1]=n*l,t[2]=a*l,t[3]=s*l,t}function bt(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function mt(t,e,r,n){var a=e[0],s=e[1],l=e[2],u=e[3];return t[0]=a+n*(r[0]-a),t[1]=s+n*(r[1]-s),t[2]=l+n*(r[2]-l),t[3]=u+n*(r[3]-u),t}function dt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]}function xt(e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=r[0],c=r[1],h=r[2],p=r[3];return Math.abs(n-u)<=t*Math.max(1,Math.abs(n),Math.abs(u))&&Math.abs(a-c)<=t*Math.max(1,Math.abs(a),Math.abs(c))&&Math.abs(s-h)<=t*Math.max(1,Math.abs(s),Math.abs(h))&&Math.abs(l-p)<=t*Math.max(1,Math.abs(l),Math.abs(p))}var K=ot,pt=it,_t=ct,gt=st,yt=Mt,Pt=ft,Gt=lt,Ut=function(){var t=tt();return function(e,r,n,a,s,l){var u,c;for(r||(r=4),n||(n=0),c=a?Math.min(a*r+n,e.length):e.length,u=n;u<c;u+=r)t[0]=e[u],t[1]=e[u+1],t[2]=e[u+2],t[3]=e[u+3],s(t,t,l),e[u]=t[0],e[u+1]=t[1],e[u+2]=t[2],e[u+3]=t[3];return e}}(),Bt=Object.freeze({create:tt,clone:nt,fromValues:at,copy:rt,set:ut,add:et,subtract:ot,multiply:it,divide:ct,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t[3]=Math.ceil(e[3]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t[3]=Math.floor(e[3]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t[3]=Math.min(e[3],r[3]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t[3]=Math.max(e[3],r[3]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t[3]=Math.round(e[3]),t},scale:ht,scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t},distance:st,squaredDistance:Mt,length:ft,squaredLength:lt,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t},normalize:vt,dot:bt,cross:function(t,e,r,n){var a=r[0]*n[1]-r[1]*n[0],s=r[0]*n[2]-r[2]*n[0],l=r[0]*n[3]-r[3]*n[0],u=r[1]*n[2]-r[2]*n[1],c=r[1]*n[3]-r[3]*n[1],h=r[2]*n[3]-r[3]*n[2],p=e[0],v=e[1],S=e[2],y=e[3];return t[0]=v*h-S*c+y*u,t[1]=-p*h+S*l-y*s,t[2]=p*c-v*l+y*a,t[3]=-p*u+v*s-S*a,t},lerp:mt,random:function(t,e){var n,a,s,l,u,c;e=e||1;do{u=(n=2*r()-1)*n+(a=2*r()-1)*a}while(u>=1);do{c=(s=2*r()-1)*s+(l=2*r()-1)*l}while(c>=1);var h=Math.sqrt((1-u)/c);return t[0]=e*n,t[1]=e*a,t[2]=e*s*h,t[3]=e*l*h,t},transformMat4:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3];return t[0]=r[0]*n+r[4]*a+r[8]*s+r[12]*l,t[1]=r[1]*n+r[5]*a+r[9]*s+r[13]*l,t[2]=r[2]*n+r[6]*a+r[10]*s+r[14]*l,t[3]=r[3]*n+r[7]*a+r[11]*s+r[15]*l,t},transformQuat:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=r[0],u=r[1],c=r[2],h=r[3],p=h*n+u*s-c*a,v=h*a+c*n-l*s,S=h*s+l*a-u*n,y=-l*n-u*a-c*s;return t[0]=p*h+y*-l+v*-c-S*-u,t[1]=v*h+y*-u+S*-l-p*-c,t[2]=S*h+y*-c+p*-u-v*-l,t[3]=e[3],t},zero:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t},str:function(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},exactEquals:dt,equals:xt,sub:K,mul:pt,div:_t,dist:gt,sqrDist:yt,len:Pt,sqrLen:Gt,forEach:Ut});function jt(){var t=new e(4);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function It(t,e,r){r*=.5;var n=Math.sin(r);return t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=Math.cos(r),t}function St(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=r[0],c=r[1],h=r[2],p=r[3];return t[0]=n*p+l*u+a*h-s*c,t[1]=a*p+l*c+s*u-n*h,t[2]=s*p+l*h+n*c-a*u,t[3]=l*p-n*u-a*c-s*h,t}function Et(t,e,r){r*=.5;var n=e[0],a=e[1],s=e[2],l=e[3],u=Math.sin(r),c=Math.cos(r);return t[0]=n*c+l*u,t[1]=a*c+s*u,t[2]=s*c-a*u,t[3]=l*c-n*u,t}function Ot(t,e,r){r*=.5;var n=e[0],a=e[1],s=e[2],l=e[3],u=Math.sin(r),c=Math.cos(r);return t[0]=n*c-s*u,t[1]=a*c+l*u,t[2]=s*c+n*u,t[3]=l*c-a*u,t}function Tt(t,e,r){r*=.5;var n=e[0],a=e[1],s=e[2],l=e[3],u=Math.sin(r),c=Math.cos(r);return t[0]=n*c+a*u,t[1]=a*c-n*u,t[2]=s*c+l*u,t[3]=l*c-s*u,t}function Dt(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=Math.sqrt(r*r+n*n+a*a),u=Math.exp(s),c=l>0?u*Math.sin(l)/l:0;return t[0]=r*c,t[1]=n*c,t[2]=a*c,t[3]=u*Math.cos(l),t}function Ft(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=Math.sqrt(r*r+n*n+a*a),u=l>0?Math.atan2(l,s)/l:0;return t[0]=r*u,t[1]=n*u,t[2]=a*u,t[3]=.5*Math.log(r*r+n*n+a*a+s*s),t}function Lt(e,r,n,a){var s,l,u,c,h,p=r[0],v=r[1],S=r[2],y=r[3],G=n[0],U=n[1],b=n[2],E=n[3];return(l=p*G+v*U+S*b+y*E)<0&&(l=-l,G=-G,U=-U,b=-b,E=-E),1-l>t?(s=Math.acos(l),u=Math.sin(s),c=Math.sin((1-a)*s)/u,h=Math.sin(a*s)/u):(c=1-a,h=a),e[0]=c*p+h*G,e[1]=c*v+h*U,e[2]=c*S+h*b,e[3]=c*y+h*E,e}function Vt(t,e){var r,n=e[0]+e[4]+e[8];if(n>0)r=Math.sqrt(n+1),t[3]=.5*r,r=.5/r,t[0]=(e[5]-e[7])*r,t[1]=(e[6]-e[2])*r,t[2]=(e[1]-e[3])*r;else{var a=0;e[4]>e[0]&&(a=1),e[8]>e[3*a+a]&&(a=2);var s=(a+1)%3,l=(a+2)%3;r=Math.sqrt(e[3*a+a]-e[3*s+s]-e[3*l+l]+1),t[a]=.5*r,r=.5/r,t[3]=(e[3*s+l]-e[3*l+s])*r,t[s]=(e[3*s+a]+e[3*a+s])*r,t[l]=(e[3*l+a]+e[3*a+l])*r}return t}var wt,Rt,Ct,Nt,At,Yt,Xt=nt,zt=at,$t=rt,kt=ut,Wt=et,Zt=St,Ht=ht,qt=bt,Qt=mt,Jt=ft,Kt=Jt,te=lt,ee=te,re=vt,ie=dt,ne=xt,ae=(wt=O(),Rt=D(1,0,0),Ct=D(0,1,0),function(t,e,r){var n=_(e,r);return n<-.999999?(B(wt,Rt,e),W(wt)<1e-6&&B(wt,Ct,e),Z(wt,wt),It(t,wt,Math.PI),t):n>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(B(wt,e,r),t[0]=wt[0],t[1]=wt[1],t[2]=wt[2],t[3]=1+n,re(t,t))}),oe=(Nt=jt(),At=jt(),function(t,e,r,n,a,s){return Lt(Nt,e,a,s),Lt(At,r,n,s),Lt(t,Nt,At,2*s*(1-s)),t}),se=(Yt=m(),function(t,e,r,n){return Yt[0]=r[0],Yt[3]=r[1],Yt[6]=r[2],Yt[1]=n[0],Yt[4]=n[1],Yt[7]=n[2],Yt[2]=-e[0],Yt[5]=-e[1],Yt[8]=-e[2],re(t,Vt(t,Yt))}),le=Object.freeze({create:jt,identity:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t},setAxisAngle:It,getAxisAngle:function(e,r){var n=2*Math.acos(r[3]),a=Math.sin(n/2);return a>t?(e[0]=r[0]/a,e[1]=r[1]/a,e[2]=r[2]/a):(e[0]=1,e[1]=0,e[2]=0),n},getAngle:function(t,e){var r=qt(t,e);return Math.acos(2*r*r-1)},multiply:St,rotateX:Et,rotateY:Ot,rotateZ:Tt,calculateW:function(t,e){var r=e[0],n=e[1],a=e[2];return t[0]=r,t[1]=n,t[2]=a,t[3]=Math.sqrt(Math.abs(1-r*r-n*n-a*a)),t},exp:Dt,ln:Ft,pow:function(t,e,r){return Ft(t,e),Ht(t,t,r),Dt(t,t),t},slerp:Lt,random:function(t){var e=r(),n=r(),a=r(),s=Math.sqrt(1-e),l=Math.sqrt(e);return t[0]=s*Math.sin(2*Math.PI*n),t[1]=s*Math.cos(2*Math.PI*n),t[2]=l*Math.sin(2*Math.PI*a),t[3]=l*Math.cos(2*Math.PI*a),t},invert:function(t,e){var r=e[0],n=e[1],a=e[2],s=e[3],l=r*r+n*n+a*a+s*s,u=l?1/l:0;return t[0]=-r*u,t[1]=-n*u,t[2]=-a*u,t[3]=s*u,t},conjugate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat3:Vt,fromEuler:function(t,e,r,n){var a=.5*Math.PI/180;e*=a,r*=a,n*=a;var s=Math.sin(e),l=Math.cos(e),u=Math.sin(r),c=Math.cos(r),h=Math.sin(n),p=Math.cos(n);return t[0]=s*c*p-l*u*h,t[1]=l*u*p+s*c*h,t[2]=l*c*h-s*u*p,t[3]=l*c*p+s*u*h,t},str:function(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},clone:Xt,fromValues:zt,copy:$t,set:kt,add:Wt,mul:Zt,scale:Ht,dot:qt,lerp:Qt,length:Jt,len:Kt,squaredLength:te,sqrLen:ee,normalize:re,exactEquals:ie,equals:ne,rotationTo:ae,sqlerp:oe,setAxes:se});function Mn(t,e,r){var n=.5*r[0],a=.5*r[1],s=.5*r[2],l=e[0],u=e[1],c=e[2],h=e[3];return t[0]=l,t[1]=u,t[2]=c,t[3]=h,t[4]=n*h+a*c-s*u,t[5]=a*h+s*l-n*c,t[6]=s*h+n*u-a*l,t[7]=-n*l-a*u-s*c,t}function fn(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}var ue=$t,fe=$t;function bn(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=r[4],c=r[5],h=r[6],p=r[7],v=e[4],S=e[5],y=e[6],G=e[7],U=r[0],b=r[1],E=r[2],C=r[3];return t[0]=n*C+l*U+a*E-s*b,t[1]=a*C+l*b+s*U-n*E,t[2]=s*C+l*E+n*b-a*U,t[3]=l*C-n*U-a*b-s*E,t[4]=n*p+l*u+a*h-s*c+v*C+G*U+S*E-y*b,t[5]=a*p+l*c+s*u-n*h+S*C+G*b+y*U-v*E,t[6]=s*p+l*h+n*c-a*u+y*C+G*E+v*b-S*U,t[7]=l*p-n*u-a*c-s*h+G*C-v*U-S*b-y*E,t}var me=bn,ce=qt,he=Jt,de=he,pe=te,_e=pe,ve=Object.freeze({create:function(){var t=new e(8);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t},clone:function(t){var r=new e(8);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r},fromValues:function(t,r,n,a,s,l,u,c){var h=new e(8);return h[0]=t,h[1]=r,h[2]=n,h[3]=a,h[4]=s,h[5]=l,h[6]=u,h[7]=c,h},fromRotationTranslationValues:function(t,r,n,a,s,l,u){var c=new e(8);c[0]=t,c[1]=r,c[2]=n,c[3]=a;var h=.5*s,p=.5*l,v=.5*u;return c[4]=h*a+p*n-v*r,c[5]=p*a+v*t-h*n,c[6]=v*a+h*r-p*t,c[7]=-h*t-p*r-v*n,c},fromRotationTranslation:Mn,fromTranslation:function(t,e){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*e[0],t[5]=.5*e[1],t[6]=.5*e[2],t[7]=0,t},fromRotation:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},fromMat4:function(t,r){var n=jt();P(n,r);var a=new e(3);return R(a,r),Mn(t,n,a),t},copy:fn,identity:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},set:function(t,e,r,n,a,s,l,u,c){return t[0]=e,t[1]=r,t[2]=n,t[3]=a,t[4]=s,t[5]=l,t[6]=u,t[7]=c,t},getReal:ue,getDual:function(t,e){return t[0]=e[4],t[1]=e[5],t[2]=e[6],t[3]=e[7],t},setReal:fe,setDual:function(t,e){return t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=e[3],t},getTranslation:function(t,e){var r=e[4],n=e[5],a=e[6],s=e[7],l=-e[0],u=-e[1],c=-e[2],h=e[3];return t[0]=2*(r*h+s*l+n*c-a*u),t[1]=2*(n*h+s*u+a*l-r*c),t[2]=2*(a*h+s*c+r*u-n*l),t},translate:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=.5*r[0],c=.5*r[1],h=.5*r[2],p=e[4],v=e[5],S=e[6],y=e[7];return t[0]=n,t[1]=a,t[2]=s,t[3]=l,t[4]=l*u+a*h-s*c+p,t[5]=l*c+s*u-n*h+v,t[6]=l*h+n*c-a*u+S,t[7]=-n*u-a*c-s*h+y,t},rotateX:function(t,e,r){var n=-e[0],a=-e[1],s=-e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=u*l+p*n+c*s-h*a,S=c*l+p*a+h*n-u*s,y=h*l+p*s+u*a-c*n,G=p*l-u*n-c*a-h*s;return Et(t,e,r),n=t[0],a=t[1],s=t[2],l=t[3],t[4]=v*l+G*n+S*s-y*a,t[5]=S*l+G*a+y*n-v*s,t[6]=y*l+G*s+v*a-S*n,t[7]=G*l-v*n-S*a-y*s,t},rotateY:function(t,e,r){var n=-e[0],a=-e[1],s=-e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=u*l+p*n+c*s-h*a,S=c*l+p*a+h*n-u*s,y=h*l+p*s+u*a-c*n,G=p*l-u*n-c*a-h*s;return Ot(t,e,r),n=t[0],a=t[1],s=t[2],l=t[3],t[4]=v*l+G*n+S*s-y*a,t[5]=S*l+G*a+y*n-v*s,t[6]=y*l+G*s+v*a-S*n,t[7]=G*l-v*n-S*a-y*s,t},rotateZ:function(t,e,r){var n=-e[0],a=-e[1],s=-e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=u*l+p*n+c*s-h*a,S=c*l+p*a+h*n-u*s,y=h*l+p*s+u*a-c*n,G=p*l-u*n-c*a-h*s;return Tt(t,e,r),n=t[0],a=t[1],s=t[2],l=t[3],t[4]=v*l+G*n+S*s-y*a,t[5]=S*l+G*a+y*n-v*s,t[6]=y*l+G*s+v*a-S*n,t[7]=G*l-v*n-S*a-y*s,t},rotateByQuatAppend:function(t,e,r){var n=r[0],a=r[1],s=r[2],l=r[3],u=e[0],c=e[1],h=e[2],p=e[3];return t[0]=u*l+p*n+c*s-h*a,t[1]=c*l+p*a+h*n-u*s,t[2]=h*l+p*s+u*a-c*n,t[3]=p*l-u*n-c*a-h*s,u=e[4],c=e[5],h=e[6],p=e[7],t[4]=u*l+p*n+c*s-h*a,t[5]=c*l+p*a+h*n-u*s,t[6]=h*l+p*s+u*a-c*n,t[7]=p*l-u*n-c*a-h*s,t},rotateByQuatPrepend:function(t,e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=r[0],c=r[1],h=r[2],p=r[3];return t[0]=n*p+l*u+a*h-s*c,t[1]=a*p+l*c+s*u-n*h,t[2]=s*p+l*h+n*c-a*u,t[3]=l*p-n*u-a*c-s*h,u=r[4],c=r[5],h=r[6],p=r[7],t[4]=n*p+l*u+a*h-s*c,t[5]=a*p+l*c+s*u-n*h,t[6]=s*p+l*h+n*c-a*u,t[7]=l*p-n*u-a*c-s*h,t},rotateAroundAxis:function(e,r,n,a){if(Math.abs(a)<t)return fn(e,r);var s=Math.hypot(n[0],n[1],n[2]);a*=.5;var l=Math.sin(a),u=l*n[0]/s,c=l*n[1]/s,h=l*n[2]/s,p=Math.cos(a),v=r[0],S=r[1],y=r[2],G=r[3];e[0]=v*p+G*u+S*h-y*c,e[1]=S*p+G*c+y*u-v*h,e[2]=y*p+G*h+v*c-S*u,e[3]=G*p-v*u-S*c-y*h;var U=r[4],b=r[5],E=r[6],C=r[7];return e[4]=U*p+C*u+b*h-E*c,e[5]=b*p+C*c+E*u-U*h,e[6]=E*p+C*h+U*c-b*u,e[7]=C*p-U*u-b*c-E*h,e},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t},multiply:bn,mul:me,scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t},dot:ce,lerp:function(t,e,r,n){var a=1-n;return ce(e,r)<0&&(n=-n),t[0]=e[0]*a+r[0]*n,t[1]=e[1]*a+r[1]*n,t[2]=e[2]*a+r[2]*n,t[3]=e[3]*a+r[3]*n,t[4]=e[4]*a+r[4]*n,t[5]=e[5]*a+r[5]*n,t[6]=e[6]*a+r[6]*n,t[7]=e[7]*a+r[7]*n,t},invert:function(t,e){var r=pe(e);return t[0]=-e[0]/r,t[1]=-e[1]/r,t[2]=-e[2]/r,t[3]=e[3]/r,t[4]=-e[4]/r,t[5]=-e[5]/r,t[6]=-e[6]/r,t[7]=e[7]/r,t},conjugate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=e[7],t},length:he,len:de,squaredLength:pe,sqrLen:_e,normalize:function(t,e){var r=pe(e);if(r>0){r=Math.sqrt(r);var n=e[0]/r,a=e[1]/r,s=e[2]/r,l=e[3]/r,u=e[4],c=e[5],h=e[6],p=e[7],v=n*u+a*c+s*h+l*p;t[0]=n,t[1]=a,t[2]=s,t[3]=l,t[4]=(u-n*v)/r,t[5]=(c-a*v)/r,t[6]=(h-s*v)/r,t[7]=(p-l*v)/r}return t},str:function(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]},equals:function(e,r){var n=e[0],a=e[1],s=e[2],l=e[3],u=e[4],c=e[5],h=e[6],p=e[7],v=r[0],S=r[1],y=r[2],G=r[3],U=r[4],b=r[5],E=r[6],C=r[7];return Math.abs(n-v)<=t*Math.max(1,Math.abs(n),Math.abs(v))&&Math.abs(a-S)<=t*Math.max(1,Math.abs(a),Math.abs(S))&&Math.abs(s-y)<=t*Math.max(1,Math.abs(s),Math.abs(y))&&Math.abs(l-G)<=t*Math.max(1,Math.abs(l),Math.abs(G))&&Math.abs(u-U)<=t*Math.max(1,Math.abs(u),Math.abs(U))&&Math.abs(c-b)<=t*Math.max(1,Math.abs(c),Math.abs(b))&&Math.abs(h-E)<=t*Math.max(1,Math.abs(h),Math.abs(E))&&Math.abs(p-C)<=t*Math.max(1,Math.abs(p),Math.abs(C))}});function An(){var t=new e(2);return e!=Float32Array&&(t[0]=0,t[1]=0),t}function wn(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t}function Rn(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t}function zn(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t}function Pn(t,e){var r=e[0]-t[0],n=e[1]-t[1];return Math.hypot(r,n)}function jn(t,e){var r=e[0]-t[0],n=e[1]-t[1];return r*r+n*n}function In(t){var e=t[0],r=t[1];return Math.hypot(e,r)}function Sn(t){var e=t[0],r=t[1];return e*e+r*r}var ge=In,Se=wn,xe=Rn,ye=zn,Pe=Pn,Te=jn,Me=Sn,Le=function(){var t=An();return function(e,r,n,a,s,l){var u,c;for(r||(r=2),n||(n=0),c=a?Math.min(a*r+n,e.length):e.length,u=n;u<c;u+=r)t[0]=e[u],t[1]=e[u+1],s(t,t,l),e[u]=t[0],e[u+1]=t[1];return e}}(),Ge=Object.freeze({create:An,clone:function(t){var r=new e(2);return r[0]=t[0],r[1]=t[1],r},fromValues:function(t,r){var n=new e(2);return n[0]=t,n[1]=r,n},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t},set:function(t,e,r){return t[0]=e,t[1]=r,t},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t},subtract:wn,multiply:Rn,divide:zn,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t},scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t},distance:Pn,squaredDistance:jn,length:In,squaredLength:Sn,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t},normalize:function(t,e){var r=e[0],n=e[1],a=r*r+n*n;return a>0&&(a=1/Math.sqrt(a)),t[0]=e[0]*a,t[1]=e[1]*a,t},dot:function(t,e){return t[0]*e[0]+t[1]*e[1]},cross:function(t,e,r){var n=e[0]*r[1]-e[1]*r[0];return t[0]=t[1]=0,t[2]=n,t},lerp:function(t,e,r,n){var a=e[0],s=e[1];return t[0]=a+n*(r[0]-a),t[1]=s+n*(r[1]-s),t},random:function(t,e){e=e||1;var n=2*r()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t},transformMat2:function(t,e,r){var n=e[0],a=e[1];return t[0]=r[0]*n+r[2]*a,t[1]=r[1]*n+r[3]*a,t},transformMat2d:function(t,e,r){var n=e[0],a=e[1];return t[0]=r[0]*n+r[2]*a+r[4],t[1]=r[1]*n+r[3]*a+r[5],t},transformMat3:function(t,e,r){var n=e[0],a=e[1];return t[0]=r[0]*n+r[3]*a+r[6],t[1]=r[1]*n+r[4]*a+r[7],t},transformMat4:function(t,e,r){var n=e[0],a=e[1];return t[0]=r[0]*n+r[4]*a+r[12],t[1]=r[1]*n+r[5]*a+r[13],t},rotate:function(t,e,r,n){var a=e[0]-r[0],s=e[1]-r[1],l=Math.sin(n),u=Math.cos(n);return t[0]=a*u-s*l+r[0],t[1]=a*l+s*u+r[1],t},angle:function(t,e){var r=t[0],n=t[1],a=e[0],s=e[1],l=r*r+n*n;l>0&&(l=1/Math.sqrt(l));var u=a*a+s*s;u>0&&(u=1/Math.sqrt(u));var c=(r*a+n*s)*l*u;return c>1?0:c<-1?Math.PI:Math.acos(c)},zero:function(t){return t[0]=0,t[1]=0,t},str:function(t){return"vec2("+t[0]+", "+t[1]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]},equals:function(e,r){var n=e[0],a=e[1],s=r[0],l=r[1];return Math.abs(n-s)<=t*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(a-l)<=t*Math.max(1,Math.abs(a),Math.abs(l))},len:ge,sub:Se,mul:xe,div:ye,dist:Pe,sqrDist:Te,sqrLen:Me,forEach:Le});let Ue={};function _defineProperty(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _classPrivateFieldGet(t,e){var r=e.get(t);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(t):r.value}function _classPrivateFieldSet(t,e,r){var n=e.get(t);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(t,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}Ue.glMatrix=a,Ue.mat2=u,Ue.mat2d=p,Ue.mat3=y,Ue.mat4=b,Ue.quat=le,Ue.quat2=ve,Ue.vec2=Ge,Ue.vec3=J,Ue.vec4=Bt,Object.defineProperty(Ue,"__esModule",{value:!0});let be=1;class UUID{static getNextUUID(){return be++}constructor(){this._UUID=be++}updateUUID(){this._UUID=be++}}let Ee={float:1*Float32Array.BYTES_PER_ELEMENT,float2:2*Float32Array.BYTES_PER_ELEMENT,float3:3*Float32Array.BYTES_PER_ELEMENT,float4:4*Float32Array.BYTES_PER_ELEMENT,mat2:4*Float32Array.BYTES_PER_ELEMENT,mat3:12*Float32Array.BYTES_PER_ELEMENT,mat4:16*Float32Array.BYTES_PER_ELEMENT};var Be={rgb2hex:(t,e,r)=>"#"+(16777216+(r|e<<8|t<<16)).toString(16).slice(1),regHex:function(){const t=/^#(?:[0-9a-fA-F]{3}){1,2}$/;return function(e){return t.test(e)}}(),hexToRGB_ZeroToOne:function(t){let e,r;if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))return r=[],e=t.substring(1).split(""),3===e.length&&(e=[e[0],e[0],e[1],e[1],e[2],e[2]]),e="0x"+e.join(""),r[0]=(e>>16&255)/255,r[1]=(e>>8&255)/255,r[2]=(255&e)/255,r;Fe.throwFunc("RedGLUtil.hexToRGB_ZeroToOne : 잘못된 hex값입니다.",t)}};let clamp=function(t,e,r){return Math.max(e,Math.min(r,t))};var De={clamp:clamp,nextHighestPowerOfTwo:function(){let t;return function(e){for(--e,t=1;t<32;t<<=1)e|=e>>t;return e+1}}(),quaternionToRotationMat4:function(t,e){let r=t[0],n=t[1],a=t[2],s=t[3],l=r+r,u=n+n,c=a+a,h=r*l,p=r*u,v=r*c,S=n*u,y=n*c,G=a*c,U=s*l,b=s*u,E=s*c;return e[0]=1-(S+G),e[4]=p-E,e[8]=v+b,e[1]=p+E,e[5]=1-(h+G),e[9]=y-U,e[2]=v-b,e[6]=y+U,e[10]=1-(h+S),e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},mat4ToEuler:function(t,e,r){e=e||[0,0,0],r=r||"XYZ";let n=t[0],a=t[4],s=t[8],l=t[1],u=t[5],c=t[9],h=t[2],p=t[6],v=t[10];return"XYZ"===r?(e[1]=Math.asin(clamp(s,-1,1)),Math.abs(s)<.99999?(e[0]=Math.atan2(-c,v),e[2]=Math.atan2(-a,n)):(e[0]=Math.atan2(p,u),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-clamp(c,-1,1)),Math.abs(c)<.99999?(e[1]=Math.atan2(s,v),e[2]=Math.atan2(l,u)):(e[1]=Math.atan2(-h,n),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(clamp(p,-1,1)),Math.abs(p)<.99999?(e[1]=Math.atan2(-h,v),e[2]=Math.atan2(-a,u)):(e[1]=0,e[2]=Math.atan2(l,n))):"ZYX"===r?(e[1]=Math.asin(-clamp(h,-1,1)),Math.abs(h)<.99999?(e[0]=Math.atan2(p,v),e[2]=Math.atan2(l,n)):(e[0]=0,e[2]=Math.atan2(-a,u))):"YZX"===r?(e[2]=Math.asin(clamp(l,-1,1)),Math.abs(l)<.99999?(e[0]=Math.atan2(-c,u),e[1]=Math.atan2(-h,n)):(e[0]=0,e[1]=Math.atan2(s,v))):"XZY"===r&&(e[2]=Math.asin(-clamp(a,-1,1)),Math.abs(a)<.99999?(e[0]=Math.atan2(p,u),e[1]=Math.atan2(s,n)):(e[0]=Math.atan2(-c,v),e[1]=0)),e},calculateNormals:function(t,e){let r,n,a=[];for(r=0;r<t.length;r+=3)a[r+0]=0,a[r+1]=0,a[r+2]=0;for(r=0;r<e.length;r+=3){let s,l,u,c,h=[],p=[],v=[];for(s=3*e[r],l=3*e[r+1],u=3*e[r+2],h[0]=t[u+0]-t[l+0],h[1]=t[u+1]-t[l+1],h[2]=t[u+2]-t[l+2],p[0]=t[s+0]-t[l+0],p[1]=t[s+1]-t[l+1],p[2]=t[s+2]-t[l+2],v[0]=h[1]*p[2]-h[2]*p[1],v[1]=h[2]*p[0]-h[0]*p[2],v[2]=h[0]*p[1]-h[1]*p[0],n=0;n<3;n++)c=3*e[r+n],a[c+0]=a[c+0]+v[0],a[c+1]=a[c+1]+v[1],a[c+2]=a[c+2]+v[2]}for(r=0;r<t.length;r+=3){let t=[];t[0]=a[r+0],t[1]=a[r+1],t[2]=a[r+2];let e=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);0===e&&(e=1),t[0]=t[0]/e,t[1]=t[1]/e,t[2]=t[2]/e,a[r+0]=t[0],a[r+1]=t[1],a[r+2]=t[2]}return a}};const we=(t=>{let e,r,n,a,s,l=[0,0,0],u=Ue.mat4.create(),c=Ue.mat4.create();return(t,h,p)=>(t=2*t/p.viewRect[2]-1,h=-2*h/p.viewRect[3]+1,e=1,s=p.camera,Ue.mat4.multiply(c,p.projectionMatrix,s.matrix),a=Ue.mat4.clone(c),Ue.mat4.invert(a,a),l=[t,h,1],Ue.mat4.identity(u),Ue.mat4.translate(u,u,l),Ue.mat4.multiply(a,a,u),l[0]=a[12],l[1]=a[13],l[2]=a[14],r=c[12]*t+c[13]*h+c[15],0!==r&&(n=1/r,l[0]/=n,l[1]/=n,l[2]/=n,l[0]=l[0]+s.x,l[1]=l[1]+s.y,l[2]=l[2]+s.z),l)})();var Fe={throwFunc:function(){throw"Error : "+Array.prototype.slice.call(arguments).join(" ")},...Be,...De,getFlatChildList:t=>{let e=function flattenDeep(t){const e=[...t],r=[];for(;e.length;){const t=e.shift();r.push(t),e.push(...t._children)}return r}(t);return e=e.reverse(),e},screenToWorld:we};class UniformBufferDescriptor{constructor(t=[],e=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST){Array.isArray(t)||Fe.throwFunc(`${this.constructor.name} - only allow Array Instance. / inputValue : ${t} { type : ${typeof t} }`),this.redStruct=JSON.parse(JSON.stringify(t)),this.redStructOffsetMap={};let r=0,n=Ee.float4;this.redStruct.map(t=>{if(t.valueName||Fe.throwFunc(`${this.constructor.name} - need valueName / inputValue : ${t.valueName} { type : ${typeof t.valueName} }`),t.hasOwnProperty("size")||Fe.throwFunc(`${this.constructor.name} - need size / inputValue : ${t.size} { type : ${typeof t.size} }`),t.size<=n){Math.floor(r/n)!=Math.floor((r+t.size-1)/n)&&(r+=n-r%n),t.offset=r,r+=t.size}else r%n&&(r+=n-r%n),t.offset=r,r+=t.size;this.redStructOffsetMap[t.valueName]=t.offset,t._UUID=t.valueName+"_"+UUID.getNextUUID()});let a=r%n;this.size=this.redStruct.length?r+(a?n-a:0):n,this.usage=e}}class DetectorGPU{constructor(){Re.set(this,{writable:!0,value:void 0}),_defineProperty(this,"detectGPU",t=>{}),Ce.set(this,{writable:!0,value:t=>{let e,r,n,a,s,l,u=window.navigator,c=u.userAgent.toLowerCase(),h=u.platform.toLowerCase(),p=u.appVersion.toLowerCase(),v="pc",S=0,whale=t=>c.includes("whale")?(r=parseFloat(/whale\/([\d]+)/.exec(c)[1]),e="whale"):0,chrome=t=>{if(c.includes(s="chrome")||c.includes(s="crios"))return e="chrome",r=parseFloat(("chrome"===s?/chrome\/([\d]+)/:/crios\/([\d]+)/).exec(c)[1])},firefox=t=>c.includes("firefox")?(e="firefox",r=parseFloat(/firefox\/([\d]+)/.exec(c)[1])):0,safari=t=>c.includes("safari")?(e="safari",r=parseFloat(/safari\/([\d]+)/.exec(c)[1])):0,opera=t=>{let n;return c.includes(n="opera")||c.includes(n="opr")?(e="opera",r="opera"===n?parseFloat(/version\/([\d]+)/.exec(c)[1]):parseFloat(/opr\/([\d]+)/.exec(c)[1])):0},naver=t=>c.includes("naver")?e="naver":0;if(c.includes("android"))e=n="android",v=c.includes("mobile")?(e+="Tablet","tablet"):"mobile",a=(s=/android ([\d.]+)/.exec(c))?(s=s[1].split("."),parseFloat(s[0]+"."+s[1])):0,S=1,whale()||naver()||opera()||chrome()||firefox()||(r=s=/safari\/([\d.]+)/.exec(c)?parseFloat(s[1]):0);else if(c.includes(s="ipad")||c.includes(s="iphone"))v="ipad"===s?"tablet":"mobile",e=n=s,a=(s=/os ([\d_]+)/.exec(c))?(s=s[1].split("_"),parseFloat(s[0]+"."+s[1])):0,S=1,whale()||naver()||opera()||chrome()||firefox()||(r=(s=/mobile\/([\S]+)/.exec(c))?parseFloat(s[1]):0);else if(h.includes("win")){for(s in l={5.1:"xp","6.0":"vista",6.1:"7",6.2:"8",6.3:"8.1","10.0":"10"})if(c.includes("windows nt "+s)){a=l[s];break}n="win",(c.includes("edge")?(c.includes("iemobile")&&(n="winMobile"),e="edge",r=/edge\/([\d]+)/.exec(c)[1]):c.includes("msie")||c.includes("trident")?(c.includes("iemobile")&&(n="winMobile"),e="ie",r=c.includes("msie 7")&&c.includes("trident")?-1:c.includes("msie")?parseFloat(/msie ([\d]+)/.exec(c)[1]):11):void 0)||whale()||opera()||chrome()||firefox()||safari()}else h.includes("mac")?(n="mac",s=/os x ([\d._]+)/.exec(c)[1].replace("_",".").split("."),a=parseFloat(s[0]+"."+s[1]),whale()||opera()||chrome()||firefox()||safari()):(n=p.includes("x11")?"unix":p.includes("linux")?"linux":0,whale()||chrome()||firefox());for(s in l={device:v,isMobile:S,browser:e,browserVer:r,os:n,osVer:a,down:S?"touchstart":"mousedown",move:S?"touchmove":"mousemove",up:S?"touchend":"mouseup",click:"click",over:"mouseover",out:"mouseout"})l.hasOwnProperty(s)&&(this[s]=l[s])}}),_classPrivateFieldGet(this,Ce).call(this),"ie"===this.browser&&(console.table=console.log)}}var Re=new WeakMap,Ce=new WeakMap;class ShareGLSL{}function createWorker(t){return new Worker(URL.createObjectURL(new Blob([`(${t})()`],{type:"application/javascript"})))}_defineProperty(ShareGLSL,"MESH_UNIFORM_POOL_NUM",100),_defineProperty(ShareGLSL,"GLSL_VERSION","#version 460"),_defineProperty(ShareGLSL,"MAX_DIRECTIONAL_LIGHT",8),_defineProperty(ShareGLSL,"MAX_POINT_LIGHT",100),_defineProperty(ShareGLSL,"MAX_SPOT_LIGHT",1),_defineProperty(ShareGLSL,"SET_INDEX_ComputeUniforms",0),_defineProperty(ShareGLSL,"SET_INDEX_SystemUniforms_vertex",0),_defineProperty(ShareGLSL,"SET_INDEX_SystemUniforms_fragment",1),_defineProperty(ShareGLSL,"SET_INDEX_MeshUniforms",2),_defineProperty(ShareGLSL,"SET_INDEX_VertexUniforms",3),_defineProperty(ShareGLSL,"SET_INDEX_FragmentUniforms",3),_defineProperty(ShareGLSL,"GLSL_SystemUniforms_vertex",{systemUniforms:`\n\t\tconst float TRUTHY = 1.0;\n\t\tlayout( set =  ${ShareGLSL.SET_INDEX_SystemUniforms_vertex}, binding = 0 ) uniform SystemUniforms {\n\t        mat4 perspectiveMTX;\n\t        mat4 cameraMTX;\n\t        vec2 resolution;\n\t        float time;\n\t    } systemUniforms;\n\t    `,meshUniforms:`\n\t\tlayout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n\t        mat4 modelMatrix[${ShareGLSL.MESH_UNIFORM_POOL_NUM}];\n\t        mat4 normalMatrix[${ShareGLSL.MESH_UNIFORM_POOL_NUM}];\n\t    } meshMatrixUniforms;\n\t    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 1 ) uniform MeshUniformIndex {\n\t        float index;\n\t        float mouseColorID;\n\t        float sumOpacity;\n\t    } meshUniforms;\n\t\t`,calcDisplacement:"\n\t\t vec3 calcDisplacement(vec3 vNormal, float displacementFlowSpeedX, float displacementFlowSpeedY, float displacementPower, vec2 targetUV, texture2D targetDisplacementTexture, sampler targetSampler){\n\t\t    return normalize(vNormal) * texture(sampler2D(targetDisplacementTexture, targetSampler), targetUV + vec2(\n\t\t              displacementFlowSpeedX * (systemUniforms.time/1000.0),\n\t\t               displacementFlowSpeedY * (systemUniforms.time/1000.0)\n\t\t          )).x * displacementPower ;\n\t\t }\n\t\t",getSprite3DMatrix:"\n\t\tmat4 getSprite3DMatrix(mat4 cameraMTX, mat4 mvMatrix){\n\t\t\tmat4 tMTX = cameraMTX * mvMatrix;\n\t\t\ttMTX[0][0] = mvMatrix[0][0], tMTX[0][1] = 0.0, tMTX[0][2] = 0.0;\n\t\t\ttMTX[1][0] = 0.0, tMTX[1][1] = mvMatrix[1][1], tMTX[1][2] = 0.0;\n\t\t\ttMTX[2][0] = 0.0, tMTX[2][1] = 0.0, tMTX[2][2] = mvMatrix[2][2];\n\t\t\treturn tMTX;\n\t\t}\n\t\t"}),_defineProperty(ShareGLSL,"GLSL_SystemUniforms_fragment",{systemUniforms:`\n\t\tconst float TRUTHY = 1.0;\n\t\tconst int MAX_DIRECTIONAL_LIGHT = ${ShareGLSL.MAX_DIRECTIONAL_LIGHT};\n\t\tconst int MAX_POINT_LIGHT =  ${ShareGLSL.MAX_POINT_LIGHT};\n\t\tconst int MAX_SPOT_LIGHT =  ${ShareGLSL.MAX_SPOT_LIGHT};\n\t\tstruct DirectionalLight {\n\t        vec4 color;\n\t        vec3 position;\n\t        float intensity;\n\t\t};\n\t\tstruct PointLight {\n\t        vec4 color;\n\t        vec3 position;\n\t        float intensity;\n\t        float radius;\n\t\t};\n\t\tstruct AmbientLight {\n\t        vec4 color;\n\t        float intensity;\n\t\t};\n\t\tstruct SpotLight {\n\t        vec4 color;\n\t        vec3 position;\n\t        float intensity;\n\t        float cutoff;\n\t        float exponent;\n\t\t};\n\t\tlayout( set =  ${ShareGLSL.SET_INDEX_SystemUniforms_fragment}, binding = 0 ) uniform SystemUniforms {\n\t        float directionalLightCount;\n\t        float pointLightCount;\n\t        float spotLightCount;\n\t        DirectionalLight directionalLightList[MAX_DIRECTIONAL_LIGHT];\n\t        PointLight pointLightList[MAX_POINT_LIGHT];\n\t        AmbientLight ambientLight;\t        \n\t        SpotLight spotLightList[MAX_SPOT_LIGHT];\n\t        vec3 cameraPosition;\n\t        vec2 resolution;\n        } systemUniforms;\n        /////////////////////////////////////////////////////////////////////////////\n        vec4 la = systemUniforms.ambientLight.color * systemUniforms.ambientLight.intensity;\n        vec4 calcDirectionalLight(\n            vec4 diffuseColor,\n            vec3 N,\t\t\n\t\t\tfloat loopNum,\n\t\t\tDirectionalLight[MAX_DIRECTIONAL_LIGHT] lightList,\n\t\t\tfloat shininess,\n\t\t\tfloat specularPower,\n\t\t\tvec4 specularColor,\n\t\t\tfloat specularTextureValue\n\t\t){\n\t\t    vec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    \n\t\t    vec3 L;\t\n\t\t    vec4 lightColor;\n\t\t    \n\t\t    float lambertTerm;\n\t\t    float intensity;\n\t\t    float specular;\n\t\t    \t\t    \n\t\t    DirectionalLight lightInfo;\n\t\t    for(int i = 0; i< loopNum; i++){\n\t\t        lightInfo = lightList[i];\n\t\t\t    L = normalize(-lightInfo.position);\t\n\t\t\t    lightColor = lightInfo.color;\n\t\t\t    lambertTerm = dot(N,-L);\n\t\t\t    intensity = lightInfo.intensity;\n\t\t\t    if(lambertTerm > 0.0){\n\t\t\t\t\tld += lightColor * diffuseColor * lambertTerm * intensity;\n\t\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), shininess) * specularPower * specularTextureValue;\n\t\t\t\t\tls +=  specularColor * specular * intensity ;\n\t\t\t    }\n\t\t    }\n\t\t    return ld + ls;\n\t\t}\n\t\t/////////////////////////////////////////////////////////////////////////////\n\t\tvec4 calcPointLight(\n            vec4 diffuseColor,\n            vec3 N,\t\t\n\t\t\tfloat loopNum,\n\t\t\tPointLight[MAX_POINT_LIGHT] lightList,\n\t\t\tfloat shininess,\n\t\t\tfloat specularPower,\n\t\t\tvec4 specularColor,\n\t\t\tfloat specularTextureValue,\n\t\t\tvec3 vVertexPosition\n\t\t){\n\t\t\tvec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    \n\t\t    vec3 L;\t\n\t\t    vec4 lightColor;\n\t\t    \n\t\t    float lambertTerm;\n\t\t    float intensity;\n\t\t    float specular;\n\t\t  \n\t\t    PointLight lightInfo;\n\t\t    float distanceLength ;\n\t\t    float attenuation;\n\t\t    for(int i = 0; i< loopNum; i++){\n\t\t        lightInfo = lightList[i];\n\t\t        L = -lightInfo.position + vVertexPosition;\n\t\t\t    distanceLength = abs(length(L));\n\t\t\t    if(lightInfo.radius> distanceLength){\n\t\t\t        L = normalize(L);\t\n\t\t\t\t    lightColor = lightInfo.color;\n\t\t\t\t    lambertTerm = dot(N,-L);\n\t\t\t\t    intensity = lightInfo.intensity;\n\t\t\t\t    if(lambertTerm > 0.0){\n\t\t\t\t        attenuation = clamp(1.0 - distanceLength*distanceLength/(lightInfo.radius*lightInfo.radius), 0.0, 1.0); \n\t\t\t            attenuation *= attenuation;\n\t\t\t\t\t\tld += lightColor * diffuseColor * lambertTerm * intensity * attenuation;\n\t\t\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), shininess) * specularPower * specularTextureValue;\n\t\t\t\t\t\tls +=  specularColor * specular * intensity * attenuation ;\n\t\t\t\t    }\n\t\t\t    }\n\t\t    }\n\t\t    return ld + ls;\n\t\t}\n\t\tvec4 calcSpotLight(\n            vec4 diffuseColor,\n            vec3 N,\t\t\n\t\t\tfloat loopNum,\n\t\t\tSpotLight[MAX_SPOT_LIGHT] lightList,\n\t\t\tfloat shininess,\n\t\t\tfloat specularPower,\n\t\t\tvec4 specularColor,\n\t\t\tfloat specularTextureValue,\n\t\t\tvec3 vVertexPosition\n\t\t){\n\t\t\tvec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    \n\t\t    vec3 L;\t\n\t\t    vec4 lightColor;\n\t\t    \n\t\t    float lambertTerm;\n\t\t    float intensity;\n\t\t    float specular;\n\t\t  \n\t\t    SpotLight lightInfo;\n\t        float distanceLength ;\n\t\t    float attenuation;\n\t\t    for(int i = 0; i< loopNum; i++){\n\t\t        lightInfo = lightList[i];\n\t\t        L = -lightInfo.position + vVertexPosition;\n\t\t\t    distanceLength = abs(length(L));\n\t\t\t    vec3 spotDirection = vec3(0.1,-1,0);\n\t\t\t    L = normalize(L);\t\n\t\t\t    lambertTerm = dot(N,-L);\n\t\t\t\tfloat spotEffect = dot(normalize(spotDirection),L);\n                lightColor = lightInfo.color;\n\t\t        float limit = 10;\n\t\t        float inLight = step(cos(limit * 3.141592653589793/180), spotEffect);\n                float light = inLight * spotEffect;\n\t\t\t    if(lambertTerm > 0 && spotEffect > lightInfo.cutoff ){\t\t\t     \n\t\t\t        if(spotEffect > cos(limit * 3.141592653589793/180) ){\n\t\t\t\t        spotEffect = pow(spotEffect, lightInfo.exponent);\n\t\t                attenuation = spotEffect * light ;\n\t\t\t\t\t    intensity = lightInfo.intensity;\t\t\t\t\t \n\t\t\t\t     \n\t\t\t\t\t\tld += lightColor * diffuseColor * intensity * attenuation;\n\t\t\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), shininess) * specularPower * specularTextureValue;\n\t\t\t\t\t\tls +=  specularColor * specular * intensity * attenuation ;\n\t\t\t\t\t}\n\t\t\t    }\n\t\t    }\n\t\t    return ld + ls;\n\t\t}\n\t\t/////////////////////////////////////////////////////////////////////////////\n\t\tvec3 getFlatNormal(vec3 vertexPosition){\n\t\t\tvec3 dx = dFdx(vertexPosition.xyz);\n\t\t\tvec3 dy = dFdy(vertexPosition.xyz);\n\t\t\treturn normalize(cross(normalize(dy), normalize(dx)));\n\t\t}\n\t\t`,perturb_normal:"\n\t\tvec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord, vec3 normalColor , float normalPower)\n\t\t{\t   \n\t\t\tvec3 map = normalColor;\n\t\t\tmap =  map * 255./127. - 128./127.;\n\t\t\tmap.xy *= -normalPower;\n\t\t\tmat3 TBN = cotangent_frame(N, V, texcoord);\n\t\t\treturn normalize(TBN * map);\n\t\t}\n\t\t",cotangent_frame:"\n\t\tmat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)\n\t\t{\n\t\t\tvec3 dp1 = dFdx( p );\n\t\t\tvec3 dp2 = dFdy( p );\n\t\t\tvec2 duv1 = dFdx( uv );\n\t\t\tvec2 duv2 = dFdy( uv );\n\t\t\t\n\t\t\tvec3 dp2perp = cross( dp2, N );\n\t\t\tvec3 dp1perp = cross( N, dp1 );\n\t\t\tvec3 T = dp2perp * duv1.x + dp1perp * duv2.x;\n\t\t\tvec3 B = dp2perp * duv1.y + dp1perp * duv2.y;\n\t\t\t\n\t\t\tfloat invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );\n\t\t\treturn mat3( T * invmax, B * invmax, N );\n\t\t}\n\t\t"});const Ie=createWorker(async()=>{let t=(t=>{let e=function(){let t;return function(e){for(--e,t=1;t<32;t<<=1)e|=e>>t;return e+1}}();return t=>{const r=t.src;let n;fetch(r,{mode:"cors"}).then(t=>{if(n={url:t.url,ok:t.ok,status:t.status,statusText:t.statusText,type:t.type},!t.ok)throw Error("error");t.blob().then(t=>self.createImageBitmap(t)).then(t=>{let n=e(t.width),a=e(t.height);n>1920&&(n=1920),a>1920&&(a=1920);let s=[],l=0,u=Math.round(Math.log2(Math.max(n,a))),getMipmapDatas=t=>{const e=new OffscreenCanvas(n,a),c=e.getContext("2d");c.fillStyle="rgba(0,0,0,0)",c.fillRect(0,0,n,a),c.drawImage(t,0,0,n,a);let h,p=c.getImageData(0,0,n,a).data;const v=256*Math.ceil(4*n/256);if(v==4*n)h=p;else{h=new Uint8ClampedArray(v*a);let t=0;for(let e=0;e<a;++e)for(let r=0;r<n;++r){let n=4*r+e*v;h[n]=p[t],h[n+1]=p[t+1],h[n+2]=p[t+2],h[n+3]=p[t+3],t+=4}}s.push({data:h.buffer,width:n,height:a,rowPitch:v}),n=Math.max(Math.floor(n/2),1),a=Math.max(Math.floor(a/2),1),l++,l==u+1?self.postMessage({src:r,imageDatas:s,ok:!0}):getMipmapDatas(e)};getMipmapDatas(t)})}).catch(t=>{self.postMessage({error:n,src:r})})}})();self.addEventListener("message",e=>{t(e.data)})}),Ne=createWorker(async()=>{let t=await import("https://unpkg.com/@webgpu/glslang@0.0.12/dist/web-devel/glslang.js"),e=await t.default(),r=(t=>{let k_combinations=(t,e)=>{let r,n,a,s,l;if(e>t.length||e<=0)return[];if(e===t.length)return[t];if(1===e){for(a=[],r=0;r<t.length;r++)a.push([t[r]]);return a}for(a=[],r=0;r<t.length-e+1;r++)for(s=t.slice(r,r+1),l=k_combinations(t.slice(r+1),e-1),n=0;n<l.length;n++)a.push(s.concat(l[n]));return a};return t=>{let e,r,n,a;for(n=[],e=1;e<=t.length;e++)for(a=k_combinations(t,e),r=0;r<a.length;r++)n.push(a[r]);return n}})(),getCompileGLSL=async t=>{const n=t.src,a=n.shaderType,s=n.shaderName;let l=n.originSource,u={},c=0;const h=r(n.optionList.sort());let parse=t=>{let r=s+"_"+t.join("_");if(!u[r]){u[r]=1;let n=function(t,e){t=JSON.parse(JSON.stringify(t));let r=e.length;for(;r--;){let n=new RegExp(`//#RedGPU#${e[r]}#`,"gi");t=t.replace(n,"")}return t}(l,t),h=e.compileGLSL(n,a);c++,self.postMessage({endCompile:!0,shaderName:s,searchKey:r,compileGLSL:h,shaderType:a})}};h.forEach(t=>{parse(t)}),self.postMessage({end:!0,shaderName:s,shaderType:a,totalNum:c})};self.addEventListener("message",t=>{getCompileGLSL(t.data)})}),RedGPUWorker_loadImageWithWorker=t=>new Promise((e,r)=>{Ie.addEventListener("message",(function handler(n){n.data.src===t&&(Ie.removeEventListener("message",handler),n.data.error&&r(n.data.error),e(n.data))})),Ie.postMessage({src:t,workerType:"image"})}),RedGPUWorker_glslParserWorker=(t,e,r,n,a,s)=>new Promise((l,u)=>{Ne.addEventListener("message",(function handler(n){if(n.data.shaderName===r&&n.data.shaderType===a){if(n.data.endCompile){let r=n.data.searchKey;if(!e.sourceMap.has(r)){e.sourceMap.set(r,n.data.compileGLSL);let a={key:r,code:n.data.compileGLSL};e.shaderModuleMap[r]=t.device.createShaderModule(a)}n.data.error&&u(n.data.error)}n.data.end&&(Ne.removeEventListener("message",handler),l(n))}})),Ne.postMessage({src:{originSource:n,shaderName:r,shaderType:a,optionList:s},workerType:"compileGLSL"})}),Ae={vertex:{},fragment:{}},Oe={vertex:{},fragment:{}};class ShaderModule_GLSL{constructor(t,e,r,n){Ve.set(this,{writable:!0,value:void 0}),_defineProperty(this,"type",void 0),_defineProperty(this,"originSource",void 0),_defineProperty(this,"shaderModuleMap",void 0),_defineProperty(this,"sourceMap",void 0),_defineProperty(this,"GPUShaderModule",void 0),_defineProperty(this,"currentKey",void 0);let a=r.name,s=Ae[e][a];if(s||(Ae[e][a]=new Map,Oe[e][a]={}),_classPrivateFieldSet(this,Ve,t),this.type=e,this.originSource=n,this.sourceMap=Ae[e][a],this.shaderModuleMap=Oe[e][a],!s){let t=r.PROGRAM_OPTION_LIST[e];t.length&&RedGPUWorker_glslParserWorker(_classPrivateFieldGet(this,Ve),this,a,this.originSource,this.type,t).then(t=>{})}this.searchShaderModule([a])}searchShaderModule(t){t.sort();let e=t.join("_");if(this.currentKey!=e){if(this.currentKey=e,this.shaderModuleMap[e])return this.GPUShaderModule=this.shaderModuleMap[e];{let r;r=this.sourceMap.get(e),r instanceof Uint32Array||r||this.sourceMap.set(e,r=_classPrivateFieldGet(this,Ve).glslang.compileGLSL(function(t,e){t=JSON.parse(JSON.stringify(t));let r=e.length;for(;r--;)t=t.replace(new RegExp(`//#RedGPU#${e[r]}#`,"gi"),"");return t}(this.originSource,t),this.type)),this.shaderModuleDescriptor={key:e,code:r},this.GPUShaderModule=_classPrivateFieldGet(this,Ve).device.createShaderModule(this.shaderModuleDescriptor),this.shaderModuleMap[e]=this.GPUShaderModule}}}}var Ve=new WeakMap;class BindGroup{constructor(t){Ye.set(this,{writable:!0,value:void 0}),_defineProperty(this,"GPUBindGroup",null),_classPrivateFieldSet(this,Ye,t)}setGPUBindGroup(t){this.GPUBindGroup=_classPrivateFieldGet(this,Ye).device.createBindGroup(t)}}var Ye=new WeakMap;const Xe=new Map;class BaseMaterial extends UUID{get redGPUContext(){return _classPrivateFieldGet(this,$e)}set redGPUContext(t){_classPrivateFieldSet(this,$e,t)}constructor(t){let e,r;super(),_defineProperty(this,"uniformBufferDescriptor_vertex",void 0),_defineProperty(this,"uniformBufferDescriptor_fragment",void 0),_defineProperty(this,"GPUBindGroupLayout",void 0),ze.set(this,{writable:!0,value:!1}),_defineProperty(this,"vShaderModule",void 0),_defineProperty(this,"fShaderModule",void 0),_defineProperty(this,"vertexStage",void 0),_defineProperty(this,"fragmentStage",void 0),_defineProperty(this,"bindings",void 0),$e.set(this,{writable:!0,value:void 0}),_defineProperty(this,"uniformBuffer_vertex",void 0),_defineProperty(this,"uniformBuffer_fragment",void 0),_defineProperty(this,"uniformBindGroup_material",void 0),_defineProperty(this,"needResetBindingInfo",!0);let n=this.constructor,a=n.vertexShaderGLSL,s=n.fragmentShaderGLSL;n.PROGRAM_OPTION_LIST;if(r=new ShaderModule_GLSL(t,"fragment",n,s),e=new ShaderModule_GLSL(t,"vertex",n,a),!n.uniformBufferDescriptor_vertex)throw new Error(`${n.name} : must define a static uniformBufferDescriptor_vertex.`);if(!n.uniformBufferDescriptor_fragment)throw new Error(`${n.name} : must define a static uniformBufferDescriptor_fragment.`);if(!n.uniformsBindGroupLayoutDescriptor_material)throw new Error(`${n.name} : must define a static uniformsBindGroupLayoutDescriptor_material.`);this.uniformBufferDescriptor_vertex=new UniformBufferDescriptor(n.uniformBufferDescriptor_vertex),this.uniformBufferDescriptor_fragment=new UniformBufferDescriptor(n.uniformBufferDescriptor_fragment),this.GPUBindGroupLayout=function(t,e){let r;return(r=Xe.get(e))||(r=t.device.createBindGroupLayout(e),Xe.set(e,r)),r}(t,n.uniformsBindGroupLayoutDescriptor_material),this.vShaderModule=e,this.fShaderModule=r,this.uniformBuffer_vertex=new UniformBuffer(t),this.uniformBuffer_vertex.setBuffer(this.uniformBufferDescriptor_vertex),this.uniformBuffer_fragment=new UniformBuffer(t),this.uniformBuffer_fragment.setBuffer(this.uniformBufferDescriptor_fragment),this.uniformBindGroup_material=new BindGroup(t),_classPrivateFieldSet(this,$e,t)}updateUniformBuffer(){let t,e,r,n,a,s=new Float32Array(1);for(e=this.uniformBufferDescriptor_vertex.redStruct,r=this.uniformBufferDescriptor_fragment.redStruct,t=e.length>r.length?e.length:r.length;t--;)n=e[t],n&&(a=this[n.valueName],null!=a&&null!=a||Fe.throwFunc(`uniformBufferDescriptor_vertex에 올바르지않은 ${n.valueName}가 존재함`),"number"==typeof a?(s[0]=a,a=s):"boolean"==typeof a&&(s[0]=a?1:0,a=s),this.uniformBuffer_vertex.float32Array.set(a,n.offset/Float32Array.BYTES_PER_ELEMENT)),n=r[t],n&&(a=this[n.valueName],null!=a&&null!=a||Fe.throwFunc(`uniformBufferDescriptor_fragment에 올바르지않은 ${n.valueName}가 존재함`),"number"==typeof a?(s[0]=a,a=s):"boolean"==typeof a&&(s[0]=a?1:0,a=s),this.uniformBuffer_fragment.float32Array.set(a,n.offset/Float32Array.BYTES_PER_ELEMENT));this.uniformBuffer_vertex.GPUBuffer.setSubData(0,this.uniformBuffer_vertex.float32Array),this.uniformBuffer_fragment.GPUBuffer.setSubData(0,this.uniformBuffer_fragment.float32Array)}checkTexture(t,e){throw new Error(`${this.constructor.name} : checkTexture must override!!!`)}resetBindingInfo(){throw new Error(`${this.constructor.name} : resetBindingInfo must override!!!`)}_afterResetBindingInfo(){this.searchModules(),this.setUniformBindGroupDescriptor(),this.uniformBindGroup_material.setGPUBindGroup(this.uniformBindGroupDescriptor),_classPrivateFieldGet(this,ze)||(this.updateUniformBuffer(),_classPrivateFieldSet(this,ze,!0)),this.updateUUID()}searchModules(){let t=[this.constructor.name],e=[this.constructor.name],r=0,n=Math.max(this.constructor.PROGRAM_OPTION_LIST.vertex.length,this.constructor.PROGRAM_OPTION_LIST.fragment.length);for(;r<n;r++){let n;n=this.constructor.PROGRAM_OPTION_LIST.vertex[r],n&&this[n]&&t.push(n),n=this.constructor.PROGRAM_OPTION_LIST.fragment[r],n&&this[n]&&e.push(n)}this.vShaderModule.searchShaderModule(t),this.fShaderModule.searchShaderModule(e)}setUniformBindGroupDescriptor(){this.uniformBindGroupDescriptor={layout:this.GPUBindGroupLayout,bindings:this.bindings}}}var ze=new WeakMap,$e=new WeakMap;_defineProperty(BaseMaterial,"uniformBufferDescriptor_empty",[]);let ke=new Float32Array(1);const mix=(t,...e)=>[t,...e].reduce((t,e)=>e(t)),defineTextureClass=function(t){return e=>class extends e{constructor(...e){super(...e),_defineProperty(this,`_${t}`,null),_defineProperty(this,`__${t}RenderYn`,0)}set[t](e){this.checkTexture(e,t)}get[t](){return this[`_${t}`]}}},We=defineTextureClass("diffuseTexture"),Ze=defineTextureClass("normalTexture"),He=defineTextureClass("specularTexture"),je=defineTextureClass("emissiveTexture"),qe=defineTextureClass("environmentTexture"),Qe=defineTextureClass("refractionTexture"),Je=defineTextureClass("displacementTexture"),Ke=defineTextureClass("roughnessTexture"),tr=defineTextureClass("occlusionTexture");var er={mix:mix,EmptyClass:class EmptyClass{},color:t=>{var e,r,n;return e=class extends t{constructor(...t){super(...t),r.set(this,{writable:!0,value:"#ff0000"}),n.set(this,{writable:!0,value:1}),_defineProperty(this,"_colorRGBA",new Float32Array([1,0,0,_classPrivateFieldGet(this,n)]))}get color(){return _classPrivateFieldGet(this,r)}set color(t){_classPrivateFieldSet(this,r,t);let e=Fe.hexToRGB_ZeroToOne(t);this._colorRGBA[0]=e[0]*_classPrivateFieldGet(this,n),this._colorRGBA[1]=e[1]*_classPrivateFieldGet(this,n),this._colorRGBA[2]=e[2]*_classPrivateFieldGet(this,n),this._colorRGBA[3]=_classPrivateFieldGet(this,n),this.uniformBuffer_fragment&&this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.colorRGBA,this._colorRGBA)}get colorAlpha(){return _classPrivateFieldGet(this,n)}set colorAlpha(t){let e=Fe.hexToRGB_ZeroToOne(_classPrivateFieldGet(this,r));this._colorRGBA[0]=e[0]*t,this._colorRGBA[1]=e[1]*t,this._colorRGBA[2]=e[2]*t,this._colorRGBA[3]=t,_classPrivateFieldSet(this,n,t),this.uniformBuffer_fragment&&this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.colorRGBA,this._colorRGBA)}get colorRGBA(){return this._colorRGBA}},r=new WeakMap,n=new WeakMap,e},alpha:t=>{var e,r;return e=class extends t{constructor(...t){super(...t),r.set(this,{writable:!0,value:1})}get alpha(){return _classPrivateFieldGet(this,r)}set alpha(t){_classPrivateFieldSet(this,r,t),ke[0]=_classPrivateFieldGet(this,r),this.uniformBuffer_fragment&&this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.alpha,ke)}},r=new WeakMap,e},defineNumber:function(t,e={}){let r,n=e.hasOwnProperty("min"),a=e.hasOwnProperty("max"),s=e.min,l=e.max;return r=r=>{var u,c;return u=class extends r{constructor(...r){super(...r),c.set(this,{writable:!0,value:{min:s,max:l}}),_defineProperty(this,`#${t}`,e.value)}set[t](r){this[`#${t}`]=null,"number"!=typeof r&&Fe.throwFunc(`${t} : only allow Number. - inputValue : ${r} { type : ${typeof r} }`),n&&r<s&&(r=s),a&&r>l&&(r=l),this[`#${t}`]=r,e.callback&&e.callback.call(this,r)}get[t](){return this[`#${t}`]}},c=new WeakMap,u},r},diffuseTexture:We,normalTexture:Ze,specularTexture:He,emissiveTexture:t=>{let e=class t0 extends t{constructor(...t){super(...t),_defineProperty(this,"_emissivePower",1)}get emissivePower(){return this._emissivePower}set emissivePower(t){this._emissivePower=t,ke[0]=this._emissivePower,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.emissivePower,ke)}};return mix(e,je)},environmentTexture:t=>{let e=class t0 extends t{constructor(...t){super(...t),_defineProperty(this,"_environmentPower",1)}get environmentPower(){return this._environmentPower}set environmentPower(t){this._environmentPower=t,ke[0]=this._environmentPower,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.environmentPower,ke)}};return mix(e,qe)},refractionTexture:t=>{let e=class t0 extends t{constructor(...t){super(...t),_defineProperty(this,"_refractionPower",1),_defineProperty(this,"_refractionRatio",.95)}get refractionPower(){return this._refractionPower}set refractionPower(t){this._refractionPower=t,ke[0]=this._refractionPower,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.refractionPower,ke)}get refractionRatio(){return this._refractionRatio}set refractionRatio(t){this._refractionRatio=t,ke[0]=this._refractionRatio,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.refractionRatio,ke)}};return mix(e,Qe)},displacementTexture:t=>{let e=class t0 extends t{constructor(...t){super(...t),_defineProperty(this,"_displacementFlowSpeedX",0),_defineProperty(this,"_displacementFlowSpeedY",0),_defineProperty(this,"_displacementPower",.1)}get displacementFlowSpeedY(){return this._displacementFlowSpeedY}set displacementFlowSpeedY(t){this._displacementFlowSpeedY=t,ke[0]=this._displacementFlowSpeedY,this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap.displacementFlowSpeedY,ke)}get displacementFlowSpeedX(){return this._displacementFlowSpeedX}set displacementFlowSpeedX(t){this._displacementFlowSpeedX=t,ke[0]=this._displacementFlowSpeedX,this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap.displacementFlowSpeedX,ke)}get displacementPower(){return this._displacementPower}set displacementPower(t){this._displacementPower=t,ke[0]=this._displacementPower,this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap.displacementPower,ke)}};return mix(e,Je)},roughnessTextureGLTF:t=>{let e=class t0 extends t{constructor(...t){super(...t),_defineProperty(this,"_roughnessTexCoordIndex",0),_defineProperty(this,"_roughnessFactor",1)}set roughnessTexture(t){this.checkTexture(t,"roughnessTexture")}get roughnessTexture(){return this._roughnessTexture}get roughnessTexCoordIndex(){return this._roughnessTexCoordIndex}set roughnessTexCoordIndex(t){this._roughnessTexCoordIndex=t,ke[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.roughnessTexCoordIndex,ke)}get roughnessFactor(){return this._roughnessFactor}set roughnessFactor(t){this._roughnessFactor=t,ke[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.roughnessFactor,ke)}};return mix(e,Ke)},occlusionTextureGLTF:t=>{let e=class t0 extends t{constructor(...t){super(...t),_defineProperty(this,"_occlusionTexCoordIndex",0),_defineProperty(this,"_occlusionPower",1)}set occlusionTexture(t){this.checkTexture(t,"occlusionTexture")}get occlusionTexture(){return this._occlusionTexture}get occlusionTexCoordIndex(){return this._occlusionTexCoordIndex}set occlusionTexCoordIndex(t){this._occlusionTexCoordIndex=t,ke[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.occlusionTexCoordIndex,ke)}get occlusionPower(){return this._occlusionPower}set occlusionPower(t){this._occlusionPower=t,ke[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.occlusionPower,ke)}};return mix(e,tr)},basicLightPropertys:t=>class extends t{constructor(...t){super(...t),_defineProperty(this,"_normalPower",1),_defineProperty(this,"_shininess",32),_defineProperty(this,"_specularPower",1),_defineProperty(this,"_specularColor","#ffffff"),_defineProperty(this,"_specularColorRGBA",new Float32Array([1,1,1,1])),_defineProperty(this,"_useFlatMode",!1)}get normalPower(){return this._normalPower}set normalPower(t){this._normalPower=t,ke[0]=this._normalPower,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.normalPower,ke)}get shininess(){return this._shininess}set shininess(t){this._shininess=t,ke[0]=this._shininess,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.shininess,ke)}get specularPower(){return this._specularPower}set specularPower(t){this._specularPower=t,ke[0]=this._specularPower,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.specularPower,ke)}get specularColor(){return this._specularColor}set specularColor(t){this._specularColor=t;let e=Fe.hexToRGB_ZeroToOne(t);this._specularColorRGBA[0]=e[0],this._specularColorRGBA[1]=e[1],this._specularColorRGBA[2]=e[2],this._specularColorRGBA[3]=1,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.specularColorRGBA,this._specularColorRGBA)}get specularColorRGBA(){return this._specularColorRGBA}get useFlatMode(){return this._useFlatMode}set useFlatMode(t){this._useFlatMode=t,ke[0]=t?1:0,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.useFlatMode,ke)}}};let rr=new Float32Array(1);class StandardMaterial extends(er.mix(BaseMaterial,er.diffuseTexture,er.normalTexture,er.specularTexture,er.emissiveTexture,er.displacementTexture,er.basicLightPropertys,er.alpha)){constructor(t,e,r,n,a,s){super(t),ir.set(this,{writable:!0,value:void 0}),this.diffuseTexture=e,this.normalTexture=r,this.emissiveTexture=a,this.specularTexture=n,this.displacementTexture=s,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(rr[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],rr):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],rr)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,rr[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],rr):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],rr),this.needResetBindingInfo=!0)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}var ir=new WeakMap;_defineProperty(StandardMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.calcDisplacement}    \n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\t\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n    } vertexUniforms;\n\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += calcDisplacement(vNormal, vertexUniforms.displacementFlowSpeedX, vertexUniforms.displacementFlowSpeedY, vertexUniforms.displacementPower, uv, uDisplacementTexture, uSampler);\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t\n\t\n\t}\n\t`),_defineProperty(StandardMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\t\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uSpecularSampler;\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\n\tvoid main() {\n\t\tfloat testAlpha = 0.0;\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uDiffuseSampler), vUV) ;\n\t\t\n\t\t\n\t    vec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\n\t\ttestAlpha = diffuseColor.a;\n\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t\tcalcPointLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(StandardMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(StandardMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"sampler"},{binding:2,visibility:GPUShaderStage.VERTEX,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:5,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:6,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:7,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:8,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:9,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:10,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:11,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(StandardMaterial,"uniformBufferDescriptor_vertex",[{size:Ee.float,valueName:"displacementFlowSpeedX"},{size:Ee.float,valueName:"displacementFlowSpeedY"},{size:Ee.float,valueName:"displacementPower"},{size:Ee.float,valueName:"__displacementTextureRenderYn"}]),_defineProperty(StandardMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"normalPower"},{size:Ee.float,valueName:"shininess"},{size:Ee.float,valueName:"specularPower"},{size:Ee.float4,valueName:"specularColorRGBA"},{size:Ee.float,valueName:"emissivePower"},{size:Ee.float,valueName:"alpha"},{size:Ee.float,valueName:"useFlatMode"},{size:Ee.float,valueName:"__diffuseTextureRenderYn"},{size:Ee.float,valueName:"__normalTextureRenderYn"},{size:Ee.float,valueName:"__specularTextureRenderYn"},{size:Ee.float,valueName:"__emissiveTextureRenderYn"}]);class ColorMaterial extends(er.mix(BaseMaterial,er.color,er.alpha)){constructor(t,e="#ff0000",r=1){super(t),this.color=e,this.colorAlpha=r,this.needResetBindingInfo=!0}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}}],this._afterResetBindingInfo()}}_defineProperty(ColorMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 0 ) out float vMouseColorID;\t\n\tlayout( location = 1 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\n\t}\n\t`),_defineProperty(ColorMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        vec4 color;\n        float alpha;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in float vMouseColorID;\n\tlayout( location = 1 ) in float vSumOpacity;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\n\tvoid main() {\n\t\toutColor = fragmentUniforms.color;\n\t\toutColor.a *= vSumOpacity;\n\t\toutColor.a *= fragmentUniforms.alpha;\t\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n\t`),_defineProperty(ColorMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(ColorMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"}]}),_defineProperty(ColorMaterial,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(ColorMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float4,valueName:"colorRGBA"},{size:Ee.float,valueName:"alpha"}]);class ColorPhongMaterial extends(er.mix(BaseMaterial,er.color,er.alpha,er.basicLightPropertys)){constructor(t,e="#ff0000",r=1){super(t),this.color=e,this.colorAlpha=r,this.needResetBindingInfo=!0}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}}],this._afterResetBindingInfo()}}_defineProperty(ColorPhongMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec4 vVertexPosition;\n\tlayout( location = 2 ) out float vMouseColorID;\n\tlayout( location = 3 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t}\n\t`),_defineProperty(ColorPhongMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        vec4 color;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n        float alpha;\n        float useFlatMode;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec4 vVertexPosition;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\n\tlayout( location = 0 ) out vec4 outColor;\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tfloat testAlpha = fragmentUniforms.color.a * vSumOpacity;\n\n\t\tvec3 N = normalize(vNormal);\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\n\t\tfloat specularTextureValue = 1.0;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t    calcPointLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(ColorPhongMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:["useFlatMode"]}),_defineProperty(ColorPhongMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"}]}),_defineProperty(ColorPhongMaterial,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(ColorPhongMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float4,valueName:"colorRGBA"},{size:Ee.float,valueName:"shininess"},{size:Ee.float,valueName:"specularPower"},{size:Ee.float4,valueName:"specularColorRGBA"},{size:Ee.float,valueName:"alpha"},{size:Ee.float,valueName:"useFlatMode"}]);let nr=new Float32Array(1);class ColorPhongTextureMaterial extends(er.mix(BaseMaterial,er.color,er.alpha,er.normalTexture,er.specularTexture,er.emissiveTexture,er.displacementTexture,er.basicLightPropertys)){constructor(t,e="#ff0000",r=1,n,a,s,l){super(t),ar.set(this,{writable:!0,value:void 0}),this.color=e,this.colorAlpha=r,this.normalTexture=n,this.specularTexture=a,this.emissiveTexture=s,this.displacementTexture=l,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(nr[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],nr):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],nr)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,nr[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],nr):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],nr),this.needResetBindingInfo=!0)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}var ar=new WeakMap;_defineProperty(ColorPhongTextureMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.calcDisplacement}    \n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n    } vertexUniforms;\n    \n    layout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 2) uniform texture2D uDisplacementTexture;\n\tvoid main() {\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY)  vVertexPosition.xyz += calcDisplacement(vNormal, vertexUniforms.displacementFlowSpeedX, vertexUniforms.displacementFlowSpeedY, vertexUniforms.displacementPower, uv, uDisplacementTexture, uSampler);\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t}\n\t`),_defineProperty(ColorPhongTextureMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        vec4 color;\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\t\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uNormalSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uSpecularSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uEmissiveTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\t\n\tvoid main() {\n\t\tfloat testAlpha = fragmentUniforms.color.a * vSumOpacity;\n\t\t\n\t\tvec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t    +\n\t    calcPointLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(ColorPhongTextureMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(ColorPhongTextureMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"sampler"},{binding:2,visibility:GPUShaderStage.VERTEX,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:5,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:6,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:7,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:8,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:9,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(ColorPhongTextureMaterial,"uniformBufferDescriptor_vertex",[{size:Ee.float,valueName:"displacementFlowSpeedX"},{size:Ee.float,valueName:"displacementFlowSpeedY"},{size:Ee.float,valueName:"displacementPower"},{size:Ee.float,valueName:"__displacementTextureRenderYn"}]),_defineProperty(ColorPhongTextureMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float4,valueName:"colorRGBA"},{size:Ee.float,valueName:"normalPower"},{size:Ee.float,valueName:"shininess"},{size:Ee.float,valueName:"specularPower"},{size:Ee.float4,valueName:"specularColorRGBA"},{size:Ee.float,valueName:"emissivePower"},{size:Ee.float,valueName:"alpha"},{size:Ee.float,valueName:"useFlatMode"},{size:Ee.float,valueName:"__normalTextureRenderYn"},{size:Ee.float,valueName:"__specularTextureRenderYn"},{size:Ee.float,valueName:"__emissiveTextureRenderYn"}]);let or=new Float32Array(1);class EnvironmentMaterial extends(er.mix(BaseMaterial,er.diffuseTexture,er.normalTexture,er.specularTexture,er.emissiveTexture,er.environmentTexture,er.displacementTexture,er.basicLightPropertys,er.alpha)){constructor(t,e,r,n,a,s,l){super(t),sr.set(this,{writable:!0,value:void 0}),this.diffuseTexture=e,this.environmentTexture=r,this.normalTexture=n,this.emissiveTexture=s,this.specularTexture=a,this.displacementTexture=l,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"environmentTexture":this._environmentTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(or[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],or):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],or)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,or[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],or):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],or),this.needResetBindingInfo=!0)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:12,resource:this._environmentTexture?this._environmentTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:13,resource:this._environmentTexture?this._environmentTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView}],this._afterResetBindingInfo()}}var sr=new WeakMap;_defineProperty(EnvironmentMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.calcDisplacement}    \n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\t\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;        \n\t\tfloat __displacementTextureRenderYn;\n    } vertexUniforms;\n\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uDisplacementSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += calcDisplacement(vNormal, vertexUniforms.displacementFlowSpeedX, vertexUniforms.displacementFlowSpeedY, vertexUniforms.displacementPower, uv, uDisplacementTexture, uDisplacementSampler);\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t\n\t\n\t}\n\t`),_defineProperty(EnvironmentMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float environmentPower;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __environmentTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uSpecularSampler;\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 12 ) uniform sampler uEnvironmentSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 13 ) uniform textureCube uEnvironmentTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tfloat testAlpha = 0.0;\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uDiffuseSampler), vUV) ;\n\t\t\n\t\t\n\t    vec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\n\t\tif(fragmentUniforms.__environmentTextureRenderYn == TRUTHY) {\n\t\t\tvec3 R = reflect( vVertexPosition.xyz - systemUniforms.cameraPosition, N);\n\t\t\tvec4 reflectionColor = texture(samplerCube(uEnvironmentTexture,uEnvironmentSampler), R);\n\t\t\tdiffuseColor = mix(diffuseColor, reflectionColor, fragmentUniforms.environmentPower);\n\t\t}\n\t\t\n\t\ttestAlpha = diffuseColor.a ;\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t\tcalcPointLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(EnvironmentMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(EnvironmentMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"sampler"},{binding:2,visibility:GPUShaderStage.VERTEX,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:5,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:6,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:7,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:8,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:9,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:10,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:11,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:12,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:13,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture",textureDimension:"cube"}]}),_defineProperty(EnvironmentMaterial,"uniformBufferDescriptor_vertex",[{size:Ee.float,valueName:"displacementFlowSpeedX"},{size:Ee.float,valueName:"displacementFlowSpeedY"},{size:Ee.float,valueName:"displacementPower"},{size:Ee.float,valueName:"__displacementTextureRenderYn"}]),_defineProperty(EnvironmentMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"normalPower"},{size:Ee.float,valueName:"shininess"},{size:Ee.float,valueName:"specularPower"},{size:Ee.float4,valueName:"specularColorRGBA"},{size:Ee.float,valueName:"emissivePower"},{size:Ee.float,valueName:"environmentPower"},{size:Ee.float,valueName:"alpha"},{size:Ee.float,valueName:"useFlatMode"},{size:Ee.float,valueName:"__diffuseTextureRenderYn"},{size:Ee.float,valueName:"__environmentTextureRenderYn"},{size:Ee.float,valueName:"__normalTextureRenderYn"},{size:Ee.float,valueName:"__specularTextureRenderYn"},{size:Ee.float,valueName:"__emissiveTextureRenderYn"}]);let lr=new Float32Array(1);class BitmapMaterial extends(er.mix(BaseMaterial,er.diffuseTexture,er.alpha)){constructor(t,e){super(t),this.diffuseTexture=e,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e}r&&(lr[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],lr):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],lr)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,lr[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],lr):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],lr),this.needResetBindingInfo=!0)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}_defineProperty(BitmapMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\t\n\tlayout( location = 3 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t}\n\t`),_defineProperty(BitmapMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(BitmapMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(BitmapMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(BitmapMaterial,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(BitmapMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"alpha"},{size:Ee.float,valueName:"__diffuseTextureRenderYn"}]);class GridMaterial extends BaseMaterial{constructor(t){super(t),this.needResetBindingInfo=!0}resetBindingInfo(){this.bindings=[],this._afterResetBindingInfo()}}_defineProperty(GridMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec4 color;\n\tlayout( location = 0 ) out vec4 vColor;\n\n\tvoid main() {\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvColor = color;\n\t}\n\t`),_defineProperty(GridMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tlayout( location = 0 ) in vec4 vColor;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tvoid main() {\n\t\toutColor = vColor;\n\t\t\n\t}\n\t`),_defineProperty(GridMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(GridMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[]}),_defineProperty(GridMaterial,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(GridMaterial,"uniformBufferDescriptor_fragment",BaseMaterial.uniformBufferDescriptor_empty);class SkyBoxMaterial extends(er.mix(BaseMaterial)){set skyBoxTexture(t){this.checkTexture(t,"skyBoxTexture")}get skyBoxTexture(){return this._skyBoxTexture}constructor(t,e){super(t),_defineProperty(this,"_skyBoxTexture",void 0),this.skyBoxTexture=e,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){switch(e){case"skyBoxTexture":this._skyBoxTexture=t}this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,this.needResetBindingInfo=!0)}resetBindingInfo(){this.bindings=[{binding:0,resource:this._skyBoxTexture?this._skyBoxTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:1,resource:this._skyBoxTexture?this._skyBoxTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView}],this._afterResetBindingInfo()}}_defineProperty(SkyBoxMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 0 ) out vec3 vReflectionCubeCoord;\n\tvoid main() {\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvReflectionCubeCoord = (meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] *vec4(position, 0.0)).xyz;\n\t}\n\t`),_defineProperty(SkyBoxMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vReflectionCubeCoord;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1) uniform textureCube uSkyBoxTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\t//#RedGPU#skyBoxTexture# diffuseColor = texture(samplerCube(uSkyBoxTexture,uSampler), vReflectionCubeCoord) ;\n\t\toutColor = diffuseColor;\n\t\t\n\t}\n`),_defineProperty(SkyBoxMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:["skyBoxTexture"]}),_defineProperty(SkyBoxMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture",textureDimension:"cube"}]}),_defineProperty(SkyBoxMaterial,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(SkyBoxMaterial,"uniformBufferDescriptor_fragment",BaseMaterial.uniformBufferDescriptor_empty);class LineMaterial extends(er.mix(BaseMaterial,er.alpha)){constructor(t){super(t),this.needResetBindingInfo=!0}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}}],this._afterResetBindingInfo()}}_defineProperty(LineMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec4 color;\n\tlayout( location = 0 ) out float vMouseColorID;\n\tlayout( location = 1 ) out vec4 vColor;\t\t\n\tlayout( location = 2 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvColor = color;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\n\t}\n\t`),_defineProperty(LineMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n         float alpha;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in float vMouseColorID;\n\tlayout( location = 1 ) in vec4 vColor;\t\t\t\n\tlayout( location = 2 ) in float vSumOpacity;\n\tlayout( location = 0 ) out vec4 outColor;\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\toutColor = vColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n\t`),_defineProperty(LineMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(LineMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"}]}),_defineProperty(LineMaterial,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(LineMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"alpha"}]);let ur=new Float32Array(1);class TextMaterial extends(er.mix(BaseMaterial,er.diffuseTexture,er.alpha)){get width(){return this._width}set width(t){this._width=t,ur[0]=this._width,this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap.width,ur)}get height(){return this._height}set height(t){this._height=t,ur[0]=this._height,this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap.height,ur)}constructor(t,e){super(t),fr.set(this,{writable:!0,value:!1}),mr.set(this,{writable:!0,value:!1}),_defineProperty(this,"_width",256),_defineProperty(this,"_height",256),this.diffuseTexture=e,this.needResetBindingInfo=!0}get useFixedScale(){return _classPrivateFieldGet(this,fr)}set useFixedScale(t){_classPrivateFieldSet(this,fr,t),this.needResetBindingInfo=!0}get useSprite3DMode(){return _classPrivateFieldGet(this,mr)}set useSprite3DMode(t){_classPrivateFieldSet(this,mr,t),this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){switch(e){case"diffuseTexture":this._diffuseTexture=t}this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,this.needResetBindingInfo=!0)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}var fr=new WeakMap,mr=new WeakMap;_defineProperty(TextMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float width;\n        float height;\n    } vertexUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\t\n\tlayout( location = 3 ) out float vSumOpacity;\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.getSprite3DMatrix}\t\n\tvoid main() {\n\t\tfloat w = vertexUniforms.width ;\n\t\tfloat h = vertexUniforms.height ;\n\t\tmat4 modelMatrix = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ];\n\t\tmat4 targetMatrix;\n\t\t\n\t\t// 기본\n\t\ttargetMatrix = modelMatrix * mat4( w / max( w, h ), 0.0, 0.0, 0.0,   0.0, h / max( w, h ), 0.0, 0.0,    0.0, 0.0, 1.0, 0.0,    0.0, 0.0, 0.0, 1.0 );\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * targetMatrix * vec4(position,1.0);\t\t\t\t\n\t\t\n\t\t// sprite3D\n\t\t//#RedGPU#useSprite3DMode#  targetMatrix = modelMatrix * mat4( w / systemUniforms.resolution.y, 0.0, 0.0, 0.0,    0.0, h / systemUniforms.resolution.y, 0.0, 0.0,    0.0, 0.0, 1.0, 0.0,    0.0, 0.0, 0.0, 1.0);\n\t\t//#RedGPU#useSprite3DMode#  gl_Position = systemUniforms.perspectiveMTX * getSprite3DMatrix( systemUniforms.cameraMTX, targetMatrix ) * vec4(position,1.0);\t\n\t\t\t\n\t\t\n\t\t//#RedGPU#useSprite3DMode#  //#RedGPU#useFixedScale#  gl_Position /= gl_Position.w;\n\t\t//#RedGPU#useSprite3DMode#  //#RedGPU#useFixedScale#  gl_Position.xy += position.xy * vec2((systemUniforms.perspectiveMTX * targetMatrix)[0][0],(systemUniforms.perspectiveMTX * targetMatrix)[1][1]);\n\t\n\t\t\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t}\n\t`),_defineProperty(TextMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n    } fragmentUniforms;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\t//#RedGPU#diffuseTexture# diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\t// if(diffuseColor.a < 0.05) discard;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(TextMaterial,"PROGRAM_OPTION_LIST",{vertex:["useFixedScale","useSprite3DMode"],fragment:["diffuseTexture"]}),_defineProperty(TextMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(TextMaterial,"uniformBufferDescriptor_vertex",[{size:Ee.float,valueName:"width"},{size:Ee.float,valueName:"height"}]),_defineProperty(TextMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"alpha"}]);let cr=new Float32Array(1);class SpriteSheetMaterial extends(er.mix(BaseMaterial,er.alpha,er.diffuseTexture)){get frameRate(){return _classPrivateFieldGet(this,hr)}set frameRate(t){t<1&&_classPrivateFieldSet(this,hr,1),_classPrivateFieldSet(this,hr,t),this._perFrameTime=1e3/_classPrivateFieldGet(this,hr)}constructor(t,e){super(t),hr.set(this,{writable:!0,value:void 0}),dr.set(this,{writable:!0,value:0}),pr.set(this,{writable:!0,value:{}}),e&&(this.addAction("default",e),this.setAction("default")),this.needResetBindingInfo=!0,this.sheetRect=new Float32Array(4),this.currentIndex=0,this.loop=!0,this._playYn=!0}update(t){if(_classPrivateFieldGet(this,dr)||_classPrivateFieldSet(this,dr,this._perFrameTime+t),this._playYn&&_classPrivateFieldGet(this,dr)<t){let e=parseInt((t-_classPrivateFieldGet(this,dr))/this._perFrameTime);e=e||1,_classPrivateFieldSet(this,dr,this._perFrameTime+t),this.currentIndex+=e,this.currentIndex>=this.totalFrame&&(this.loop?(this._playYn=!0,this.currentIndex=0):(this._playYn=!1,this.currentIndex=this.totalFrame-1))}this.sheetRect[0]=1/this.segmentW,this.sheetRect[1]=1/this.segmentH,this.sheetRect[2]=this.currentIndex%this.segmentW/this.segmentW,this.sheetRect[3]=Math.floor(this.currentIndex/this.segmentH)/this.segmentH,this.uniformBuffer_vertex&&this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap.sheetRect,this.sheetRect)}addAction(t,e){_classPrivateFieldGet(this,pr)[t]=e}removeAction(t,e){delete _classPrivateFieldGet(this,pr)[t]}setAction(t){this.diffuseTexture=_classPrivateFieldGet(this,pr)[t].texture,this.segmentW=_classPrivateFieldGet(this,pr)[t].segmentW,this.segmentH=_classPrivateFieldGet(this,pr)[t].segmentH,this.totalFrame=_classPrivateFieldGet(this,pr)[t].totalFrame,this.frameRate=_classPrivateFieldGet(this,pr)[t].frameRate,this.currentIndex=0,_classPrivateFieldSet(this,dr,0)}play(){this._playYn=!0,_classPrivateFieldSet(this,dr,0)}pause(){this._playYn=!1}stop(){this._playYn=!1,this.currentIndex=0}gotoAndStop(t){t>this.totalFrame-1&&(t=this.totalFrame-1),t<0&&(t=0),this._playYn=!1,this.currentIndex=t}gotoAndPlay(t){t>this.totalFrame-1&&(t=this.totalFrame-1),t<0&&(t=0),this._playYn=!0,this.currentIndex=t,_classPrivateFieldSet(this,dr,0)}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e}r&&(cr[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],cr):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],cr)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,cr[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],cr):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],cr),this.needResetBindingInfo=!0)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}var hr=new WeakMap,dr=new WeakMap,pr=new WeakMap;_defineProperty(SpriteSheetMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        vec4 sheetRect;\n    } vertexUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\n\tlayout( location = 3 ) out float vSumOpacity;\t\n\tvoid main() {\n\t\tvUV = uv;\n\t\tvUV = vec2(\n\t\t\tvUV.s * vertexUniforms.sheetRect.x + vertexUniforms.sheetRect.z,\n\t\t\tvUV.t * vertexUniforms.sheetRect.y -vertexUniforms.sheetRect.w\n\t\t);\t\n\t\tvSumOpacity = meshUniforms.sumOpacity;\t\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvNormal = normal;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\n\t}\n\t`),_defineProperty(SpriteSheetMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\t\n\t\tif(diffuseColor.a<0.05) discard;\n\t\t\t\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(SpriteSheetMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(SpriteSheetMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(SpriteSheetMaterial,"uniformBufferDescriptor_vertex",[{size:Ee.float4,valueName:"sheetRect"}]),_defineProperty(SpriteSheetMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"alpha"},{size:Ee.float,valueName:"__diffuseTextureRenderYn"}]);const _r={};class Sampler{constructor(t,e={}){if(e={magFilter:e.magFilter||"linear",minFilter:e.minFilter||"linear",mipmapFilter:e.mipmapFilter||"linear",addressModeU:e.addressModeU||"repeat",addressModeV:e.addressModeV||"repeat",addressModeW:e.addressModeW||"repeat"},this.string=JSON.stringify(e),_r[this.string])return _r[this.string];this.GPUSampler=t.device.createSampler(e),_r[this.string]=this}}let vr,gr,Sr=new Set;class RedGPUContext{get detector(){return _classPrivateFieldGet(this,Pr)}constructor(t,e){xr.set(this,{writable:!0,value:0}),yr.set(this,{writable:!0,value:0}),Pr.set(this,{writable:!0,value:void 0}),_defineProperty(this,"viewList",[]),new Promise(async t=>{gr?(gr.compileGLSL(` ${ShareGLSL.GLSL_VERSION}\nvoid main(){} `,"vertex"),gr.compileGLSL(` ${ShareGLSL.GLSL_VERSION}\nvoid main(){} `,"fragment"),t()):(vr=await import("https://unpkg.com/@webgpu/glslang@0.0.15/dist/web-devel/glslang.js"),gr=await vr.default(),gr.compileGLSL(` ${ShareGLSL.GLSL_VERSION}\nvoid main(){} `,"vertex"),gr.compileGLSL(` ${ShareGLSL.GLSL_VERSION}\nvoid main(){} `,"fragment"),t())}).then(r=>{_classPrivateFieldSet(this,Pr,new DetectorGPU(this));let n=!0;navigator.gpu?navigator.gpu.requestAdapter({powerPreference:"high-performance"}).then(r=>{r.requestDevice({}).then(r=>{this.glslang=gr,this.canvas=t,this.context=t.getContext("gpupresent"),this.device=r,this.swapChainFormat="rgba8unorm",this.swapChain=function(t,e,r){const n={device:t,format:e,usage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC};return r.configureSwapChain(n)}(this.device,this.swapChainFormat,this.context),this.state={Geometry:new Map,Buffer:{vertexBuffer:new Map,indexBuffer:new Map},emptySampler:new Sampler(this),emptyTextureView:r.createTexture({size:{width:1,height:1,depth:1},format:"r8unorm",usage:GPUTextureUsage.SAMPLED}).createView(),emptyCubeTextureView:r.createTexture({size:{width:1,height:1,depth:1},dimension:"2d",arrayLayerCount:6,mipLevelCount:1,sampleCount:1,format:"r8unorm",usage:GPUTextureUsage.SAMPLED}).createView({format:"r8unorm",dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:0,arrayLayerCount:6})},[_classPrivateFieldGet(this,Pr).click,_classPrivateFieldGet(this,Pr).move,_classPrivateFieldGet(this,Pr).down,_classPrivateFieldGet(this,Pr).up].forEach(t=>{let e,r,n,a;e="offsetX",r="offsetY",this.canvas.addEventListener(t,t=>{let e,r,s;for(t.preventDefault(),_classPrivateFieldGet(this,Pr).isMobile?t.changedTouches[0]&&(e={type:t.type,x:t.changedTouches[0].clientX,y:t.changedTouches[0].clientY,nativeEvent:t},n=t.changedTouches[0].clientX,a=t.changedTouches[0].clientY):(e={type:t.type,x:t.offsetX,y:t.offsetY,nativeEvent:t},n=t.offsetX,a=t.offsetY),r=this.viewList.length;r--;)s=this.viewList[r],s.mouseEventChecker.mouseEventInfo.push(e),s.mouseX=n-s.viewRect[0],s.mouseY=a-s.viewRect[1]},!1)}),_classPrivateFieldGet(this,Pr).detectGPU(),this.setSize("100%","100%"),Sr.size||window.addEventListener("resize",t=>{for(const t of Sr)t.setSize()}),Sr.add(this),e.call(this,!0),new ColorPhongMaterial(this),new ColorMaterial(this),new GridMaterial(this),new SkyBoxMaterial(this),new StandardMaterial(this),new BitmapMaterial(this),new EnvironmentMaterial(this),new ColorPhongTextureMaterial(this),new LineMaterial(this),new TextMaterial(this),new SpriteSheetMaterial(this)})}).catch(t=>{n=!1,e(!1,t)}):e(n=!1,"navigate.gpu is null")})}addView(t){this.viewList.push(t),t.resetTexture(this)}removeView(t){this.viewList.includes(t)&&this.viewList.splice(t,1)}setSize(t=_classPrivateFieldGet(this,xr),e=_classPrivateFieldGet(this,yr)){let r,n;_classPrivateFieldSet(this,xr,t),_classPrivateFieldSet(this,yr,e);let a=document.body.getBoundingClientRect();a.height=window.innerHeight,r="number"!=typeof t&&t.includes("%")?parseInt(+a.width*t.replace("%","")/100):t,n="number"!=typeof e&&e.includes("%")?parseInt(+a.height*e.replace("%","")/100):e,r<1&&(r=1),n<1&&(n=1),this.canvas.width=r,this.canvas.height=n,this.canvas.style.width=r+"px",this.canvas.style.height=n+"px",this.viewList.forEach(t=>{t.setSize(),t.setLocation()})}}var xr=new WeakMap,yr=new WeakMap,Pr=new WeakMap;_defineProperty(RedGPUContext,"useDebugConsole",!1);class UniformBuffer extends UUID{constructor(t){super(),Tr.set(this,{writable:!0,value:void 0}),_defineProperty(this,"GPUBuffer",void 0),_defineProperty(this,"uniformBufferDescriptor",void 0),t instanceof RedGPUContext||Fe.throwFunc(`${this.constructor.name} - only allow redGPUContext Instance.- inputValue : ${t} { type : ${typeof t} }`),_classPrivateFieldSet(this,Tr,t)}setBuffer(t){t instanceof UniformBufferDescriptor||Fe.throwFunc(`${this.constructor.name} - only allow UniformBufferDescriptor Instance.- inputValue : ${t} { type : ${typeof t} }`),this.GPUBuffer&&this.GPUBuffer.destroy(),this.GPUBuffer=_classPrivateFieldGet(this,Tr).device.createBuffer(t),this.float32Array=new Float32Array(t.size/Float32Array.BYTES_PER_ELEMENT),this.uniformBufferDescriptor=t}}var Tr=new WeakMap;class DisplayContainer extends UUID{get children(){return this._children}set children(t){this._children=t}constructor(){super(),_defineProperty(this,"_children",[]),_defineProperty(this,"_parent",void 0)}addChild(...t){t.forEach(t=>{t instanceof BaseObject3D||Fe.throwFunc(`addChild - only allow BaseObject3D Instance. - inputValue : ${t} { type : ${typeof t} }`),this._children.includes(t)?Fe.throwFunc(`${t} : Already registered object. - inputValue : ${t} { type : ${typeof t} }`):(t._parent=this.directionalLightList?null:this,this._children.push(t))}),DisplayContainer.needFlatListUpdate=!0}addChildAt(t,e){t instanceof BaseObject3D||Fe.throwFunc(`addChildAt - only allow BaseObject3D Instance. - inputValue : ${t}, ${e} { type : ${typeof t}, ${typeof e} }`),this._children.includes(t)&&this.removeChild(t),this._children.length<e&&(e=this._children.length),null!=e?this._children.splice(e,0,t):(t._parent=this.directionalLightList?null:this,this._children.push(t)),DisplayContainer.needFlatListUpdate=!0}removeChild(t){this._children.includes(t)?(t._parent=null,this._children.splice(this._children.indexOf(t),1)):Fe.throwFunc(`removeChild - Attempt to delete an object that does not exist. - inputValue : ${t} { type : ${typeof t} }`),DisplayContainer.needFlatListUpdate=!0}removeChildAt(t){this._children[t]?(this._children[t]._parent=null,this._children.splice(t,1)):Fe.throwFunc(`removeChildAt - No object at index. - inputValue : ${t} { type : ${typeof t} }`),DisplayContainer.needFlatListUpdate=!0}removeChildAll(){let t=this._children.length;for(;t--;)this._children[t]._parent=null;this._children.length=0,DisplayContainer.needFlatListUpdate=!0}getChildAt(t){return this._children[t]}getChildIndex(t){this._children.indexOf(t)}numChildren(){return this._children.length}}class PipelineBasic extends UUID{constructor(t,e){super(),Mr.set(this,{writable:!0,value:void 0}),Lr.set(this,{writable:!0,value:void 0}),_defineProperty(this,"GPURenderPipeline",void 0),_classPrivateFieldSet(this,Mr,t),_classPrivateFieldSet(this,Lr,e),this.GPURenderPipeline=null}update(t,e){let r=_classPrivateFieldGet(this,Lr);const n=t.device,a={layout:n.createPipelineLayout({bindGroupLayouts:[e.systemUniformInfo_vertex.GPUBindGroupLayout,e.systemUniformInfo_fragment.GPUBindGroupLayout,r.GPUBindGroupLayout,r._material.GPUBindGroupLayout]}),vertexStage:{module:r._material.vShaderModule.GPUShaderModule,entryPoint:"main"},fragmentStage:{module:r._material.fShaderModule.GPUShaderModule,entryPoint:"main"},vertexState:r._geometry.vertexState,colorStates:[{format:t.swapChainFormat,colorBlend:{srcFactor:r._blendColorSrc,dstFactor:r._blendColorDst,operation:"add"},alphaBlend:{srcFactor:r._blendAlphaSrc,dstFactor:r._blendAlphaDst,operation:"add"}},{format:"rgba32float"}],rasterizationState:{frontFace:"ccw",cullMode:r._cullMode},primitiveTopology:r._primitiveTopology,depthStencilState:{format:"depth24plus-stencil8",depthWriteEnabled:r._depthWriteEnabled,depthCompare:r._depthCompare},sampleCount:4};this.GPURenderPipeline=n.createRenderPipeline(a)}}var Mr=new WeakMap,Lr=new WeakMap;class PostEffect{constructor(t){Gr.set(this,{writable:!0,value:[]})}get effectList(){return _classPrivateFieldGet(this,Gr)}addEffect(t){_classPrivateFieldGet(this,Gr).push(t)}removeEffect(t){_classPrivateFieldGet(this,Gr).includes(t)?_classPrivateFieldGet(this,Gr).splice(_classPrivateFieldGet(this,Gr).indexOf(t),1):Fe.throwFunc(`removeEffect - Attempt to delete an object that does not exist. - inputValue : ${t} { type : ${typeof t} }`)}}var Gr=new WeakMap;let fireEvent=function(t){if(t.length){let e=t.shift();e.info[e.type].call(e.info.target,{target:e.info.target,type:"out"})}};class MouseEventChecker extends UUID{get mouseEventInfo(){return _classPrivateFieldGet(this,wr)}constructor(t){super(),Ur.set(this,{writable:!0,value:void 0}),br.set(this,{writable:!0,value:void 0}),Er.set(this,{writable:!0,value:[]}),Br.set(this,{writable:!0,value:void 0}),Dr.set(this,{writable:!0,value:void 0}),wr.set(this,{writable:!0,value:[]}),_defineProperty(this,"checkMouseEvent",(function(t,e){let r,n;for(r=0,n=_classPrivateFieldGet(this,wr).length;r<n;r++){let n,a,s=_classPrivateFieldGet(this,wr)[r];e&&(n=MouseEventChecker.mouseMAP[e]),n?(s.type==t.detector.down&&(a="down",a&&n[a]&&n[a].call(n.target,{target:n.target,type:a,nativeEvent:s.nativeEvent})),s.type==t.detector.up&&(a="up",a&&n[a]&&n[a].call(n.target,{target:n.target,type:a,nativeEvent:s.nativeEvent})),_classPrivateFieldGet(this,Dr)&&_classPrivateFieldGet(this,Dr)!=n&&(a="out",a&&_classPrivateFieldGet(this,Dr)[a]&&_classPrivateFieldGet(this,Dr)[a].call(_classPrivateFieldGet(this,Dr).target,{target:_classPrivateFieldGet(this,Dr).target,type:a})),_classPrivateFieldGet(this,Dr)!=n&&(a="over",a&&n[a]&&n[a].call(n.target,{target:n.target,type:a,nativeEvent:s.nativeEvent})),_classPrivateFieldSet(this,Dr,n)):(a="out",_classPrivateFieldGet(this,Dr)&&_classPrivateFieldGet(this,Dr)[a]&&_classPrivateFieldGet(this,Er).push({info:_classPrivateFieldGet(this,Dr),type:a,nativeEvent:s.nativeEvent}),_classPrivateFieldSet(this,Dr,null)),fireEvent(_classPrivateFieldGet(this,Er))}_classPrivateFieldGet(this,Dr)?this.cursorState="pointer":this.cursorState="default",_classPrivateFieldGet(this,wr).length=0})),_defineProperty(this,"check",t=>(_classPrivateFieldGet(this,Ur)||(_classPrivateFieldSet(this,Ur,_classPrivateFieldGet(this,Br).readPixelArrayBuffer(t,_classPrivateFieldGet(this,Br),_classPrivateFieldGet(this,Br).baseAttachment_mouseColorID_depth_ResolveTarget,_classPrivateFieldGet(this,Br).mouseX,_classPrivateFieldGet(this,Br).mouseY)),_classPrivateFieldGet(this,Ur).then(e=>{_classPrivateFieldSet(this,Ur,null),_classPrivateFieldSet(this,br,Math.round(new Float32Array(e)[0])),this.checkMouseEvent(t,_classPrivateFieldGet(this,br))})),this.cursorState)),_classPrivateFieldSet(this,Br,t)}}var Ur=new WeakMap,br=new WeakMap,Er=new WeakMap,Br=new WeakMap,Dr=new WeakMap,wr=new WeakMap;_defineProperty(MouseEventChecker,"mouseMAP",{});class View extends UUID{get mouseEventChecker(){return _classPrivateFieldGet(this,Xr)}get useFrustumCulling(){return this._useFrustumCulling}set useFrustumCulling(t){this._useFrustumCulling=t}get postEffect(){return _classPrivateFieldGet(this,Yr)}get scene(){return _classPrivateFieldGet(this,Rr)}set scene(t){_classPrivateFieldSet(this,Rr,t)}get camera(){return _classPrivateFieldGet(this,Cr)}set camera(t){_classPrivateFieldSet(this,Cr,t)}get y(){return this._y}get x(){return this._x}get width(){return _classPrivateFieldGet(this,Ir)}get height(){return _classPrivateFieldGet(this,Nr)}get viewRect(){return _classPrivateFieldGet(this,Ar)}constructor(t,e,r){super(),Fr.set(this,{writable:!0,value:void 0}),Rr.set(this,{writable:!0,value:void 0}),Cr.set(this,{writable:!0,value:void 0}),_defineProperty(this,"projectionMatrix",void 0),_defineProperty(this,"_x",0),_defineProperty(this,"_y",0),Ir.set(this,{writable:!0,value:"100%"}),Nr.set(this,{writable:!0,value:"100%"}),Ar.set(this,{writable:!0,value:[]}),_defineProperty(this,"systemUniformInfo_vertex",void 0),_defineProperty(this,"systemUniformInfo_fragment",void 0),Or.set(this,{writable:!0,value:void 0}),Vr.set(this,{writable:!0,value:void 0}),_defineProperty(this,"baseAttachment",void 0),_defineProperty(this,"baseAttachmentView",void 0),_defineProperty(this,"baseAttachment_ResolveTarget",void 0),_defineProperty(this,"baseAttachment_ResolveTargetView",void 0),_defineProperty(this,"baseAttachment_mouseColorID_depth",void 0),_defineProperty(this,"baseAttachment_mouseColorID_depthView",void 0),_defineProperty(this,"baseAttachment_mouseColorID_depth_ResolveTarget",void 0),_defineProperty(this,"baseAttachment_mouseColorID_depth_ResolveTargetView",void 0),_defineProperty(this,"baseDepthStencilAttachment",void 0),_defineProperty(this,"baseDepthStencilAttachmentView",void 0),Yr.set(this,{writable:!0,value:void 0}),_defineProperty(this,"debugLightList",[]),_defineProperty(this,"mouseX",0),_defineProperty(this,"mouseY",0),_defineProperty(this,"_useFrustumCulling",!0),Xr.set(this,{writable:!0,value:void 0}),zr.set(this,{writable:!0,value:function(t){let e=Ee.mat4+Ee.mat4+Ee.float2+Ee.float;const r={size:e,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST},n={bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"}]};let a,s,l,u;return _classPrivateFieldSet(this,Or,new Float32Array(e/Float32Array.BYTES_PER_ELEMENT)),u={layout:s=t.createBindGroupLayout(n),bindings:[{binding:0,resource:{buffer:a=t.createBuffer(r),offset:0,size:e}}]},l=t.createBindGroup(u),{GPUBuffer:a,GPUBindGroupLayout:s,GPUBindGroup:l}}}),$r.set(this,{writable:!0,value:function(t){let e=Ee.float4+2*Ee.float4*ShareGLSL.MAX_DIRECTIONAL_LIGHT+3*Ee.float4*ShareGLSL.MAX_POINT_LIGHT+Ee.float4*Ee.float4+3*Ee.float4*ShareGLSL.MAX_SPOT_LIGHT+Ee.float4+Ee.float2;const r={size:e,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST},n={bindings:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"}]};let a,s,l,u;return _classPrivateFieldSet(this,Vr,new Float32Array(e/Float32Array.BYTES_PER_ELEMENT)),u={layout:s=t.createBindGroupLayout(n),bindings:[{binding:0,resource:{buffer:a=t.createBuffer(r),offset:0,size:e}}]},l=t.createBindGroup(u),{GPUBuffer:a,GPUBindGroupLayout:s,GPUBindGroup:l}}}),_defineProperty(this,"readPixelArrayBuffer",async(t,e,r,n=0,a=0,s=1,l=1)=>{let u=e.viewRect;if(n>0&&n<u[2]&&a>0&&a<u[3]){let e,u,c,h,p;return e=t.device.createCommandEncoder(),u=t.device.createBuffer({size:16*s*l,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),c={texture:r,origin:{x:n,y:a,z:0}},h={buffer:u,rowPitch:Math.max(256,4*s*l),imageHeight:1},p={width:s,height:l,depth:1},e.copyTextureToBuffer(c,h,p),t.device.defaultQueue.submit([e.finish()]),new Promise(t=>{u.mapReadAsync().then(e=>{u.unmap(),u.destroy(),u=null,t(e)})})}}),_classPrivateFieldSet(this,Fr,t),this.camera=r,this.scene=e,this.systemUniformInfo_vertex=_classPrivateFieldGet(this,zr).call(this,t.device),this.systemUniformInfo_fragment=_classPrivateFieldGet(this,$r).call(this,t.device),this.projectionMatrix=Ue.mat4.create(),_classPrivateFieldSet(this,Yr,new PostEffect(t)),_classPrivateFieldSet(this,Xr,new MouseEventChecker(this))}resetTexture(t){_classPrivateFieldSet(this,Ar,this.getViewRect(t));let e={colorAttachments:[{key:"baseAttachment",format:t.swapChainFormat,usage:GPUTextureUsage.OUTPUT_ATTACHMENT,resolveUsage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.SAMPLED},{key:"baseAttachment_mouseColorID_depth",format:"rgba32float",usage:GPUTextureUsage.OUTPUT_ATTACHMENT,resolveUsage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.SAMPLED}],depthStencilAttachment:{key:"baseDepthStencilAttachment",format:"depth24plus-stencil8",usage:GPUTextureUsage.OUTPUT_ATTACHMENT}},r={width:_classPrivateFieldGet(this,Ar)[2],height:_classPrivateFieldGet(this,Ar)[3],depth:1};[...e.colorAttachments,e.depthStencilAttachment].forEach(e=>{let n=e.key,a=e.format,s=e.usage,l=e.resolveUsage;this[n]&&(this[n].destroy(),l&&this[n+"_ResolveTarget"].destroy()),this[n]=t.device.createTexture({size:r,sampleCount:4,format:a,usage:s}),this[n+"View"]=this[n].createView(),l&&(this[n+"_ResolveTarget"]=t.device.createTexture({size:r,sampleCount:1,format:a,usage:l}),this[n+"_ResolveTargetView"]=this[n+"_ResolveTarget"].createView())})}updateSystemUniform(t,e){let r,n,a,s,l,u;for(r=this.systemUniformInfo_vertex,n=this.systemUniformInfo_fragment,_classPrivateFieldSet(this,Ar,this.getViewRect(e)),s=0,a=Math.abs(_classPrivateFieldGet(this,Ar)[2]/_classPrivateFieldGet(this,Ar)[3]),this.camera.hasOwnProperty("farClipping")?Ue.mat4.perspective(this.projectionMatrix,Math.PI/180*this.camera.fov,a,this.camera.nearClipping,this.camera.farClipping):(Ue.mat4.ortho(this.projectionMatrix,0,1,0,1,-1e3,1e3),Ue.mat4.scale(this.projectionMatrix,this.projectionMatrix,[1/_classPrivateFieldGet(this,Ar)[2],1/_classPrivateFieldGet(this,Ar)[3],1]),Ue.mat4.translate(this.projectionMatrix,this.projectionMatrix,[0,_classPrivateFieldGet(this,Ar)[3],0])),_classPrivateFieldGet(this,Or).set(this.projectionMatrix,s),s+=Ee.mat4/Float32Array.BYTES_PER_ELEMENT,_classPrivateFieldGet(this,Or).set(this.camera.matrix,s),s+=Ee.mat4/Float32Array.BYTES_PER_ELEMENT,_classPrivateFieldGet(this,Or).set([_classPrivateFieldGet(this,Ar)[2],_classPrivateFieldGet(this,Ar)[3],performance.now()],s),s+=Ee.float2/Float32Array.BYTES_PER_ELEMENT,s=0,_classPrivateFieldGet(this,Vr).set([this.scene.directionalLightList.length,this.scene.pointLightList.length,this.scene.spotLightList.length],s),this.debugLightList.length=0,l=0,s=Ee.float4/Float32Array.BYTES_PER_ELEMENT,u=this.scene.directionalLightList.length;l<u;l++){let t=this.scene.directionalLightList[l];t&&(_classPrivateFieldGet(this,Vr).set(t._colorRGBA,s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,_classPrivateFieldGet(this,Vr).set([t._x,t._y,t._z,t._intensity],s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,t.useDebugMesh&&this.debugLightList.push(t._debugMesh))}for(s=(Ee.float4+2*Ee.float4*ShareGLSL.MAX_DIRECTIONAL_LIGHT)/Float32Array.BYTES_PER_ELEMENT,l=0,u=this.scene.pointLightList.length;l<u;l++){let t=this.scene.pointLightList[l];t&&(_classPrivateFieldGet(this,Vr).set(t._colorRGBA,s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,_classPrivateFieldGet(this,Vr).set([t._x,t._y,t._z,t._intensity],s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,_classPrivateFieldGet(this,Vr).set([t._radius],s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,t.useDebugMesh&&this.debugLightList.push(t._debugMesh))}s=(Ee.float4+2*Ee.float4*ShareGLSL.MAX_DIRECTIONAL_LIGHT+3*Ee.float4*ShareGLSL.MAX_POINT_LIGHT)/Float32Array.BYTES_PER_ELEMENT;let c=this.scene.ambientLight;for(_classPrivateFieldGet(this,Vr).set(c?c._colorRGBA:[0,0,0,0],s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,_classPrivateFieldGet(this,Vr).set([c?c._intensity:1],s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,l=0,u=this.scene.spotLightList.length;l<u;l++){let t=this.scene.spotLightList[l];t&&(_classPrivateFieldGet(this,Vr).set(t._colorRGBA,s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,_classPrivateFieldGet(this,Vr).set([t._x,t._y,t._z,t._intensity],s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,_classPrivateFieldGet(this,Vr).set([t.cutoff,t.exponent],s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,t.useDebugMesh&&this.debugLightList.push(t._debugMesh.children))}s=(Ee.float4+2*Ee.float4*ShareGLSL.MAX_DIRECTIONAL_LIGHT+3*Ee.float4*ShareGLSL.MAX_POINT_LIGHT+3*Ee.float4*ShareGLSL.MAX_SPOT_LIGHT+2*Ee.float4)/Float32Array.BYTES_PER_ELEMENT,_classPrivateFieldGet(this,Vr).set([this.camera.x,this.camera.y,this.camera.z],s),s+=Ee.float4/Float32Array.BYTES_PER_ELEMENT,_classPrivateFieldGet(this,Vr).set([_classPrivateFieldGet(this,Ar)[2],_classPrivateFieldGet(this,Ar)[3]],s),t.setBindGroup(0,r.GPUBindGroup),t.setBindGroup(1,n.GPUBindGroup),r.GPUBuffer.setSubData(0,_classPrivateFieldGet(this,Or)),n.GPUBuffer.setSubData(0,_classPrivateFieldGet(this,Vr))}getViewRect(t){return["number"==typeof this.x?this.x:parseInt(this.x)/100*t.canvas.width,"number"==typeof this.y?this.y:parseInt(this.y)/100*t.canvas.height,"number"==typeof this.width?this.width:parseInt(parseInt(this.width)/100*t.canvas.width),"number"==typeof this.height?this.height:parseInt(parseInt(this.height)/100*t.canvas.height)]}setSize(t=_classPrivateFieldGet(this,Ir),e=_classPrivateFieldGet(this,Nr)){let r=_classPrivateFieldGet(this,Ar).toString();"number"==typeof t?_classPrivateFieldSet(this,Ir,t<1?1:parseInt(t)):t.includes("%")&&+t.replace("%","")>=0?_classPrivateFieldSet(this,Ir,t):Fe.throwFunc("View setSize : width는 0이상의 숫자나 %만 허용.",t),"number"==typeof e?_classPrivateFieldSet(this,Nr,e<1?1:parseInt(e)):e.includes("%")&&+e.replace("%","")>=0?_classPrivateFieldSet(this,Nr,e):Fe.throwFunc("View setSize : height는 0이상의 숫자나 %만 허용.",e),this.getViewRect(_classPrivateFieldGet(this,Fr)).toString()!=r&&this.resetTexture(_classPrivateFieldGet(this,Fr))}setLocation(t=this._x,e=this._y){"number"==typeof t?this._x=parseInt(t):t.includes("%")&&+t.replace("%","")>=0?this._x=t:Fe.throwFunc("View setLocation : x는 0이상의 숫자나 %만 허용.",t),"number"==typeof e?this._y=parseInt(e):e.includes("%")&&+e.replace("%","")>=0?this._y=e:Fe.throwFunc("View setLocation : y는 0이상의 숫자나 %만 허용.",e),this.getViewRect(_classPrivateFieldGet(this,Fr))}computeViewFrustumPlanes(){let t=Ue.mat4.create();Ue.mat4.multiply(t,this.projectionMatrix,this.camera.matrix);let e=[];e[0]=[t[3]-t[0],t[7]-t[4],t[11]-t[8],t[15]-t[12]],e[1]=[t[3]+t[0],t[7]+t[4],t[11]+t[8],t[15]+t[12]],e[2]=[t[3]+t[1],t[7]+t[5],t[11]+t[9],t[15]+t[13]],e[3]=[t[3]-t[1],t[7]-t[5],t[11]-t[9],t[15]-t[13]],e[4]=[t[3]-t[2],t[7]-t[6],t[11]-t[10],t[15]-t[14]],e[5]=[t[3]+t[2],t[7]+t[6],t[11]+t[10],t[15]+t[14]];for(let t=0;t<e.length;t++){let r=e[t],n=Math.sqrt(r[0]*r[0]+r[1]*r[1]+r[2]*r[2]);r[0]/=n,r[1]/=n,r[2]/=n,r[3]/=n}return e}}var Fr=new WeakMap,Rr=new WeakMap,Cr=new WeakMap,Ir=new WeakMap,Nr=new WeakMap,Ar=new WeakMap,Or=new WeakMap,Vr=new WeakMap,Yr=new WeakMap,Xr=new WeakMap,zr=new WeakMap,$r=new WeakMap;const kr=[];let Wr=0,Zr=0,Hr=new Float32Array(1);const jr=new UniformBufferDescriptor([{size:Ee.mat4*ShareGLSL.MESH_UNIFORM_POOL_NUM,valueName:"matrix"},{size:Ee.mat4*ShareGLSL.MESH_UNIFORM_POOL_NUM,valueName:"normalMatrix"}]);let qr=0;class BaseObject3D extends DisplayContainer{get sumOpacity(){return this._sumOpacity}set sumOpacity(t){this._sumOpacity=t,Hr[0]=this._sumOpacity,this.uniformBuffer_mesh.GPUBuffer.setSubData(Ee.float2,Hr)}get opacity(){return this._opacity}set opacity(t){this._opacity=t}get renderDrawLayerIndex(){return this._renderDrawLayerIndex}set renderDrawLayerIndex(t){this._renderDrawLayerIndex=t}get blendColorSrc(){return this._blendColorSrc}set blendColorSrc(t){this._blendColorSrc=t,this.dirtyPipeline=!0}get blendColorDst(){return this._blendColorDst}set blendColorDst(t){this._blendColorDst=t,this.dirtyPipeline=!0}get blendAlphaDst(){return this._blendAlphaDst}set blendAlphaDst(t){this._blendAlphaDst=t,this.dirtyPipeline=!0}get blendAlphaSrc(){return this._blendAlphaSrc}set blendAlphaSrc(t){this._blendAlphaSrc=t,this.dirtyPipeline=!0}get x(){return this._x}set x(t){this._x=t,this.dirtyTransform=!0}get y(){return this._y}set y(t){this._y=t,this.dirtyTransform=!0}get z(){return this._z}set z(t){this._z=t,this.dirtyTransform=!0}getPosition(){return[this._x,this._y,this._z]}setPosition(t,e,r){this._x=t,this._y=e,this._z=r,this.dirtyTransform=!0}get pivotZ(){return this._pivotZ}set pivotZ(t){this._pivotZ=t,this.dirtyTransform=!0}get pivotY(){return this._pivotY}set pivotY(t){this._pivotY=t,this.dirtyTransform=!0}get pivotX(){return this._pivotX}set pivotX(t){this._pivotX=t,this.dirtyTransform=!0}getPivotPosition(){return[this._pivotX,this._pivotY,this._pivotZ]}setPivotPosition(t,e,r){this._pivotX=t,this._pivotY=e,this._pivotZ=r,this.dirtyTransform=!0}get rotationX(){return this._rotationX}set rotationX(t){this._rotationX=t,this.dirtyTransform=!0}get rotationY(){return this._rotationY}set rotationY(t){this._rotationY=t,this.dirtyTransform=!0}get rotationZ(){return this._rotationZ}set rotationZ(t){this._rotationZ=t,this.dirtyTransform=!0}getRotation(){return[this._rotationX,this._rotationY,this._rotationZ]}setRotation(t,e,r){this._rotationX=t,this._rotationY=e,this._rotationZ=r,this.dirtyTransform=!0}get scaleX(){return this._scaleX}set scaleX(t){this._scaleX=t,this.dirtyTransform=!0}get scaleY(){return this._scaleY}set scaleY(t){this._scaleY=t,this.dirtyTransform=!0}get scaleZ(){return this._scaleZ}set scaleZ(t){this._scaleZ=t,this.dirtyTransform=!0}getScale(){return[this._scaleX,this._scaleY,this._scaleZ]}setScale(t,e,r){this._scaleX=t,this._scaleY=e,this._scaleZ=r,this.dirtyTransform=!0}get geometry(){return this._geometry}set geometry(t){this._geometry=t,this.dirtyPipeline=!0}get material(){return this._material}set material(t){this._material=t,this.dirtyPipeline=!0}get depthWriteEnabled(){return this._depthWriteEnabled}set depthWriteEnabled(t){this.dirtyPipeline=!0,this._depthWriteEnabled=t}get depthCompare(){return this._depthCompare}set depthCompare(t){this.dirtyPipeline=!0,this._depthCompare=t}get cullMode(){return this._cullMode}set cullMode(t){this.dirtyPipeline=!0,this._cullMode=t}get primitiveTopology(){return this._primitiveTopology}set primitiveTopology(t){this.dirtyPipeline=!0,this._primitiveTopology=t}constructor(t){var e,r;super(),_defineProperty(this,"_x",0),_defineProperty(this,"_y",0),_defineProperty(this,"_z",0),_defineProperty(this,"_pivotX",0),_defineProperty(this,"_pivotY",0),_defineProperty(this,"_pivotZ",0),_defineProperty(this,"_rotationX",0),_defineProperty(this,"_rotationY",0),_defineProperty(this,"_rotationZ",0),_defineProperty(this,"_scaleX",1),_defineProperty(this,"_scaleY",1),_defineProperty(this,"_scaleZ",1),_defineProperty(this,"dirtyTransform",!0),_defineProperty(this,"dirtyPipeline",!0),_defineProperty(this,"_material",void 0),_defineProperty(this,"_geometry",void 0),Qr.set(this,{writable:!0,value:void 0}),_defineProperty(this,"_depthWriteEnabled",!0),_defineProperty(this,"_depthCompare","less-equal"),_defineProperty(this,"_cullMode","back"),_defineProperty(this,"_primitiveTopology","triangle-list"),_defineProperty(this,"_blendColorSrc","src-alpha"),_defineProperty(this,"_blendColorDst","one-minus-src-alpha"),_defineProperty(this,"_blendAlphaSrc","one"),_defineProperty(this,"_blendAlphaDst","one-minus-src-alpha"),_defineProperty(this,"pipeline",void 0),Jr.set(this,{writable:!0,value:void 0}),Kr.set(this,{writable:!0,value:0}),_defineProperty(this,"_renderDrawLayerIndex",Render.DRAW_LAYER_INDEX0),_defineProperty(this,"_sumOpacity",1),_defineProperty(this,"_opacity",1),_defineProperty(this,"targetTo",(t=>{let e=new Float32Array([0,1,0]),r=[],n=[],a=Ue.mat4.create();return function(t,s,l){r[0]=t,r[1]=s,r[2]=l,Ue.mat4.identity(a),Ue.mat4.targetTo(a,[this._x,this._y,this._z],r,e),n=Fe.mat4ToEuler(a,[]),this._rotationX=180*-n[0]/Math.PI,this._rotationY=180*-n[1]/Math.PI,this._rotationZ=180*-n[2]/Math.PI,this.dirtyTransform=!0}})()),_defineProperty(this,"localToWorld",(t=>{let e;return e=Ue.mat4.create(),function(t=0,r=0,n=0){return"number"==typeof t||Fe.throwFunc("BaseObject3D - localToWorld : x - number만 허용함","입력값 : ",t),"number"==typeof r||Fe.throwFunc("BaseObject3D - localToWorld : y - number만 허용함","입력값 : ",r),"number"==typeof n||Fe.throwFunc("BaseObject3D - localToWorld : z - number만 허용함","입력값 : ",n),e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t,e[13]=r,e[14]=n,e[15]=1,Ue.mat4.multiply(e,this.matrix,e),[e[12],e[13],e[14]]}})()),_defineProperty(this,"worldToLocal",(e=Ue.mat4.create(),r=Ue.mat4.create(),function(t=0,n=0,a=0){return"number"==typeof t||Fe.throwFunc("BaseObject3D - worldToLocal : x - number만 허용함","입력값 : ",t),"number"==typeof n||Fe.throwFunc("BaseObject3D - worldToLocal : y - number만 허용함","입력값 : ",n),"number"==typeof a||Fe.throwFunc("BaseObject3D - worldToLocal : z - number만 허용함","입력값 : ",a),Ue.mat4.invert(e,this.matrix),Ue.mat4.transpose(e,e),Ue.mat4.multiply(r,e,this.matrix),[r[0]*t+r[1]*n+r[2]*a+r[3],r[4]*t+r[5]*n+r[6]*a+r[7],r[8]*t+r[9]*n+r[10]*a+r[11]]})),_defineProperty(this,"getScreenPoint",(t=>{let e,r,n,a=Ue.mat4.create(),s=Ue.mat4.create();return n={x:0,y:0,z:0,w:0},function(t,l=0,u=0,c=0){let h=this.localToWorld(l,u,c);return s[0]=1,s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=1,s[6]=0,s[7]=0,s[8]=0,s[9]=0,s[10]=1,s[11]=0,s[12]=h[0],s[13]=h[1],s[14]=h[2],s[15]=1,t instanceof View||Fe.throwFunc("BaseObject3D - getScreenPoint : redView - RedView Instance 만 허용함","입력값 : ",t),e=t.camera,r=t.viewRect,Ue.mat4.multiply(a,t.projectionMatrix,e.matrix),Ue.mat4.multiply(a,a,s),n.x=a[12],n.y=a[13],n.z=a[14],n.w=a[15],n.x=.5*n.x/n.w+.5,n.y=.5*n.y/n.w+.5,[(r[0]+n.x*r[2])/window.devicePixelRatio,(r[1]+(1-n.y)*r[3])/window.devicePixelRatio]}})()),_classPrivateFieldSet(this,Qr,t);let n=function(t,e){let r;kr[Zr]||(r=new UniformBuffer(t),r.setBuffer(jr),kr[Zr]=r),r=kr[Zr];let n={float32Array:r.float32Array,uniformBuffer_meshMatrix:r,offsetMatrix:Ee.mat4*Wr,offsetNormalMatrix:Ee.mat4*ShareGLSL.MESH_UNIFORM_POOL_NUM+Ee.mat4*Wr,uniformIndex:Wr};return Wr++,Wr==ShareGLSL.MESH_UNIFORM_POOL_NUM&&(Zr++,Wr=0),n}(t);this.uniformBuffer_meshMatrix=n.uniformBuffer_meshMatrix,this.uniformBuffer_meshMatrix.meshFloat32Array=n.float32Array,this.offsetMatrix=n.offsetMatrix,this.offsetNormalMatrix=n.offsetNormalMatrix,qr++,_classPrivateFieldSet(this,Kr,qr),this.uniformBuffer_mesh=new UniformBuffer(t),this.uniformBuffer_mesh.setBuffer(BaseObject3D.uniformBufferDescriptor_meshIndex),this.uniformBuffer_mesh.GPUBuffer.setSubData(0,new Float32Array([n.uniformIndex])),this.uniformBuffer_mesh.GPUBuffer.setSubData(Ee.float,new Float32Array([_classPrivateFieldGet(this,Kr)])),this.sumOpacity=1,_classPrivateFieldSet(this,Jr,[{binding:0,resource:{buffer:this.uniformBuffer_meshMatrix.GPUBuffer,offset:0,size:2*Ee.mat4*ShareGLSL.MESH_UNIFORM_POOL_NUM}},{binding:1,resource:{buffer:this.uniformBuffer_mesh.GPUBuffer,offset:0,size:Ee.float}}]),this.GPUBindGroupLayout=t.device.createBindGroupLayout(BaseObject3D.uniformsBindGroupLayoutDescriptor_mesh),this.GPUBindGroup=_classPrivateFieldGet(this,Qr).device.createBindGroup({layout:this.GPUBindGroupLayout,bindings:_classPrivateFieldGet(this,Jr)}),this.pipeline=new PipelineBasic(t,this),this.normalMatrix=Ue.mat4.create(),this.matrix=Ue.mat4.create(),this.localMatrix=Ue.mat4.create()}addEventListener(t,e){MouseEventChecker.mouseMAP[_classPrivateFieldGet(this,Kr)]||(MouseEventChecker.mouseMAP[_classPrivateFieldGet(this,Kr)]={target:this}),MouseEventChecker.mouseMAP[_classPrivateFieldGet(this,Kr)][t]=e}removeEventListener(t){MouseEventChecker.mouseMAP[_classPrivateFieldGet(this,Kr)]&&(MouseEventChecker.mouseMAP[_classPrivateFieldGet(this,Kr)][t]=null)}}var Qr=new WeakMap,Jr=new WeakMap,Kr=new WeakMap;_defineProperty(BaseObject3D,"uniformsBindGroupLayoutDescriptor_mesh",{bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"}]}),_defineProperty(BaseObject3D,"uniformBufferDescriptor_meshIndex",new UniformBufferDescriptor([{size:Ee.float,valueName:"meshUniformIndex"},{size:Ee.float,valueName:"mouseColorID"},{size:Ee.float,valueName:"sumOpacity"}]));class Mesh extends BaseObject3D{constructor(t,e,r){super(t),this.geometry=e,this.material=r}}const ti={};class ImageLoader extends UUID{constructor(t,e,r,n=ImageLoader.TYPE_2D){if(super(),this.callback=r,n===ImageLoader.TYPE_2D){let t=location.pathname.split("/");t.length>1&&t.pop();let n=location.origin+t.join("/")+"/"+e;(e.includes(";base64,")||e.includes("://"))&&(n=e),ti[n]?ti[n].loaded?(this.imageDatas=ti[n].imageDatas,r&&r.call(this,{ok:!0})):ti[n].tempList.push(this):(ti[n]={loaded:!1,tempList:[]},ti[n].tempList.push(this),RedGPUWorker_loadImageWithWorker(n).then(t=>{ti[n].loaded=!0,ti[n].imageDatas=t.imageDatas,ti[n].tempList.forEach(e=>{e.imageDatas=ti[n].imageDatas,e.callback&&e.callback.call(e,t)}),ti[n].tempList.length=0}).catch(t=>{ti[n].tempList.forEach(e=>{e.callback&&e.callback.call(e,t)}),ti[n].tempList.length=0}))}else{let t=0,n=0,a=0,s=[];e.forEach((e,l)=>{if(e){let u=location.pathname.split("/");u.length>1&&u.pop();let c=location.origin+u.join("/")+"/"+e;(e.includes(";base64,")||e.includes("://"))&&(c=e),ti[c]?ti[c].loaded?(this.imageDatas=ti[c].imageDatas,r&&r.call(this,{ok:!0})):ti[c].tempList.push(this):(ti[c]={loaded:!1,imgList:s,tempList:[]},ti[c].tempList.push(this),RedGPUWorker_loadImageWithWorker(c).then(e=>{s[l]=e,a++,t=Math.max(t,e.imageDatas[0].width),n=Math.max(n,e.imageDatas[0].height),t>1920&&(t=1920),n>1920&&(n=1920),6==a&&(ti[c].loaded=!0,ti[c].imgList=s,ti[c].maxW=t,ti[c].maxH=n,ti[c].tempList.forEach(t=>{t.imgList=ti[c].imgList,t.maxW=ti[c].maxW,t.maxH=ti[c].maxH,t.callback&&t.callback.call(t,e)}),ti[c].tempList.length=0)}).catch(t=>{ti[c].tempList.forEach(e=>{e.callback&&e.callback.call(e,t)}),ti[c].tempList.length=0}))}else;})}}}function CopyBufferToTexture(t,e,r,n,a,s=-1){return new Promise((l,u)=>{r.forEach((r,l)=>{if(!a.useMipmap&&l)return;if(l>a.mipMaps)return;let u=new Uint8ClampedArray(r.data),c=r.width,h=r.height,p=r.rowPitch;const v=e.createBuffer({size:u.byteLength+u.byteLength%4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC});v.setSubData(0,u);const S={buffer:v,rowPitch:p,imageHeight:h},y={texture:n,mipLevel:l,arrayLayer:Math.max(s,0)},G={width:c,height:h,depth:1};t.copyBufferToTexture(S,y,G)}),l()})}_defineProperty(ImageLoader,"TYPE_2D","TYPE_2D"),_defineProperty(ImageLoader,"TYPE_CUBE","TYPE_CUBE");class BaseTexture extends UUID{constructor(){super(),ei.set(this,{writable:!0,value:[]}),_defineProperty(this,"_GPUTexture",void 0),_defineProperty(this,"_GPUTextureView",void 0)}get GPUTexture(){return this._GPUTexture}get GPUTextureView(){return this._GPUTextureView}resolve(t){this._GPUTexture=t,this instanceof BitmapTexture?this._GPUTextureView=t?t.createView():null:(this._GPUTexture=t,this._GPUTextureView=t?t.createView({format:"rgba8unorm",dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:this.mipMaps+1,baseArrayLayer:0,arrayLayerCount:6}):null);let e=_classPrivateFieldGet(this,ei).length;for(;e--;){let t=_classPrivateFieldGet(this,ei)[e];t[0][t[1]]=this}_classPrivateFieldGet(this,ei).length=0}addUpdateTarget(t,e){_classPrivateFieldGet(this,ei).push([t,e])}}var ei=new WeakMap;let ri;const ii=new Map;let ni;class BitmapTexture extends BaseTexture{constructor(t,e,r,n=!0,a,s){if(super(),ri||(ri=new Sampler(t)),this.sampler=r||ri,this.onload=a,this.onerror=s,this.mapKey=e+n+this.sampler.string,this.useMipmap=n,e){let r=this;new ImageLoader(t,e,(function(e){ii.get(r.mapKey)?(r.resolve(ii.get(r.mapKey)),r.onload&&r.onload(r)):e.ok?function(t,e,r){let n,a,s,l,u;n=e[0].width,a=e[0].height,r.useMipmap&&(r.mipMaps=Math.round(Math.log2(Math.max(n,a))),r.mipMaps>10&&(r.mipMaps=10)),s={size:{width:n,height:a,depth:1},dimension:"2d",format:"rgba8unorm",arrayLayerCount:1,mipLevelCount:r.useMipmap?r.mipMaps+1:1,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.SAMPLED},l=t.device.createTexture(s),ii.set(r.mapKey,l),u=t.device.createCommandEncoder({}),CopyBufferToTexture(u,t.device,e,l,r).then(e=>{t.device.defaultQueue.submit([u.finish()]),r.resolve(l),r.onload&&r.onload(r)})}(t,this.imageDatas,r):(r.resolve(null),r.onerror&&r.onerror(r))}),ImageLoader.TYPE_2D)}else;}}const ai=new Map;class BitmapCubeTexture extends BaseTexture{constructor(t,e,r,n=!0,a,s){if(super(),ni||(ni=new Sampler(t)),this.sampler=r||ni,this.onload=a,this.onerror=s,this.mapKey=e+n+this.sampler.string,this.useMipmap=n,e){let r=this;new ImageLoader(t,e,(function(e){ai.get(r.mapKey)?(r.resolve(ai.get(r.mapKey)),r.onload&&r.onload(r)):e.ok?function(t,e,r){let n,a,s,l,u;n=e[0].imageDatas[0].width,a=e[0].imageDatas[0].height,r.useMipmap&&(r.mipMaps=Math.round(Math.log2(Math.max(n,a))),r.mipMaps>10&&(r.mipMaps=10)),s={size:{width:n,height:a,depth:1},dimension:"2d",format:"rgba8unorm",arrayLayerCount:r instanceof BitmapTexture?1:6,mipLevelCount:r.useMipmap?r.mipMaps+1:1,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.SAMPLED},l=t.device.createTexture(s),ai.set(r.mapKey,l);let c=[];u=t.device.createCommandEncoder({}),e.forEach((e,n)=>{c.push(CopyBufferToTexture(u,t.device,e.imageDatas,l,r,n))}),Promise.all(c).then(e=>{t.device.defaultQueue.submit([u.finish()]),r.resolve(l),r.onload&&r.onload.call(r)})}(t,this.imgList,r):(r.resolve(null),r.onerror&&r.onerror(r))}),ImageLoader.TYPE_CUBE)}else;}}class TextureLoader extends UUID{constructor(t,e,r,n){let a,s;super(),_defineProperty(this,"textures",[]),a=0,s=t=>{a++,n&&n.call(this,{totalNum:e.length,loaded:a}),a==e.length&&requestAnimationFrame(t=>{r&&r.call(this,this)})},(e=e||[]).length?e.forEach((e,r)=>{let n,a,l,u=BitmapTexture;e.hasOwnProperty("src")?(a=e.src,l=e.sampler):a=e,a instanceof Array&&(u=BitmapCubeTexture),n={src:a,texture:null,loadEnd:!1,loadSuccess:!1,userInfo:e},n.texture=new u(t,a,l,!0,(function(t){n.loadSuccess=!0,n.loadEnd=!0,s()}),(function(t){n.loadSuccess=!1,n.loadEnd=!0,s()})),this.textures.push(n)}):requestAnimationFrame(t=>{r&&r.call(this,this)})}getTextureByIndex(t){if(this.textures[t])return this.textures[t].texture}}const oi={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};class AccessorInfo_GLTF{constructor(t,e,r){switch(this.accessor=e.accessors[r],this.bufferView=e.bufferViews[this.accessor.bufferView],this.bufferIndex=this.bufferView.buffer,this.buffer=e.buffers[this.bufferIndex],this.bufferURIDataView=null,this.buffer.uri&&(this.bufferURIDataView=t.parsingResult.uris.buffers[this.bufferIndex]),this.componentType=oi[this.accessor.componentType],this.componentType_BYTES_PER_ELEMENT=this.componentType.BYTES_PER_ELEMENT,this.componentType){case Float32Array:this.getMethod="getFloat32";break;case Uint32Array:this.getMethod="getUint32";break;case Uint16Array:this.getMethod="getUint16";break;case Int16Array:this.getMethod="getInt16";break;case Uint8Array:this.getMethod="getUint8";break;case Int8Array:this.getMethod="getInt8";break;default:Fe.throwFunc("파싱할수없는 타입",this.componentType)}this.accessorBufferOffset=this.accessor.byteOffset||0,this.bufferViewOffset=this.bufferView.byteOffset||0,this.bufferViewByteStride=this.bufferView.byteStride||0,this.startIndex=(this.bufferViewOffset+this.accessorBufferOffset)/this.componentType_BYTES_PER_ELEMENT}}let si;si=function(t,e,r){let n,a=[],s=new AccessorInfo_GLTF(t,e,r),l=s.componentType_BYTES_PER_ELEMENT,u=s.bufferURIDataView,c=s.getMethod,h=s.accessor.type,p=s.accessor.count,v=s.startIndex;switch(h){case"SCALAR":for(n=v+1*p;v<n;v++)a.push(u[c](v*l,!0));break;case"VEC4":for(n=v+4*p;v<n;v++)a.push(u[c](v*l,!0));break;case"VEC3":for(n=v+3*p;v<n;v++)a.push(u[c](v*l,!0))}return a};let parseAnimation_GLTF=function(t,e,r){return new Promise(r=>{if(e.animations||(e.animations=[]),e.animations.length){let n=e.nodes,a=e.meshes,s=0,l=0;e.animations.forEach((function(u){let c=u.samplers,h=[];h.minTime=1e7,h.maxTime=-1,h.name=u.name,t.parsingResult.animations.push(h);let p=0;const v=u.channels.length;l+=v;let parseChannels=S=>{let y,G,U,b,E,C=[],I=u.channels[S];if(y=c[I.sampler],G=I.target,b=n[G.node],"mesh"in b)U=b.Mesh,a[b.mesh].primitives.forEach(t=>C.push(t.Mesh));else{let e;if(!t.parsingResult.groups[G.node])return;e=t.parsingResult.groups[G.node],U=e}"scale"!=G.path&&"rotation"!=G.path&&"translation"!=G.path&&"weights"!=G.path||h.push(E={key:G.path,time:si(t,e,y.input),data:si(t,e,y.output),interpolation:y.interpolation,target:U,targets:C}),E&&(h.minTime>E.time[0]&&(h.minTime=E.time[0]),h.maxTime<E.time[E.time.length-1]&&(h.maxTime=E.time[E.time.length-1])),p++,s++,p!=v&&requestAnimationFrame(t=>parseChannels(p)),s==l&&(t.parsingResult.animations.length&&t.parsingResult.animations.forEach(e=>t.playAnimation(e)),r())};parseChannels(p)}))}else r()})};class Camera3D extends BaseObject3D{constructor(t){super(t),li.set(this,{writable:!0,value:new Float32Array([0,1,0])}),_defineProperty(this,"fov",60),_defineProperty(this,"nearClipping",.1),_defineProperty(this,"farClipping",1e5)}get x(){return this._x}set x(t){this._x=t,this.matrix[12]=t}get y(){return this._y}set y(t){this._y=t,this.matrix[13]=t}get z(){return this._z}set z(t){this._z=t,this.matrix[14]=t}lookAt(t,e,r){Ue.mat4.lookAt(this.matrix,[this.x,this.y,this.z],[t,e,r],_classPrivateFieldGet(this,li))}}var li=new WeakMap;let parseCameras_GLTF=function(t,e){e.cameras&&e.cameras.forEach((function(e){let r=new Camera3D(t.redGPUContext);"orthographic"==e.type?r.mode2DYn=!0:(r.fov=180*e.perspective.yfov/Math.PI,r.farClipping=e.perspective.zfar,r.nearClipping=e.perspective.znear),t.parsingResult.cameras.push(r)}))};var ui,fi,mi,ci,hi,di=(fi=Ue.mat4.create(),mi=[0,0,0],ci=[],hi=[],function(t,e){"matrix"in e&&(ui=e.matrix,Fe.mat4ToEuler(ui,mi),t._rotationX=-180*mi[0]/Math.PI,t._rotationY=-180*mi[1]/Math.PI,t._rotationZ=-180*mi[2]/Math.PI,t._x=ui[12],t._y=ui[13],t._z=ui[14],Ue.mat4.getScaling(hi,ui),t._scaleX=hi[0],t._scaleY=hi[1],t._scaleZ=hi[2]),"rotation"in e&&(ci=e.rotation,Fe.quaternionToRotationMat4(ci,fi),Fe.mat4ToEuler(fi,mi),t._rotationX=-180*mi[0]/Math.PI,t._rotationY=-180*mi[1]/Math.PI,t._rotationZ=-180*mi[2]/Math.PI),"translation"in e&&(t._x=e.translation[0],t._y=e.translation[1],t._z=e.translation[2]),"scale"in e&&(t._scaleX=e.scale[0],t._scaleY=e.scale[1],t._scaleZ=e.scale[2]),t.dirtyTransform=!0});let checkJoint=function(t,e,r,n){if(r[n].Mesh){let t=r[n].Mesh;e.joints.push(t),t.primitiveTopology="line-list",t.depthCompare="never"}else requestAnimationFrame((function(){checkJoint(t,e,r,n)}))},parseSkin_GLTF=function(t,e,r,n){let a={joints:[],inverseBindMatrices:[]},s=e.nodes;r.joints.forEach((function(e){checkJoint(t,a,s,e)})),r.skeleton&&(a.skeleton=e.nodes[r.skeleton].Mesh);let l,u=r.inverseBindMatrices,c=new AccessorInfo_GLTF(t,e,u),h=c.componentType_BYTES_PER_ELEMENT,p=c.bufferViewByteStride,v=c.bufferURIDataView,S=c.getMethod,y=c.accessor.type,G=c.accessor.count,U=0,b=p/h,E=c.startIndex;switch(y){case"MAT4":if(p)for(l=E+G*(p/h);E<l;E++)U%b<16&&a.inverseBindMatrices.push(v[S](E*h,!0)),U++;else for(l=E+16*G;E<l;E++)a.inverseBindMatrices.push(v[S](E*h,!0)),U++}a.inverseBindMatrices=new Float32Array(a.inverseBindMatrices),n.skinInfo=a,n.material.useSkin=!!n.skinInfo},pi=new Float32Array(1);class PBRMaterial_System extends(er.mix(BaseMaterial,er.diffuseTexture,er.normalTexture,er.emissiveTexture,er.environmentTexture,er.displacementTexture,er.roughnessTextureGLTF,er.occlusionTextureGLTF,er.basicLightPropertys)){set alphaBlend(t){this._alphaBlend=t,pi[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.alphaBlend,pi)}get alphaBlend(){return this._alphaBlend}set cutOff(t){this._cutOff=t,pi[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.cutOff,pi)}get cutOff(){return this._cutOff}get useCutOff(){return this._useCutOff}set useCutOff(t){this._useCutOff=t,pi[0]=t?1:0,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.useCutOff,pi)}get useSkin(){return this._useSkin}set useSkin(t){this._useSkin=t,pi[0]=t?1:0,this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap.useSkin,pi)}set emissivePower(t){this._emissivePower=t,pi[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.emissivePower,pi)}get emissivePower(){return this._emissivePower}get useMaterialDoubleSide(){return this._useMaterialDoubleSide}set useMaterialDoubleSide(t){this._useMaterialDoubleSide=t,pi[0]=t?1:0,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.useMaterialDoubleSide,pi)}get useVertexTangent(){return this._useVertexTangent}set useVertexTangent(t){this._useVertexTangent=t,pi[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.useVertexTangent,pi)}get metallicFactor(){return this._metallicFactor}set metallicFactor(t){this._metallicFactor=t,pi[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.metallicFactor,pi)}get useVertexColor_0(){return this._useVertexColor_0}set useVertexColor_0(t){this._useVertexColor_0=t,pi[0]=t?1:0,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.useVertexColor_0,pi)}get baseColorFactor(){return this._baseColorFactor}set baseColorFactor(t){this._baseColorFactor=new Float32Array(t),this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.baseColorFactor,this._baseColorFactor)}get diffuseTexCoordIndex(){return this._diffuseTexCoordIndex}set diffuseTexCoordIndex(t){this._diffuseTexCoordIndex=t,pi[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.diffuseTexCoordIndex,pi)}get normalTexCoordIndex(){return this._normalTexCoordIndex}set normalTexCoordIndex(t){this._normalTexCoordIndex=t,pi[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.normalTexCoordIndex,pi)}get emissiveTexCoordIndex(){return this._emissiveTexCoordIndex}set emissiveTexCoordIndex(t){this._emissiveTexCoordIndex=t,pi[0]=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.emissiveTexCoordIndex,pi)}constructor(t,e,r,n,a,s,l){super(t),_defineProperty(this,"_baseColorFactor",new Float32Array(4)),_defineProperty(this,"_useVertexColor_0",!1),_defineProperty(this,"_diffuseTexCoordIndex",0),_defineProperty(this,"_normalTexCoordIndex",0),_defineProperty(this,"_emissiveTexCoordIndex",0),_defineProperty(this,"_metallicFactor",1),_defineProperty(this,"_useMaterialDoubleSide",!1),_defineProperty(this,"_useVertexTangent",!1),_defineProperty(this,"_emissivePower",1),_defineProperty(this,"_cutOff",0),_defineProperty(this,"_useCutOff",!0),_defineProperty(this,"_alphaBlend",0),_defineProperty(this,"_useSkin",!1),_defineProperty(this,"jointMatrix",new Float32Array(128*Ee.mat4/Float32Array.BYTES_PER_ELEMENT)),_defineProperty(this,"inverseBindMatrixForJoint",new Float32Array(128*Ee.mat4/Float32Array.BYTES_PER_ELEMENT)),_defineProperty(this,"globalTransformOfNodeThatTheMeshIsAttachedTo",new Float32Array(Ee.mat4/Float32Array.BYTES_PER_ELEMENT)),_i.set(this,{writable:!0,value:void 0}),this.diffuseTexture=e,this.environmentTexture=r,this.normalTexture=n,this.occlusionTexture=a,this.emissiveTexture=s,this.roughnessTexture=l,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"environmentTexture":this._environmentTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"roughnessTexture":this._roughnessTexture=t,r=e;break;case"occlusionTexture":this._occlusionTexture=t,r=e}r&&(pi[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],pi):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],pi)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,pi[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],pi):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],pi),this.needResetBindingInfo=!0,this.needResetBindingInfo=!0)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._roughnessTexture?this._roughnessTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._roughnessTexture?this._roughnessTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:12,resource:this._environmentTexture?this._environmentTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:13,resource:this._environmentTexture?this._environmentTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView},{binding:14,resource:this._occlusionTexture?this._occlusionTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:15,resource:this._occlusionTexture?this._occlusionTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}var _i=new WeakMap;_defineProperty(PBRMaterial_System,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.calcDisplacement}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 3 ) in vec2 uv1;\n\tlayout( location = 4 ) in vec4 vertexColor_0;\n\tlayout( location = 5 ) in vec4 aVertexWeight;\n\tlayout( location = 6 ) in vec4 aVertexJoint;\n\tlayout( location = 7 ) in vec4 vertexTangent;\n\tlayout( location = 0 ) out vec4 vVertexColor_0;\n\tlayout( location = 1 ) out vec3 vNormal;\n\tlayout( location = 2 ) out vec2 vUV;\n\tlayout( location = 3 ) out vec2 vUV1;\n\tlayout( location = 4 ) out vec4 vVertexTangent;\n\tlayout( location = 5 ) out vec4 vVertexPosition;\n\tlayout( location = 6 ) out float vMouseColorID;\t\n\tlayout( location = 7 ) out float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n\t\tmat4 jointMatrix[128];\n\t\tmat4 inverseBindMatrixForJoint[128];\n\t\tmat4 globalTransformOfNodeThatTheMeshIsAttachedTo;\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n        float useSkin;\n        \n    } vertexUniforms;\n\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uDisplacementSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tmat4 targetMatrix = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] ;\n\t\tmat4 skinMat = mat4(1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0);\n\t\tif(vertexUniforms.useSkin == TRUTHY) {\n\t\t\tskinMat =\n\t\t\taVertexWeight.x * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.x) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.x)]+\n\t\t\taVertexWeight.y * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.y) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.y)]+\n\t\t\taVertexWeight.z * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.z) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.z)]+\n\t\t\taVertexWeight.w * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.w) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.w)];\n\t\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * skinMat * vec4(position, 1.0);\n\t\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ]  * skinMat * vec4(normal,0.0)).xyz;\n\t\t}else{\n\t\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] *  vec4(normal,1.0)).xyz;\n\t\t}\n\t\t\n\t\tvVertexColor_0 = vertexColor_0;\n\t\t\n\t\tvUV = uv;\n\t\tvUV1 = uv1;\n\t\tvVertexTangent = vertexTangent;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += calcDisplacement(vNormal, vertexUniforms.displacementFlowSpeedX, vertexUniforms.displacementFlowSpeedY, vertexUniforms.displacementPower, uv, uDisplacementTexture, uDisplacementSampler);\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\t\t\n\t}\n\t`),_defineProperty(PBRMaterial_System,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.perturb_normal}\n\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n\t    float emissivePower;\n\t    float occlusionPower;\n\t    float environmentPower;\n\t    vec4 baseColorFactor;\n\t    float diffuseTexCoordIndex;\n\t    float normalTexCoordIndex;\n\t    float emissiveTexCoordIndex;\n\t    float roughnessTexCoordIndex;\n\t    float occlusionTexCoordIndex;\n\t    float metallicFactor;\n\t    float roughnessFactor;\n\t    float cutOff;\n\t    float alphaBlend;\n\t    //\n\t    float useFlatMode;\n\t    float useCutOff;\n\t    float useVertexTangent;\n\t    float useVertexColor_0;\n\t    float useMaterialDoubleSide;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __environmentTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __occlusionTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n\t\tfloat __roughnessTextureRenderYn;\n\t    \n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec4 vVertexColor_0;\n\tlayout( location = 1 ) in vec3 vNormal;\n\tlayout( location = 2 ) in vec2 vUV;\n\tlayout( location = 3 ) in vec2 vUV1;\n\tlayout( location = 4 ) in vec4 vVertexTangent;\n\tlayout( location = 5 ) in vec4 vVertexPosition;\n\tlayout( location = 6 ) in float vMouseColorID;\t\n\tlayout( location = 7 ) in float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uRoughnessSampler;\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uRoughnessTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 12 ) uniform sampler uEnvironmentSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 13 ) uniform textureCube uEnvironmentTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 14 ) uniform sampler uOcclusionSampler;\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 15 ) uniform texture2D uOcclusionTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvec2 diffuseTexCoord;\n\tvec2 normalTexCoord;\n\tvec2 emissiveTexCoord;\n\tvec2 roughnessTexCoord;\n\tvec2 occlusionTexCoord;\n\tvoid main() {\n\t\t// 인덱스 찾고\n\t\tdiffuseTexCoord = fragmentUniforms.diffuseTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\tnormalTexCoord = fragmentUniforms.normalTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\temissiveTexCoord = fragmentUniforms.emissiveTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\troughnessTexCoord = fragmentUniforms.roughnessTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\tocclusionTexCoord = fragmentUniforms.occlusionTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\t\n\t\t\n\t\tfloat tMetallicPower = fragmentUniforms.metallicFactor;\n\t\tfloat tRoughnessPower = fragmentUniforms.roughnessFactor;\n\t\t\n\t\tvec4 roughnessColor = vec4(0.0);\n\t\tif(fragmentUniforms.__roughnessTextureRenderYn == TRUTHY) {\n\t\t\troughnessColor = texture(sampler2D(uRoughnessTexture, uRoughnessSampler), roughnessTexCoord);\n\t\t\ttMetallicPower *= roughnessColor.b; // 메탈릭 산출 roughnessColor.b\n\t\t\ttRoughnessPower *= roughnessColor.g; // 거칠기 산출 roughnessColor.g\n\t\t}\n\t\t\n\t\t\n\t\n\t\tvec4 diffuseColor = fragmentUniforms.baseColorFactor;\n\t\tif(fragmentUniforms.useVertexColor_0 == TRUTHY) diffuseColor *= clamp(vVertexColor_0,0.0,1.0) ;\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor *= texture(sampler2D(uDiffuseTexture, uDiffuseSampler), diffuseTexCoord) ;\n\t\t\t\n\t\tfloat tAlpha = diffuseColor.a;\n\t\tif(fragmentUniforms.useCutOff == TRUTHY) {\n\t\t\tif(tAlpha <= fragmentUniforms.cutOff) discard;\n\t\t}\n\t\t\n\t    vec3 N = normalize(vNormal);\n\t    bool backFaceYn = false;\n\t    if(fragmentUniforms.useMaterialDoubleSide == TRUTHY) {\n\t\t    vec3 fdx = dFdx(vVertexPosition.xyz);\n\t\t\tvec3 fdy = dFdy(vVertexPosition.xyz);\n\t\t\tvec3 faceNormal = normalize(cross(fdy,fdx));\n\t\t\tif (dot (vNormal, faceNormal) < 0.0) { N = -N; backFaceYn = true; };\n\t    } \n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), normalTexCoord) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, backFaceYn ?  1.0 - normalTexCoord : normalTexCoord, vec3(normalColor.r, 1.0- normalColor.g, normalColor.b), fragmentUniforms.normalPower) ;\n\n\t\tif(fragmentUniforms.useVertexTangent == TRUTHY) {\n\t\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY){\n\t\t\t\tvec3 pos_dx = dFdx(vVertexPosition.xyz);\n\t\t\t\tvec3 pos_dy = dFdy(vVertexPosition.xyz);\n\t\t\t\tvec3 tex_dx = dFdx(vec3(normalTexCoord, 0.0));\n\t\t\t\tvec3 tex_dy = dFdy(vec3(normalTexCoord, 0.0));\n\t\t\t\tvec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n\t\t\t\tvec3 ng = normalize(vNormal);\n\t\t\t\tt = normalize(t - ng * dot(ng, t));\n\t\t\t\tvec3 b = normalize(cross(ng, t));\n\t\t\t\tmat3 tbn = mat3(t, b, ng);\n\t\t\t\tN = normalize(tbn * ((2.0 * normalColor.rgb - 1.0) * vec3(1.0, 1.0 * vVertexTangent.w,1.0)));\n\t\t\t\tN = backFaceYn ? -N : N;\n\t\t\t}\t\t\t\n\t\t}\n\n\t\tif(fragmentUniforms.__environmentTextureRenderYn == TRUTHY) {\n\t\t\t// 환경맵 계산\n\t\t\tvec3 R = reflect( vVertexPosition.xyz - systemUniforms.cameraPosition, N);\n\t\t\tvec4 reflectionColor = texture(samplerCube(uEnvironmentTexture,uEnvironmentSampler), R);\t\t\n\t\t\t// 환경맵 합성\n\t\t\tdiffuseColor.rgb = mix( diffuseColor.rgb , reflectionColor.rgb , max(tMetallicPower-tRoughnessPower,0.0)*(1.0-tRoughnessPower));\n\t\t\tdiffuseColor = mix( diffuseColor , vec4(0.04, 0.04, 0.04, 1.0) , tRoughnessPower * (tMetallicPower) * 0.5);\n\t\t}\n\t\t\n\n\n\t\n\t\toutColor = diffuseColor;\n\t\tvec4 specularLightColor = vec4(1.0, 1.0, 1.0, 1.0);\n\t    vec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\n\t    vec3 L;\t\n\n\n\t    float lambertTerm;\n\t    float intensity;\n\t    float specular;\n\n\t\tDirectionalLight lightInfo;\n\t\tvec4 lightColor;\n\t\tfor(int i=0; i<systemUniforms.directionalLightCount; i++){\n\t\t\tlightInfo = systemUniforms.directionalLightList[i];\n\t\t\tvec3 L = normalize(-lightInfo.position);\n\t\t\tfloat lambertTerm = dot(N,-L);\n\t\t\tif(lambertTerm > 0.0){\n\t\t\t\tld += lightInfo.color * diffuseColor * lambertTerm * lightInfo.intensity * lightInfo.color.a;\n\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), pow(fragmentUniforms.shininess, 1.0-tRoughnessPower+0.04) );\n\t\t\t\tspecular *= pow(1.0-tRoughnessPower+0.04, 2.0 * (1.0-tMetallicPower)) ;\n\t\t\t\tls +=  specularLightColor * specular * fragmentUniforms.metallicFactor * lightInfo.intensity * lightInfo.color.a * (1.0-tRoughnessPower+0.04);\n\t\t\t}\n\t\t}\n\t\t\n\t\t vec4 finalColor = ld + ls + la;;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\t// 이미시브 합성\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), emissiveTexCoord);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\t\t\n\t\n\t\tif(fragmentUniforms.__occlusionTextureRenderYn == TRUTHY) {\n\t\t// 오클루젼 합성\n\t\t\tvec4 occlusionColor =texture(sampler2D(uOcclusionTexture, uOcclusionSampler), occlusionTexCoord);\n\t\t\tfinalColor.rgb = mix(finalColor.rgb, finalColor.rgb * occlusionColor.r, occlusionColor.r * fragmentUniforms.occlusionPower);\n\t\t}\n\n\n\t\t// 알파블렌드 - BLEND\n\t\tif( fragmentUniforms.alphaBlend == 2.0 ) {\t\t\n\t\t\tfinalColor.a = tAlpha;\n\t\t}\n\t\toutColor = finalColor;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(PBRMaterial_System,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PBRMaterial_System,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"sampler"},{binding:2,visibility:GPUShaderStage.VERTEX,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:5,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:6,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:7,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:8,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:9,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:10,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:11,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:12,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:13,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture",textureDimension:"cube"},{binding:14,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:15,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(PBRMaterial_System,"uniformBufferDescriptor_vertex",[{size:128*Ee.mat4,valueName:"jointMatrix"},{size:128*Ee.mat4,valueName:"inverseBindMatrixForJoint"},{size:Ee.mat4,valueName:"globalTransformOfNodeThatTheMeshIsAttachedTo"},{size:Ee.float,valueName:"displacementFlowSpeedX"},{size:Ee.float,valueName:"displacementFlowSpeedY"},{size:Ee.float,valueName:"displacementPower"},{size:Ee.float,valueName:"__displacementTextureRenderYn"},{size:Ee.float,valueName:"useSkin"}]),_defineProperty(PBRMaterial_System,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"normalPower"},{size:Ee.float,valueName:"shininess"},{size:Ee.float,valueName:"emissivePower"},{size:Ee.float,valueName:"occlusionPower"},{size:Ee.float,valueName:"environmentPower"},{size:Ee.float4,valueName:"baseColorFactor"},{size:Ee.float,valueName:"diffuseTexCoordIndex"},{size:Ee.float,valueName:"normalTexCoordIndex"},{size:Ee.float,valueName:"emissiveTexCoordIndex"},{size:Ee.float,valueName:"roughnessTexCoordIndex"},{size:Ee.float,valueName:"occlusionTexCoordIndex"},{size:Ee.float,valueName:"metallicFactor"},{size:Ee.float,valueName:"roughnessFactor"},{size:Ee.float,valueName:"cutOff"},{size:Ee.float,valueName:"alphaBlend"},{size:Ee.float,valueName:"useFlatMode"},{size:Ee.float,valueName:"useCutOff"},{size:Ee.float,valueName:"useVertexTangent"},{size:Ee.float,valueName:"useVertexColor_0"},{size:Ee.float,valueName:"useMaterialDoubleSide"},{size:Ee.float,valueName:"__diffuseTextureRenderYn"},{size:Ee.float,valueName:"__environmentTextureRenderYn"},{size:Ee.float,valueName:"__normalTextureRenderYn"},{size:Ee.float,valueName:"__occlusionTextureRenderYn"},{size:Ee.float,valueName:"__emissiveTextureRenderYn"},{size:Ee.float,valueName:"__roughnessTextureRenderYn"}]);class InterleaveInfo{constructor(t,e){this.attributeHint=t,this.format=e,this.stride=Ee[e]}}class baseGeometry extends UUID{get volume(){return this._volume||this.volumeCalculate(),this._volume}constructor(){super(),_defineProperty(this,"_volume",void 0)}volumeCalculate(){let t,e,r,n,a,s,l,u,c,h,p,v,S=this.interleaveBuffer.stride;for(t=e=r=n=a=s=0,h=this.interleaveBuffer.data,p=0,v=this.interleaveBuffer.vertexCount;p<v;p++)l=p*S,u=l+1,c=l+2,t=h[l]<t?h[l]:t,n=h[l]>n?h[l]:n,e=h[u]<e?h[u]:e,a=h[u]>a?h[u]:a,r=h[c]<r?h[c]:r,s=h[c]>s?h[c]:s;return this._volume={},this._volume.volume=[n-t,a-e,s-r],this._volume.minX=t,this._volume.maxX=n,this._volume.minY=e,this._volume.maxY=a,this._volume.minZ=r,this._volume.maxZ=s,this._volume.xSize=Math.max(Math.abs(t),Math.abs(n)),this._volume.ySize=Math.max(Math.abs(e),Math.abs(a)),this._volume.zSize=Math.max(Math.abs(r),Math.abs(s)),this._volume.geometryRadius=Math.max(this._volume.xSize,this._volume.ySize,this._volume.zSize),this._volume}}class Geometry extends baseGeometry{constructor(t,e,r){super(),_defineProperty(this,"interleaveBuffer",void 0),_defineProperty(this,"indexBuffer",void 0),_defineProperty(this,"vertexState",void 0),this.interleaveBuffer=e,this.indexBuffer=r;let n=0,a=[];e.interleaveInfo.forEach((function(t,e){a.push({attributeHint:t.attributeHint,shaderLocation:e,offset:n,format:t.format}),n+=t.stride})),this.vertexState={indexFormat:"uint32",vertexBuffers:[{arrayStride:n,attributes:a}]},this.volumeCalculate()}}class Buffer extends UUID{constructor(t,e,r,n,a,s){if(super(),_defineProperty(this,"type",void 0),_defineProperty(this,"vertexCount",void 0),_defineProperty(this,"bufferDescriptor",void 0),_defineProperty(this,"GPUBuffer",void 0),t.state.Buffer[r].has(e))return t.state.Buffer[r].get(e);let l;switch(this.type=r,this.vertexCount=0,this.stride=0,r){case Buffer.TYPE_VERTEX:l=s||GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,this.interleaveInfo=a,a.forEach(t=>{this.vertexCount+=t.stride/Float32Array.BYTES_PER_ELEMENT,this.stride+=t.stride/Float32Array.BYTES_PER_ELEMENT}),this.vertexCount=n.length/this.vertexCount;break;case Buffer.TYPE_INDEX:l=s||GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST,this.indexNum=n.length}this.bufferDescriptor={size:n.byteLength,usage:l},this.data=n,this.GPUBuffer=t.device.createBuffer(this.bufferDescriptor),this.GPUBuffer.setSubData(0,n),t.state.Buffer[r].set(e,this)}update(t){this.data=t,this.GPUBuffer.setSubData(0,new Float32Array(t))}destroy(){this.GPUBuffer&&this.GPUBuffer.destroy(),this.GPUBuffer=null}}_defineProperty(Buffer,"TYPE_VERTEX","vertexBuffer"),_defineProperty(Buffer,"TYPE_INDEX","indexBuffer");let makeInterleaveData_GLTF=function(t,e,r,n,a,s,l,u,c){let h=0,p=e.length/3,v=0;for(;h<p;h++)e.length&&(t[v++]=e[3*h+0],t[v++]=e[3*h+1],t[v++]=e[3*h+2]),n.length?(t[v++]=n[3*h+0],t[v++]=n[3*h+1],t[v++]=n[3*h+2]):(t[v++]=0,t[v++]=0,t[v++]=0),a.length||a.push(0,0),a.length&&(t[v++]=a[2*h+0],t[v++]=a[2*h+1]),s.length?(t[v++]=s[2*h+0],t[v++]=s[2*h+1]):a.length&&(t[v++]=a[2*h+0],t[v++]=a[2*h+1]),r.length?(t[v++]=r[4*h+0],t[v++]=r[4*h+1],t[v++]=r[4*h+2],t[v++]=r[4*h+3]):(t[v++]=0,t[v++]=0,t[v++]=0,t[v++]=0),l.length?(t[v++]=l[4*h+0],t[v++]=l[4*h+1],t[v++]=l[4*h+2],t[v++]=l[4*h+3]):(t[v++]=0,t[v++]=0,t[v++]=0,t[v++]=0),u.length?(t[v++]=u[4*h+0],t[v++]=u[4*h+1],t[v++]=u[4*h+2],t[v++]=u[4*h+3]):(t[v++]=0,t[v++]=0,t[v++]=0,t[v++]=0),c.length?(t[v++]=c[4*h+0],t[v++]=c[4*h+1],t[v++]=c[4*h+2],t[v++]=c[4*h+3]):(t[v++]=0,t[v++]=0,t[v++]=0,t[v++]=0)},parseAttributeInfo_GLTF=function(t,e,r,n,a,s,l,u,c,h,p,v){let S,y=n.componentType_BYTES_PER_ELEMENT,G=n.bufferViewByteStride,U=n.bufferURIDataView,b=n.getMethod,E=n.accessor.type,C=n.accessor.count,I=0,N=G/y,$=n.startIndex;switch(E){case"VEC4":if(G)for(S=$+C*(G/y);$<S;$++)I%N<4&&("WEIGHTS_0"==r?c.push(U[b]($*y,!0)):"JOINTS_0"==r?h.push(U[b]($*y,!0)):"COLOR_0"==r?p.push(U[b]($*y,!0)):"TANGENT"==r&&v.push(U[b]($*y,!0))),I++;else for(S=$+4*C;$<S;$++)"WEIGHTS_0"==r?c.push(U[b]($*y,!0)):"JOINTS_0"==r?h.push(U[b]($*y,!0)):"COLOR_0"==r?p.push(U[b]($*y,!0)):"TANGENT"==r&&v.push(U[b]($*y,!0)),I++;break;case"VEC3":if(G)for(S=$+C*(G/y);$<S;$++)I%N<3&&("NORMAL"==r?u.push(U[b]($*y,!0)):"POSITION"==r?a.push(U[b]($*y,!0)):"COLOR_0"==r&&(p.push(U[b]($*y,!0)),I%N==2&&p.push(1))),I++;else for(S=$+3*C;$<S;$++)"NORMAL"==r?u.push(U[b]($*y,!0)):"POSITION"==r?a.push(U[b]($*y,!0)):"COLOR_0"==r&&(p.push(U[b]($*y,!0)),I%3==2&&p.push(1)),I++;break;case"VEC2":if(G)for(S=$+C*(G/y);$<S;$++)I%N<2&&("TEXCOORD_0"==r?s.push(U[b]($*y,!0)):"TEXCOORD_1"==r?l.push(U[b]($*y,!0)):Fe.throwFunc("VEC2에서 현재 지원하고 있지 않는 키",r)),I++;else for(S=$+2*C;$<S;$++)"TEXCOORD_0"==r?s.push(U[b]($*y,!0)):"TEXCOORD_1"==r?l.push(U[b]($*y,!0)):Fe.throwFunc("VEC2에서 현재 지원하고 있지 않는 키",r),I++}},vi=function(){let getURL=function(t,e,r){return e.images[r].uri.indexOf("blob:http")>-1?e.images[r].uri:(e.images[r].uri.indexOf(";base64,")>-1?"":t.path)+e.images[r].uri},getSamplerInfo=function(t,e,r){let n={magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"repeat",addressModeV:"repeat",addressModeW:"repeat"},a={33071:"clamp-to-edge",33648:"mirror-repeat",10497:"repeat"},s={9728:"nearest",9729:"linear"},l={9728:"nearest",9729:"linear"};if(e.samplers){let t=e.samplers[r];"magFilter"in t&&(n.magFilter=s[t.magFilter]||"linear"),"minFilter"in t&&(n.minFilter=l[t.minFilter]||"linear"),"wrapS"in t&&(n.addressModeU=a[t.wrapS]),"wrapT"in t&&(n.addressModeV=a[t.wrapT])}return n.string=JSON.stringify(n),n};return function(t,e,r){let n,a,s=!1,l=.5;if("material"in r){let u=t.environmentTexture;n=new PBRMaterial_System(t.redGPUContext,null,u,null,null,null,null);let c=r.material,h=e.materials[c];if("doubleSided"in h&&(s=!!h.doubleSided),"alphaMode"in h&&(a=h.alphaMode),"alphaCutoff"in h&&(l=h.alphaCutoff),"baseColorTexture"in h.pbrMetallicRoughness){let r=h.pbrMetallicRoughness.baseColorTexture.index,a=e.textures[r],s=a.source,l=getURL(t,e,s),u=a.sampler,c=getSamplerInfo(0,e,u);t.parsingResult.textureRawList.push({src:l,sampler:new Sampler(t.redGPUContext,c),targetTexture:"diffuseTexture",targetMaterial:n})}if("metallicRoughnessTexture"in h.pbrMetallicRoughness){let r=h.pbrMetallicRoughness.metallicRoughnessTexture.index,a=e.textures[r],s=a.source,l=getURL(t,e,s),u=a.sampler,c=getSamplerInfo(0,e,u);t.parsingResult.textureRawList.push({src:l,sampler:new Sampler(t.redGPUContext,c),targetTexture:"roughnessTexture",targetMaterial:n})}let p=h.normalTexture;if(null!=p){p=p.index;let r=e.textures[p],a=r.source,s=getURL(t,e,a),l=r.sampler,u=getSamplerInfo(0,e,l);t.parsingResult.textureRawList.push({src:s,sampler:new Sampler(t.redGPUContext,u),targetTexture:"normalTexture",targetMaterial:n})}let v=h.emissiveTexture;if(null!=v){v=v.index;let r=e.textures[v],a=r.source,s=getURL(t,e,a),l=r.sampler,u=getSamplerInfo(0,e,l);t.parsingResult.textureRawList.push({src:s,sampler:new Sampler(t.redGPUContext,u),targetTexture:"emissiveTexture",targetMaterial:n})}let S,y,G,U=h.occlusionTexture;if(null!=U){U=U.index;let r=e.textures[U],a=r.source,s=getURL(t,e,a),l=r.sampler,u=getSamplerInfo(0,e,l);t.parsingResult.textureRawList.push({src:s,sampler:new Sampler(t.redGPUContext,u),targetTexture:"occlusionTexture",targetMaterial:n})}"metallicFactor"in h.pbrMetallicRoughness&&(S=h.pbrMetallicRoughness.metallicFactor),"roughnessFactor"in h.pbrMetallicRoughness&&(y=h.pbrMetallicRoughness.roughnessFactor),G=h.pbrMetallicRoughness&&h.pbrMetallicRoughness.baseColorFactor?h.pbrMetallicRoughness.baseColorFactor:[1,1,1,1],n.baseColorFactor=G,h.pbrMetallicRoughness&&(n.metallicFactor=null!=S?S:1,n.roughnessFactor=null!=y?y:1),n.emissiveFactor=null!=h.emissiveFactor?h.emissiveFactor:new Float32Array([1,1,1]),h.pbrMetallicRoughness&&(h.pbrMetallicRoughness.metallicRoughnessTexture&&(n.roughnessTexCoordIndex=h.pbrMetallicRoughness.metallicRoughnessTexture.texCoord||0),h.pbrMetallicRoughness.baseColorTexture&&(n.diffuseTexCoordIndex=h.pbrMetallicRoughness.baseColorTexture.texCoord||0)),h.occlusionTexture&&(n.occlusionTexCoordIndex=h.occlusionTexture.texCoord||0,n.occlusionPower=h.occlusionTexture.strength||1),h.emissiveTexture&&(n.emissiveTexCoordIndex=h.emissiveTexture.texCoord||0),h.normalTexture&&(n.normalTexCoordIndex=h.normalTexture.texCoord||0)}else{let e=[Math.random(),Math.random(),Math.random(),1];n=new PBRMaterial_System(t.redGPUContext),n.baseColorFactor=e}return[n,s,a,l]}}(),parseSparse_GLTF=function(t,e,r,n,a,s,l,u,c,h){if(r.sparse){let s=[],l=[],u=[];!function(){let a,c,h,p,v,S=r.sparse,y=S.values,G=n.bufferViews[y.bufferView],U=G.buffer;n.buffers[U].uri&&(a=t.parsingResult.uris.buffers[U]),p=oi[r.componentType],p==Float32Array&&(v="getFloat32"),p==Uint32Array&&(v="getUint32"),p==Uint16Array&&(v="getUint16"),p==Int16Array&&(v="getInt16"),p==Uint8Array&&(v="getUint8"),p==Int8Array&&(v="getInt8");let b=r.byteOffset||0;switch(c=((G.byteOffset||0)+b)/p.BYTES_PER_ELEMENT,r.type){case"VEC3":for(h=c+p.BYTES_PER_ELEMENT*S.count/p.BYTES_PER_ELEMENT*3;c<h;c++)"NORMAL"==e?l.push(a[v](c*p.BYTES_PER_ELEMENT,!0)):"POSITION"==e&&s.push(a[v](c*p.BYTES_PER_ELEMENT,!0));break;case"VEC2":for(h=c+p.BYTES_PER_ELEMENT*S.count/p.BYTES_PER_ELEMENT*2;c<h;c++)"TEXCOORD_0"==e&&u.push(a[v](c*p.BYTES_PER_ELEMENT,!0))}}();let c,h,p,v,S,y=r.sparse,G=y.indices,U=n.bufferViews[G.bufferView],b=U.buffer;n.buffers[b].uri&&(c=t.parsingResult.uris.buffers[b]),v=oi[G.componentType],v==Uint16Array?S="getUint16":v==Uint8Array&&(S="getUint8");let E=G.byteOffset||0;h=((U.byteOffset||0)+E)/v.BYTES_PER_ELEMENT,p=h+v.BYTES_PER_ELEMENT*y.count/v.BYTES_PER_ELEMENT;let C=0;for(;h<p;h++){let t=c[S](h*v.BYTES_PER_ELEMENT,!0);a[3*t]=s[3*C],a[3*t+1]=s[3*C+1],a[3*t+2]=s[3*C+2],C++}}};class MorphInfo_GLTF{constructor(t,e,r,n){let a=[];r.targets&&r.targets.forEach((function(r){let n={vertices:[],verticesColor_0:[],normals:[],uvs:[],uvs1:[],jointWeights:[],joints:[],tangents:[]};a.push(n);for(let a in r){let s=n.vertices,l=n.verticesColor_0,u=n.normals,c=n.uvs,h=n.uvs1,p=n.jointWeights,v=n.joints,S=n.tangents,y=r[a],G=new AccessorInfo_GLTF(t,e,y);parseAttributeInfo_GLTF(0,0,a,G,s,c,h,u,p,v,l,S),G.accessor.sparse&&parseSparse_GLTF(t,a,G.accessor,e,s)}})),this.list=a,a.weights=n||[],this.origin=null}}let parseNode_GLTF=function(t,e,r,n,a){if("mesh"in n){let r=n.mesh;(function(t,e,r){let n,a,s,l;r.name&&(n=r.name);let u=[];return r.primitives.forEach((function(c,h){let p,v,S,y,G=[],U=[],b=[],E=[],C=[],I=[],N=[],$=[],k=[];if(c.attributes)for(let r in c.attributes){let n=c.attributes[r],a=new AccessorInfo_GLTF(t,e,n);parseAttributeInfo_GLTF(0,0,r,a,U,E,C,I,N,$,b,k),a.accessor.sparse&&parseSparse_GLTF(t,r,a.accessor,e,U)}if("indices"in c){let r=c.indices;!function(t,e,r,n){let a,s=r.componentType_BYTES_PER_ELEMENT,l=r.bufferURIDataView,u=r.getMethod,c=r.accessor.type,h=r.accessor.count,p=r.startIndex;switch(c){case"SCALAR":for(a=p+h;p<a;p++)n.push(l[u](p*s,!0))}}(0,0,new AccessorInfo_GLTF(t,e,r),G)}if(v=vi(t,e,c),a=v[1],s=v[2],l=v[3],v=v[0],v instanceof PBRMaterial_System&&t.parsingResult.materials.push(v),"mode"in c)switch(c.mode){case 0:S="point-list";break;case 1:case 2:S="line-list";break;case 3:S="line-strip";break;case 4:S="triangle-list";break;case 5:case 6:S="triangle-strip"}y=I.length?I:Fe.calculateNormals(U,G);let W,H=[];makeInterleaveData_GLTF(H,U,b,y,E,C,N,$,k);let q=[];if(U.length&&q.push(new InterleaveInfo("aVertexPosition","float3")),y.length&&q.push(new InterleaveInfo("aVertexNormal","float3")),E.length&&q.push(new InterleaveInfo("aTexcoord","float2")),(C.length||E.length)&&q.push(new InterleaveInfo("aTexcoord1","float2")),q.push(new InterleaveInfo("aVertexColor_0","float4")),q.push(new InterleaveInfo("aVertexWeight","float4")),q.push(new InterleaveInfo("aVertexJoint","float4")),q.push(new InterleaveInfo("aVertexTangent","float4")),W=new Geometry(t.redGPUContext,new Buffer(t.redGPUContext,"testGLTF_interleaveBuffer_"+UUID.getNextUUID(),Buffer.TYPE_VERTEX,new Float32Array(H),q),G.length?new Buffer(t.redGPUContext,"testGLTF_indexBuffer_"+UUID.getNextUUID(),Buffer.TYPE_INDEX,new Uint32Array(G)):null),v||Fe.throwFunc("재질을 파싱할수없는경우 ",c),p=new Mesh(t.redGPUContext,W,v),n&&(p.name=n,t.parsingOption))for(let e in t.parsingOption)n.toLowerCase().indexOf(e)>-1&&t.parsingOption[e](p);switch(p.primitiveTopology=S||"triangle-list",a&&(p.cullMode="none",v.useMaterialDoubleSide=!0),s){case"BLEND":p.renderDrawLayerIndex=Render.DRAW_LAYER_INDEX1,v.alphaBlend=2;break;case"MASK":v.alphaBlend=1,v.cutOff=l,v.useCutOff=!0;break;default:v.alphaBlend=0,v.useCutOff=!1}b.length&&(v.useVertexColor_0=!0),k.length&&(v.useVertexTangent=!0);let J=new MorphInfo_GLTF(t,e,c,r.weights);J.list.forEach((function(t){let e;e=t.normals.length?t.normals:Fe.calculateNormals(t.vertices,G);let r=[];makeInterleaveData_GLTF(r,t.vertices,t.verticesColor_0,e,t.uvs,t.uvs1,t.jointWeights,t.joints,t.tangents),t.interleaveData=r})),p._morphInfo=J,p._morphInfo.origin=new Float32Array(H);let K=p.geometry.interleaveBuffer.data,pt=0;q.forEach((function(t){pt+=t.size})),p._morphInfo.list.forEach((function(t,e){let r=0,n=K.length/pt,a=null==p._morphInfo.list.weights[e]?.5:p._morphInfo.list.weights[e];for(;r<n;r++)K[r*pt+0]+=t.vertices[3*r+0]*a,K[r*pt+1]+=t.vertices[3*r+1]*a,K[r*pt+2]+=t.vertices[3*r+2]*a})),p.geometry.interleaveBuffer.update(K),p._morphInfo.origin=new Float32Array(K),c.Mesh=p,u.push(p)})),u})(t,e,e.meshes[r]).forEach((function(r){a.addChild(n.Mesh=r),di(r,n),"children"in n&&n.children.forEach((function(n){parseNode_GLTF(t,e,n,e.nodes[n],r)})),"skin"in n&&parseSkin_GLTF(t,e,e.skins[n.skin],r)}))}else{let s;if(t.parsingResult.groups[r]?(s=t.parsingResult.groups[r],n.Mesh=s):(s=new Mesh(t.redGPUContext),a.addChild(s),n.Mesh=s,t.parsingResult.groups[r]=s,t.parsingResult.groups[r].name=n.name),di(s,n),"camera"in n){t.parsingResult.cameras[n.camera]._parentMesh=a,t.parsingResult.cameras[n.camera]._targetMesh=s;let e=new Mesh(t.redGPUContext);s.addChild(e),t.parsingResult.cameras[n.camera]._cameraMesh=e}"children"in n&&n.children.forEach((function(r){parseNode_GLTF(t,e,r,e.nodes[r],s)})),"skin"in n&&parseSkin_GLTF(t,e,e.skins[n.skin],s)}},parseScene_GLTF=function(t,e,r){let n,a,s,l;s=e.scenes[0].nodes,n=0,a=s.length;let parse=function(){l=s[n],parseNode_GLTF(t,e,l,e.nodes[l],t.resultMesh),n++,n===a?r&&r():parse()};parse()};var gi;!function(){var t,e,r=(e={},function(t,r,n,a){if(e[t])requestAnimationFrame((function(){n(e[t])}));else{var s=new XMLHttpRequest;s.open("GET",t,!0),s.onreadystatechange=function(r){4===s.readyState&&200===s.status?(e[t]=s,n(s)):a(s,r)},s.send()}}),n=function(){var t={};return function(e,r,n){if(t[e])requestAnimationFrame((function(){r(t[e])}));else{var a=new XMLHttpRequest;a.open("GET",e,!0),a.overrideMimeType("application/octet-stream"),a.responseType="arraybuffer",a.onreadystatechange=function(s){4===a.readyState&&200===a.status?(t[e]=a,r(a)):n(a,s)},a.send()}}}();gi=function(e,a,s,u,c,h){if(!(this instanceof gi))return new gi(e,a,s,u,c,h);this.redGPUContext=e;var p=this;if(s.indexOf(".glb")>-1){var v;v=function(t){var e="";return t.map((function(t){e+=String.fromCharCode(t)})),e},n(a+s,(function(r){for(var n=null,a=null,s=null,l=null,c=0,h=0,S=null,y=new DataView(r.response,12),G=(v(new Uint8Array(r.response,0,4)),y.getUint32(4,!0),y.getUint32(8,!0),new DataView(r.response,12));c<G.byteLength;)h=G.getUint32(c,!0),c+=4,S=G.getUint32(c,!0),c+=4,1313821514===S?(a=new Uint8Array(r.response,12+c,h),n=v(a)):5130562===S&&(l=12+c,s=r.response.slice(l,l+h)),c+=h;if(null===n)throw new Error("JSON content not found");var U=JSON.parse(n),b=s;U.images&&U.images.forEach((function(t){if("image/png"===t.mimeType||"image/jpeg"===t.mimeType||"image/gif"===t.mimeType){var e;e=U.bufferViews[t.bufferView].byteOffset||0;var r=b.slice(e,e+U.bufferViews[t.bufferView].byteLength),n=new Blob([new Uint8Array(r)],{type:t.mimeType});t.uri=URL.createObjectURL(n)}})),t(p,e,U,(function(){u&&u(p)}),b)}),(function(t,e){}))}else r(a+s,null,(function(r){t(p,e,JSON.parse(r.response),(function(){u&&u(p)}))}),(function(t,e){}));this.redGPUContext=e,this.path=a,this.fileName=s,this.resultMesh=new Mesh(e),this.resultMesh.name="instanceOfGLTFLoader_"+UUID.getNextUUID(),this.parsingResult={groups:[],materials:[],uris:{buffers:[]},textures:{},textureRawList:[],cameras:[],animations:[]},this.parsingOption=h,this.environmentTexture=c||null;var S=null;this.stopAnimation=function(){l.indexOf(S)>-1&&l.splice(l.indexOf(S),1)},this.playAnimation=function(t){l.push(S={startTime:performance.now(),targetAnimationData:t})}};var a,s,l=[];gi.animationLooper=t=>function gltfAnimationLooper(t,e){let r,n,a,s,l,u,c,h,p,v,S,y,G,U,b,E,C,I,N,$,k,W,H,q,J,K,pt,_t,gt,yt,Pt,Gt,Ut,Bt,wt,Rt,Ct,Nt,At,Yt,Xt,zt,$t,kt,Wt,Zt,Ht,qt,Qt,Jt,Kt,te,ee,re,ie,ne,ae,oe,se,le,ue=e.length;for(;ue--;)for(yt=e[ue],_t=yt.targetAnimationData,Pt=_t.length;Pt--;){for(Gt=_t[Pt],r=(t-yt.startTime)%(1e3*_t.maxTime)/1e3,Ut=Gt.target,Rt=Gt.time,Ct=Gt.time,Nt=Rt.length,At=0,wt=Rt.length-1,Bt=0,n=Rt[wt],a=Rt[Bt];At<Nt;At++){let t=Rt[At];if(t<r&&(wt=At,n=Rt[wt],null==Rt[wt+1]?(Bt=0,a=Rt[Bt]):(Bt=wt+1,a=Rt[Bt])),0==At&&r<Rt[At]){wt=Nt-1,n=Rt[wt],Bt=At,a=Rt[Bt],r=t;break}if(At==Nt-1&&r>t){wt=0,n=Rt[wt],Bt=Nt-1,a=Rt[Bt],r=t;break}}if(Ut&&(Ut.dirtyTransform=!0),"CUBICSPLINE"==Gt.interpolation){gt=a-n,"NaN"==gt.toString()&&(gt=0);let t=(r-n)/gt;"NaN"==t.toString()&&(t=0);let e=t*t,_t=e*t,yt=-2*_t+3*e,Pt=_t-e,Rt=1-yt,At=Pt-e+t;if(Ut){let t,e,r,n,a=Gt.data;switch(Gt.key){case"rotation":if(H=a[12*wt+4],q=a[12*wt+5],J=a[12*wt+6],K=a[12*wt+7],pt=H*H+q*q+J*J+K*K,pt>0&&(pt=1/Math.sqrt(pt)),b=H*pt,E=q*pt,C=J*pt,I=K*pt,H=a[12*Bt+4],q=a[12*Bt+5],J=a[12*Bt+6],K=a[12*Bt+7],pt=H*H+q*q+J*J+K*K,pt>0&&(pt=1/Math.sqrt(pt)),s=H*pt,l=q*pt,u=J*pt,c=K*pt,H=a[12*wt+8],q=a[12*wt+9],J=a[12*wt+10],K=a[12*wt+11],pt=H*H+q*q+J*J+K*K,pt>0&&(pt=1/Math.sqrt(pt)),N=H*pt,$=q*pt,k=J*pt,W=K*pt,H=a[12*wt+0],q=a[12*wt+1],J=a[12*wt+2],K=a[12*wt+3],pt=H*H+q*q+J*J+K*K,pt>0&&(pt=1/Math.sqrt(pt)),S=H*pt,y=q*pt,G=J*pt,U=K*pt,wt!=Nt-1){t=b,e=N*gt,r=s,n=S*gt,H=Rt*t+At*e+yt*r+Pt*n,t=E,e=$*gt,r=l,n=y*gt,q=Rt*t+At*e+yt*r+Pt*n,t=C,e=k*gt,r=u,n=G*gt,J=Rt*t+At*e+yt*r+Pt*n,t=I,e=W*gt,r=c,n=U*gt,K=Rt*t+At*e+yt*r+Pt*n;let a=[],h=[0,0,0],p=H+H,v=q+q,pt=J+J,_t=H*p,Gt=H*v,Bt=H*pt,wt=q*v,Ct=q*pt,Nt=J*pt,Yt=K*p,Xt=K*v,zt=K*pt;a[0]=1-(wt+Nt),a[4]=Gt-zt,a[8]=Bt+Xt,a[1]=Gt+zt,a[5]=1-(_t+Nt),a[9]=Ct-Yt,a[2]=Bt-Xt,a[6]=Ct+Yt,a[10]=1-(_t+wt),a[3]=0,a[7]=0,a[11]=0,a[12]=0,a[13]=0,a[14]=0,a[15]=1;let $t=a[0],kt=a[4],Wt=a[8],Zt=a[5],Ht=a[9],qt=a[6],Qt=a[10];h[1]=Math.asin(Math.max(-1,Math.min(1,Wt))),Math.abs(Wt)<.99999?(h[0]=Math.atan2(-Ht,Qt),h[2]=Math.atan2(-kt,$t)):(h[0]=Math.atan2(qt,Zt),h[2]=0),h[0]=-180*h[0]/Math.PI,h[1]=-180*h[1]/Math.PI,h[2]=-180*h[2]/Math.PI,Ut._rotationX=h[0],Ut._rotationY=h[1],Ut._rotationZ=h[2]}break;case"translation":s=a[9*wt+3],l=a[9*wt+4],u=a[9*wt+5],b=a[9*Bt+3],E=a[9*Bt+4],C=a[9*Bt+5],N=a[9*wt+6],$=a[9*wt+7],k=a[9*wt+8],h=a[9*Bt+0],p=a[9*Bt+1],v=a[9*Bt+2],wt!=Nt-1&&(t=b,e=N*gt,r=s,n=h*gt,Ut._x=Rt*t+At*e+yt*r+Pt*n,t=E,e=$*gt,r=l,n=p*gt,Ut._y=Rt*t+At*e+yt*r+Pt*n,t=C,e=k*gt,r=u,n=v*gt,Ut._z=Rt*t+At*e+yt*r+Pt*n);break;case"scale":s=a[9*wt+3],l=a[9*wt+4],u=a[9*wt+5],b=a[9*Bt+3],E=a[9*Bt+4],C=a[9*Bt+5],N=a[9*wt+6],$=a[9*wt+7],k=a[9*wt+8],h=a[9*Bt+0],p=a[9*Bt+1],v=a[9*Bt+2],wt!=Nt-1&&(t=b,e=N*gt,r=s,n=h*gt,Ut._scaleX=Rt*t+At*e+yt*r+Pt*n,t=E,e=$*gt,r=l,n=p*gt,Ut._scaleY=Rt*t+At*e+yt*r+Pt*n,t=C,e=k*gt,r=u,n=v*gt,Ut._scaleZ=Rt*t+At*e+yt*r+Pt*n);break;case"weights":for(Yt=Gt.targets.length;Yt--;){let t;for(Xt=Gt.targets[Yt],zt=Xt.geometry.interleaveBuffer.data,$t=Xt._morphInfo.origin,kt=Xt.geometry.interleaveBuffer.stride,Zt=zt.length/kt,re=Xt._morphInfo.list.length,Ct=Gt.data,ie=Xt._morphInfo.list,ie.cacheData||(ie.cacheData={}),Wt=0;Wt<Zt;Wt++){if(ee=Wt*kt,le=ie.cacheData[ee+"_"+wt+"_"+Bt],le)Ht=le[0],qt=le[1],Qt=le[2],Jt=le[3],Kt=le[4],te=le[5];else{for(Ht=$t[ee],qt=$t[ee],Qt=$t[ee+1],Jt=$t[ee+1],Kt=$t[ee+2],te=$t[ee+2],ne=re;ne--;)ne%3==1&&(ae=Ct[wt*re+ne],oe=Ct[Bt*re+ne],se=ie[ne].interleaveData,t=se[ee],Ht+=ae*t,qt+=oe*t,t=se[ee+1],Qt+=ae*t,Jt+=oe*t,t=se[ee+2],Kt+=ae*t,te+=oe*t);ie.cacheData[ee+"_"+wt+"_"+Bt]=[Ht,qt,Qt,Jt,Kt,te]}zt[ee]=Ht+gt*(qt-Ht),zt[ee+1]=Qt+gt*(Jt-Qt),zt[ee+2]=Kt+gt*(te-Kt)}Xt.geometry.interleaveBuffer.update(zt)}}}}else if(gt="STEP"==Gt.interpolation?0:(r-n)/(a-n),"NaN"==gt.toString()&&(gt=0),Ut){let t=Gt.data;switch(Gt.key){case"rotation":let e,r,n,a,h;H=t[4*wt],q=t[4*wt+1],J=t[4*wt+2],K=t[4*wt+3],pt=H*H+q*q+J*J+K*K,pt>0&&(pt=1/Math.sqrt(pt)),b=H*pt,E=q*pt,C=J*pt,I=K*pt,H=t[4*Bt],q=t[4*Bt+1],J=t[4*Bt+2],K=t[4*Bt+3],pt=H*H+q*q+J*J+K*K,pt>0&&(pt=1/Math.sqrt(pt)),s=H*pt,l=q*pt,u=J*pt,c=K*pt,r=b*s+E*l+C*u+I*c,r<0&&(r=-r,s=-s,l=-l,u=-u,c=-c),1-r>Ue.glMatrix.EPSILON?(e=Math.acos(r),n=Math.sin(e),a=Math.sin((1-gt)*e)/n,h=Math.sin(gt*e)/n):(a=1-gt,h=gt),H=a*b+h*s,q=a*E+h*l,J=a*C+h*u,K=a*I+h*c;let p=[],v=[0,0,0],S=H+H,y=q+q,G=J+J,U=H*S,N=H*y,$=H*G,k=q*y,W=q*G,_t=J*G,yt=K*S,Pt=K*y,Rt=K*G;p[0]=1-(k+_t),p[4]=N-Rt,p[8]=$+Pt,p[1]=N+Rt,p[5]=1-(U+_t),p[9]=W-yt,p[2]=$-Pt,p[6]=W+yt,p[10]=1-(U+k),p[3]=0,p[7]=0,p[11]=0,p[12]=0,p[13]=0,p[14]=0,p[15]=1;let Nt=p[0],At=p[4],ue=p[8],fe=p[5],me=p[9],ce=p[6],he=p[10];v[1]=Math.asin(Math.max(-1,Math.min(1,ue))),Math.abs(ue)<.99999?(v[0]=Math.atan2(-me,he),v[2]=Math.atan2(-At,Nt)):(v[0]=Math.atan2(ce,fe),v[2]=0),v[0]=-180*v[0]/Math.PI,v[1]=-180*v[1]/Math.PI,v[2]=-180*v[2]/Math.PI,Ut._rotationX=v[0],Ut._rotationY=v[1],Ut._rotationZ=v[2];break;case"translation":s=t[3*Bt],l=t[3*Bt+1],u=t[3*Bt+2],b=t[3*wt],E=t[3*wt+1],C=t[3*wt+2],Ut._x=b+gt*(s-b),Ut._y=E+gt*(l-E),Ut._z=C+gt*(u-C);break;case"scale":s=t[3*Bt],l=t[3*Bt+1],u=t[3*Bt+2],b=t[3*wt],E=t[3*wt+1],C=t[3*wt+2],Ut._scaleX=b+gt*(s-b),Ut._scaleY=E+gt*(l-E),Ut._scaleZ=C+gt*(u-C);break;case"weights":for(Yt=Gt.targets.length;Yt--;){let t;for(Xt=Gt.targets[Yt],zt=Xt.geometry.interleaveBuffer.data,$t=Xt._morphInfo.origin,kt=Xt.geometry.interleaveBuffer.stride,Zt=zt.length/kt,re=Xt._morphInfo.list.length,Ct=Gt.data,ie=Xt._morphInfo.list,ie.cacheData||(ie.cacheData={}),Wt=0;Wt<Zt;Wt++){if(ee=Wt*kt,le=ie.cacheData[ee+"_"+wt+"_"+Bt],le)Ht=le[0],qt=le[1],Qt=le[2],Jt=le[3],Kt=le[4],te=le[5];else{for(Ht=$t[ee],qt=$t[ee],Qt=$t[ee+1],Jt=$t[ee+1],Kt=$t[ee+2],te=$t[ee+2],ne=re;ne--;)ae=Ct[wt*re+ne],oe=Ct[Bt*re+ne],se=ie[ne].interleaveData,t=se[ee],Ht+=ae*t,qt+=oe*t,t=se[ee+1],Qt+=ae*t,Jt+=oe*t,t=se[ee+2],Kt+=ae*t,te+=oe*t;ie.cacheData[ee+"_"+wt+"_"+Bt]=[Ht,qt,Qt,Jt,Kt,te]}zt[ee]=Ht+gt*(qt-Ht),zt[ee+1]=Qt+gt*(Jt-Qt),zt[ee+2]=Kt+gt*(te-Kt)}Xt.geometry.interleaveBuffer.update(zt)}}}}}(t,l),a=function(t){void 0===t.asset&&Fe.throwFunc("GLTFLoader - asset은 반드시 정의되어야함"),t.asset.version[0]<2&&Fe.throwFunc("GLTFLoader - asset의 버전은 2.0이상이어야함")},s=function(t,e,r){var a=0,s=0;e.buffers.forEach((function(e,l){if(e._redURIkey="buffers",e._redURIIndex=l,a++,e.uri instanceof ArrayBuffer)s++,t.parsingResult.uris[e._redURIkey][e._redURIIndex]=new DataView(e.uri),s==a&&r&&r();else{var u="data:"==e.uri.substr(0,5)?e.uri:t.path+e.uri;n(u,(function(n){s++,t.parsingResult.uris[e._redURIkey][e._redURIIndex]=new DataView(n.response),s==a&&r&&r()}),(function(t,e){}))}}))},t=function(t,e,r,n,l){a(r),l?(r.buffers[0].uri=l,s(t,r,(function(){parseCameras_GLTF(t,r),parseScene_GLTF(t,r,(function(){new TextureLoader(t.redGPUContext,t.parsingResult.textureRawList,e=>{e.textures.forEach(t=>{t.userInfo.targetMaterial[t.userInfo.targetTexture]=t.texture}),parseAnimation_GLTF(t,r).then(t=>{n&&n()})})}))}))):s(t,r,(function(){parseCameras_GLTF(t,r),parseScene_GLTF(t,r,(function(){new TextureLoader(t.redGPUContext,t.parsingResult.textureRawList,e=>{e.textures.forEach(t=>{t.userInfo.targetMaterial[t.userInfo.targetTexture]=t.texture}),parseAnimation_GLTF(t,r).then(t=>{n&&n()})})}))}))}}();var Si=gi;let xi,yi,Pi=!1,setDebugBox=t=>{yi||(yi=document.createElement("div"),yi.style.cssText="\n\t\t\tposition:fixed;\n\t\t\tbottom:0; left:0;\n\t\t\twidth : 200px;\n\t\t\toverflow : hidden;\n\t\t\tbackground:rgba(0, 0, 0, 0.5);\n\t\t\tpadding:5px;\n\t\t\tfont-size:11px;\n\t\t\tcolor:#fff;\n\t\t")};const Ti={LEFT_TOP:"leftTop",RIGHT_TOP:"rightTop",LEFT_BOTTOM:"leftBottom",RIGHT_BOTTOM:"rightBottom",resetData:t=>(xi=[],t.forEach(t=>xi.push({view:t,object3DNum:0,dirtyTransformNum:0,drawCallNum:0,triangleNum:0,dirtyPipelineNum:0,x:t.x,y:t.y,width:t.width,height:t.height,viewRect:t.viewRect,baseRenderTime:0,postEffectRenderTime:0,finalRenderTime:0})),xi),visible:(t,e=Ti.LEFT_BOTTOM)=>{Pi=t,setDebugBox(),Pi?(document.body.appendChild(yi),Ti.setLocation(e)):yi.parentNode&&document.body.removeChild(yi)},setLocation:(t=Ti.LEFT_BOTTOM)=>{switch(yi.style.top="",yi.style.bottom="",yi.style.left="",yi.style.right="",t){case Ti.LEFT_TOP:yi.style.left=yi.style.top=0;break;case Ti.LEFT_BOTTOM:yi.style.left=yi.style.bottom=0;break;case Ti.RIGHT_TOP:yi.style.right=yi.style.top=0;break;case Ti.RIGHT_BOTTOM:yi.style.right=yi.style.bottom=0}},update:t=>{setDebugBox(),Pi&&(yi.innerHTML="",xi.forEach(t=>{let e,r,n,a,s={x:1,width:1};e=document.createElement("div"),e.style.cssText="\n\t\t\t\t\tbackground : rgba(0,0,0,0.75);\n\t\t\t\t\tmargin-bottom : 1px;\n\t\t\t\t\tpadding : 8px;\n\t\t\t\t",yi.appendChild(e),r=document.createElement("div"),r.style.color="#fff",e.appendChild(r),n="";for(let e in t)a=t[e],"number"==typeof a&&(e.includes("Time")&&(a=a.toFixed(5)),a=a.toLocaleString()),n+=`<span style="color:rgba(255,255,255,0.5)">${e}</span> : ${a}`,n+=s[e]?" / ":"<br>";r.innerHTML=n}))}};class Plane extends baseGeometry{constructor(t,e=1,r=1,n=1,a=1,s=1,l=!1){let u;if(super(),Mi.set(this,{writable:!0,value:function(){let t,e,r,n,a,s,l,u,c,h,p,v,S,y,G,U;return function(b,E,C,I,N,$,k,W){t=C/2,e=I/2,r=Math.floor(N)||1,n=Math.floor($)||1,a=r+1,s=n+1,l=C/r,u=I/n;const H=[],q=[];for(h=0;h<s;h++)for(v=h*u-e,c=0;c<a;c++)p=c*l-t,H.push(p,-v,0,0,0,1,c/r*k,(W?1-h/n:h/n)*k);for(h=0;h<n;h++)for(c=0;c<r;c++)S=c+a*h,y=c+a*(h+1),G=c+1+a*(h+1),U=c+1+a*h,q.push(S,y,U,y,G,U);return new Geometry(b,new Buffer(b,`${E}_interleaveBuffer`,Buffer.TYPE_VERTEX,new Float32Array(H),[new InterleaveInfo("vertexPosition","float3"),new InterleaveInfo("vertexNormal","float3"),new InterleaveInfo("texcoord","float2")]),new Buffer(b,`${E}_indexBuffer`,Buffer.TYPE_INDEX,new Uint32Array(q)))}}()}),u=[this.constructor.name,e,r,n,a,s,l].join("_"),t.state.Geometry.has(u))return t.state.Geometry.get(u);let c=_classPrivateFieldGet(this,Mi).call(this,t,u,e,r,n,a,s,l);this.interleaveBuffer=c.interleaveBuffer,this.indexBuffer=c.indexBuffer,this.vertexState=c.vertexState,t.state.Geometry.set(u,this)}}var Mi=new WeakMap;let Li=new Float32Array(1);class ParticleMaterial extends BitmapMaterial{get sprite3DMode(){return this._sprite3DMode}set sprite3DMode(t){this._sprite3DMode=t,Li[0]=t?1:0,this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap.sprite3DMode,Li)}constructor(t,e){super(t),_defineProperty(this,"_sprite3DMode",!0),this.diffuseTexture=e,this.needResetBindingInfo=!0}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}_defineProperty(ParticleMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.getSprite3DMatrix}    \n\tlayout(location = 0) in vec3 a_pos;\n    layout(location = 1) in vec2 a_uv;\n    layout(location = 2) in vec3 position;\n    layout(location = 3) in float alpha;\n    layout(location = 4) in vec3 rotation;\n    layout(location = 5) in float scale;\n\tlayout(location = 0 ) out vec2 vUV;\n\tlayout(location = 1 ) out float vMouseColorID;\t\n\tlayout(location = 2 ) out float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float sprite3DMode;\n    } vertexUniforms;\n\tmat4 rotationMTX(vec3 t)\n    {\n       float s = sin(t[0]);float c = cos(t[0]);\n       mat4 m1 = mat4( 1,0,0,0, 0,c,s,0, 0,-s,c,0, 0,0,0,1);s = sin(t[1]);c = cos(t[1]);\n       mat4 m2 = mat4(c,0,-s,0, 0,1,0,0, s,0,c,0,  0,0,0,1);s = sin(t[2]);c = cos(t[2]);\n       mat4 m3 = mat4(c,s,0,0, -s,c,0,0, 0,0,1,0,  0,0,0,1);\n       return m3*m2*m1;\n    }\n\tvoid main() {\n\t\tvUV = a_uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity * alpha;\n\t\tfloat ratio = systemUniforms.resolution.x/systemUniforms.resolution.y; \n\t\tif( vertexUniforms.sprite3DMode == 1.0 ) {\n\t\t\tmat4 scaleMTX = mat4(\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\tposition, 1\n\t\t\t) *\n\t\t\tmat4(\n\t\t\t\tscale, 0, 0, 0,\n\t\t\t\t0, scale , 0, 0,\n\t\t\t\t0, 0, scale, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t) ;\n\t\t\tgl_Position = systemUniforms.perspectiveMTX * getSprite3DMatrix( systemUniforms.cameraMTX,  scaleMTX ) * rotationMTX(vec3(0,0, rotation.z)) * vec4(a_pos , 1);\n\t\t}else{\n\t\t\tmat4 scaleMTX = mat4(\n\t\t\t\tscale, 0, 0, 0,\n\t\t\t\t0, scale, 0, 0,\n\t\t\t\t0, 0, scale, 0,\n\t\t\t\tposition, 1\n\t\t\t)\n\t\t\t* rotationMTX(rotation);\n\t\t\tgl_Position = systemUniforms.perspectiveMTX *  systemUniforms.cameraMTX * scaleMTX * vec4(a_pos , 1);\n\t\t}\n\t\t\n\t}\n\t`),_defineProperty(ParticleMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec2 vUV;\n\tlayout( location = 1 ) in float vMouseColorID;\t\n\tlayout( location = 2 ) in float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tdiffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(ParticleMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(ParticleMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(ParticleMaterial,"uniformBufferDescriptor_vertex",[{size:Ee.float,valueName:"sprite3DMode"}]),_defineProperty(ParticleMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"alpha"}]);class PipelineParticle extends UUID{constructor(t,e){super(),Gi.set(this,{writable:!0,value:void 0}),Ui.set(this,{writable:!0,value:void 0}),_defineProperty(this,"GPURenderPipeline",void 0),_classPrivateFieldSet(this,Gi,t),_classPrivateFieldSet(this,Ui,e),this.GPURenderPipeline=null}update(t,e){let r=_classPrivateFieldGet(this,Ui);const n=t.device,a={layout:n.createPipelineLayout({bindGroupLayouts:[e.systemUniformInfo_vertex.GPUBindGroupLayout,e.systemUniformInfo_fragment.GPUBindGroupLayout,r.GPUBindGroupLayout,r._material.GPUBindGroupLayout]}),vertexStage:{module:r._material.vShaderModule.GPUShaderModule,entryPoint:"main"},fragmentStage:{module:r._material.fShaderModule.GPUShaderModule,entryPoint:"main"},vertexState:{indexFormat:"uint32",vertexBuffers:[{arrayStride:32,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float3"},{shaderLocation:1,offset:24,format:"float2"}]},{arrayStride:4*r._PROPERTY_NUM,stepMode:"instance",attributes:[{shaderLocation:2,offset:16,format:"float3"},{shaderLocation:3,offset:28,format:"float"},{shaderLocation:4,offset:32,format:"float3"},{shaderLocation:5,offset:44,format:"float"}]}]},colorStates:[{format:t.swapChainFormat,colorBlend:{srcFactor:r._blendColorSrc,dstFactor:r._blendColorDst,operation:"add"},alphaBlend:{srcFactor:r._blendAlphaSrc,dstFactor:r._blendAlphaDst,operation:"add"}},{format:"rgba32float"}],rasterizationState:{frontFace:"ccw",cullMode:r._cullMode},primitiveTopology:r._primitiveTopology,depthStencilState:{format:"depth24plus-stencil8",depthWriteEnabled:r._depthWriteEnabled,depthCompare:r._depthCompare},sampleCount:4};this.GPURenderPipeline=n.createRenderPipeline(a)}}var Gi=new WeakMap,Ui=new WeakMap;class Particle extends BaseObject3D{get particleNum(){return this._particleNum}set particleNum(t){this._particleNum=t,this.setParticleData()}get sprite3DMode(){return this._material._sprite3DMode}set sprite3DMode(t){return this._material.sprite3DMode=t}get texture(){return this._material.diffuseTexture}set texture(t){return this._material.diffuseTexture=t}get material(){return this._material}set material(t){}compute(t){_classPrivateFieldGet(this,Ei).set([t,this._x,this._y,this._z,this.minLife,this.maxLife,this.minStartX,this.maxStartX,this.minEndX,this.maxEndX,this.easeX,this.minStartY,this.maxStartY,this.minEndY,this.maxEndY,this.easeY,this.minStartZ,this.maxStartZ,this.minEndZ,this.maxEndZ,this.easeZ,this.minStartAlpha,this.maxStartAlpha,this.minEndAlpha,this.maxEndAlpha,this.easeAlpha,this.minStartScale,this.maxStartScale,this.minEndScale,this.maxEndScale,this.easeScale,this.minStartRotationX,this.maxStartRotationX,this.minEndRotationX,this.maxEndRotationX,this.easeRotationX,this.minStartRotationY,this.maxStartRotationY,this.minEndRotationY,this.maxEndRotationY,this.easeRotationY,this.minStartRotationZ,this.maxStartRotationZ,this.minEndRotationZ,this.maxEndRotationZ,this.easeRotationZ],0),this.simParamBuffer.setSubData(0,_classPrivateFieldGet(this,Ei));const e=_classPrivateFieldGet(this,bi).device.createCommandEncoder({}),r=e.beginComputePass();r.setPipeline(this.computePipeline),r.setBindGroup(ShareGLSL.SET_INDEX_ComputeUniforms,this.particleBindGroup),r.dispatch(this._particleNum),r.endPass(),_classPrivateFieldGet(this,bi).device.defaultQueue.submit([e.finish()])}constructor(t,e=1,r={},n,a){super(t),bi.set(this,{writable:!0,value:void 0}),Ei.set(this,{writable:!0,value:void 0}),_defineProperty(this,"computePipeline",void 0),_defineProperty(this,"particleBindGroup",void 0),_defineProperty(this,"particleBuffer",void 0),_defineProperty(this,"minLife",2e3),_defineProperty(this,"maxLife",1e4),_defineProperty(this,"minStartX",-1),_defineProperty(this,"maxStartX",1),_defineProperty(this,"minEndX",-15),_defineProperty(this,"maxEndX",15),_defineProperty(this,"minStartY",-1),_defineProperty(this,"maxStartY",1),_defineProperty(this,"minEndY",-15),_defineProperty(this,"maxEndY",15),_defineProperty(this,"minStartZ",-1),_defineProperty(this,"maxStartZ",1),_defineProperty(this,"minEndZ",-15),_defineProperty(this,"maxEndZ",15),_defineProperty(this,"minStartAlpha",0),_defineProperty(this,"maxStartAlpha",1),_defineProperty(this,"minEndAlpha",0),_defineProperty(this,"maxEndAlpha",0),_defineProperty(this,"minStartScale",0),_defineProperty(this,"maxStartScale",.25),_defineProperty(this,"minEndScale",0),_defineProperty(this,"maxEndScale",3),_defineProperty(this,"minStartRotationX",360*-Math.random()),_defineProperty(this,"maxStartRotationX",360*Math.random()),_defineProperty(this,"minEndRotationX",360*-Math.random()),_defineProperty(this,"maxEndRotationX",360*Math.random()),_defineProperty(this,"minStartRotationY",360*-Math.random()),_defineProperty(this,"maxStartRotationY",360*Math.random()),_defineProperty(this,"minEndRotationY",360*-Math.random()),_defineProperty(this,"maxEndRotationY",360*Math.random()),_defineProperty(this,"minStartRotationZ",360*-Math.random()),_defineProperty(this,"maxStartRotationZ",360*Math.random()),_defineProperty(this,"minEndRotationZ",360*-Math.random()),_defineProperty(this,"maxEndRotationZ",360*Math.random()),_defineProperty(this,"easeX",Particle.Linear),_defineProperty(this,"easeY",Particle.Linear),_defineProperty(this,"easeZ",Particle.Linear),_defineProperty(this,"easeScale",Particle.Linear),_defineProperty(this,"easeRotationX",Particle.Linear),_defineProperty(this,"easeRotationY",Particle.Linear),_defineProperty(this,"easeRotationZ",Particle.Linear),_defineProperty(this,"easeAlpha",Particle.Linear),_classPrivateFieldSet(this,bi,t),this._material=new ParticleMaterial(t);for(const t in r)this.hasOwnProperty(t)&&(this[t]=r[t]);this.geometry=a||new Plane(t),this.texture=n,this.renderDrawLayerIndex=Render.DRAW_LAYER_INDEX2_Z_POINT_SORT,this._PROPERTY_NUM=44,this.blendColorSrc="src-alpha",this.blendColorDst="one",this.blendAlphaSrc="src-alpha",this.blendAlphaDst="one",this.depthWriteEnabled=!1,this.cullMode="none",_classPrivateFieldSet(this,Ei,new Float32Array([performance.now(),this._x,this._y,this._z,this.minLife,this.maxLife,this.minStartX,this.maxStartX,this.minEndX,this.maxEndX,this.easeX,this.minStartY,this.maxStartY,this.minEndY,this.maxEndY,this.easeY,this.minStartZ,this.maxStartZ,this.minEndZ,this.maxEndZ,this.easeZ,this.minStartAlpha,this.maxStartAlpha,this.minEndAlpha,this.maxEndAlpha,this.easeAlpha,this.minStartScale,this.maxStartScale,this.minEndScale,this.maxEndScale,this.easeScale,this.minStartRotationX,this.maxStartRotationX,this.minEndRotationX,this.maxEndRotationX,this.easeRotationX,this.minStartRotationY,this.maxStartRotationY,this.minEndRotationY,this.maxEndRotationY,this.easeRotationY,this.minStartRotationZ,this.maxStartRotationZ,this.minEndRotationZ,this.maxEndRotationZ,this.easeRotationZ]));let s={size:_classPrivateFieldGet(this,Ei).byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST};this.simParamBuffer=t.device.createBuffer(s),this.simParamBuffer.setSubData(0,_classPrivateFieldGet(this,Ei)),this.pipeline=new PipelineParticle(t,this),this.particleNum=e||1}setParticleData(){let t=_classPrivateFieldGet(this,bi);const e=this._PROPERTY_NUM,r=new Float32Array(this._particleNum*e),n=performance.now();for(let t=0;t<this._particleNum;++t){let a=Math.random()*this.maxLife,s=Math.random()*a;r[e*t+0]=n-s,r[e*t+1]=a,r[e*t+4]=0,r[e*t+5]=0,r[e*t+6]=0,r[e*t+7]=r[e*t+8]=0,r[e*t+9]=0,r[e*t+10]=0,r[e*t+11]=0,r[e*t+12]=Math.random()*(this.maxStartX-this.minStartX)+this.minStartX,r[e*t+13]=Math.random()*(this.maxEndX-this.minEndX)+this.minEndX,r[e*t+14]=this.easeX,r[e*t+15]=this._x,r[e*t+16]=Math.random()*(this.maxStartY-this.minStartY)+this.minStartY,r[e*t+17]=Math.random()*(this.maxEndY-this.minEndY)+this.minEndY,r[e*t+18]=this.easeY,r[e*t+19]=this._y,r[e*t+20]=Math.random()*(this.maxStartZ-this.minStartZ)+this.minStartZ,r[e*t+21]=Math.random()*(this.maxEndZ-this.minEndZ)+this.minEndZ,r[e*t+22]=this.easeZ,r[e*t+23]=this._z,r[e*t+24]=Math.random()*(this.maxStartRotationX-this.minStartRotationX)+this.minStartRotationX,r[e*t+25]=Math.random()*(this.maxEndRotationX-this.minEndRotationX)+this.minEndRotationX,r[e*t+26]=this.easeRotationX,r[e*t+27]=0,r[e*t+28]=Math.random()*(this.maxStartRotationY-this.minStartRotationY)+this.minStartRotationY,r[e*t+29]=Math.random()*(this.maxEndRotationY-this.minEndRotationY)+this.minEndRotationY,r[e*t+30]=this.easeRotationY,r[e*t+31]=0,r[e*t+32]=Math.random()*(this.maxStartRotationZ-this.minStartRotationZ)+this.minStartRotationZ,r[e*t+33]=Math.random()*(this.maxEndRotationZ-this.minEndRotationZ)+this.minEndRotationZ,r[e*t+34]=this.easeRotationZ,r[e*t+35]=0,r[e*t+36]=Math.random()*(this.maxStartScale-this.minStartScale)+this.minStartScale,r[e*t+37]=Math.random()*(this.maxEndScale-this.minEndScale)+this.minEndScale,r[e*t+38]=this.easeScale,r[e*t+39]=0,r[e*t+40]=Math.random()*(this.maxStartAlpha-this.minStartAlpha)+this.minStartAlpha,r[e*t+41]=Math.random()*(this.maxEndAlpha-this.minEndAlpha)+this.minEndAlpha,r[e*t+42]=this.easeAlpha,r[e*t+43]=0}this.particleBuffer&&(this.particleBuffer.destroy(),this.particleBuffer=null),this.particleBuffer=t.device.createBuffer({size:r.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE}),this.particleBuffer.setSubData(0,r);let a=(t=>`\n\t#version 450\n\t// 파티클 구조체 선언\n\tstruct Info {\n\t\tfloat startValue;\n\t\tfloat endValue;\n\t\tfloat easeType;\n\t\tfloat birthCenterValue;\n\t};\n\tstruct InfoGroup {\n\t\tInfo infoX;\n\t\tInfo infoY;\n\t\tInfo infoZ;\n\t};\n\tstruct Particle {\n\t\tfloat startTime;\n\t    float life;\n\t    vec3 valuePosition;\n\t    float valueAlpha;\n        vec3 valueRotation;\n\t    float valueScale;\t  \n\t    InfoGroup infoPosition;\n\t    InfoGroup infoRotation;\n\t    Info infoScale;\n\t    Info infoAlpha;\n\t};\n\t\n\t// 이건 설정값인듯 하고\n\tlayout(std140, set = ${ShareGLSL.SET_INDEX_ComputeUniforms}, binding = 0) uniform SimParams {\n\t    float time;\n        float currentPositionX,currentPositionY,currentPositionZ;\n\t    float minLife, maxLife;\n\t    float minStartX, maxStartX, minEndX, maxEndX, easeX;\n\t    float minStartY, maxStartY, minEndY, maxEndY, easeY;\n\t    float minStartZ, maxStartZ, minEndZ, maxEndZ, easeZ;\n\t    float minStartAlpha, maxStartAlpha, minEndAlpha, maxEndAlpha, easeAlpha;\n\t    float minStartScale, maxStartScale, minEndScale, maxEndScale, easeScale;\n        float minStartRotationX, maxStartRotationX, minEndRotationX, maxEndRotationX, easeRotationX;\n\t    float minStartRotationY, maxStartRotationY, minEndRotationY, maxEndRotationY, easeRotationY;\n\t    float minStartRotationZ, maxStartRotationZ, minEndRotationZ, maxEndRotationZ, easeRotationZ;\n\t\n\t} params;\n\t\n\t// 여기다 쓰곘다는건가\t\n\tlayout(std140, set = ${ShareGLSL.SET_INDEX_ComputeUniforms}, binding = 1) buffer ParticlesA {\n\t    Particle particles[${t}];\n\t} particlesA;\n\t\n\t\n\n\t\n\tconst float PI = 3.141592653589793;\n\tconst float HPI = PI * 0.5;\n\tconst float PI2 = PI * 2;\n\tfloat calEasing(float n, float type){\n\t\tswitch( int(type) ){\n\t\t\t// linear\n\t\t\tcase 0 : break;\n\t\t\t// QuintIn\n\t\t\tcase 1 : n = n * n * n * n * n; break;\n\t\t\t// QuintOut\n\t\t\tcase 2 : n = ((n -= 1) * n * n * n * n) + 1; break;\n\t\t\t// QuintInOut\n\t\t\tcase 3 : n = ((n = n * 2) < 1) ? n * n * n * n * n * 0.5 : 0.5 * ((n -= 2) * n * n * n * n + 2); break;\n\t\t\t////////////////////////\n\t\t\t// BackIn\n\t\t\tcase 4 : n = n * n * (n * 1.70158 + n - 1.70158); break;\n\t\t\t// BackOut\n\t\t\tcase 5 : n = (n -= 1) * n * (n * 1.70158 + n + 1.70158) + 1; break;\n\t\t\t// BackInOut\n\t\t\tcase 6 : n = ((n = n * 2) < 1) ? 0.5 * n * n * (n * 1.70158 + n - 1.70158) : 0.5 * (n -= 2) * n * (n * 1.70158 + n + 1.70158) + 1; break;\n\t\t\t////////////////////////\n\t\t\t// CircIn\n\t\t\tcase 7 : n = -1 * (sqrt(1 - n * n) - 1); break;\n\t\t\t// CircOut\n\t\t\tcase 8 : n = sqrt(1 - (n -= 1) * n); break;\n\t\t\t// CircInOut\n\t\t\tcase 9 : n = ((n = n * 2) < 1) ? -0.5 * (sqrt(1 - n * n) - 1) : 0.5 * sqrt(1 - (n -= 2) * n) + 0.5; break;\n\t\t\t////////////////////////\n\t\t\t// CubicIn\n\t\t\tcase 10 : n = n * n * n; break;\n\t\t\t// CubicOut\n\t\t\tcase 11 : n = ((n -= 1) * n * n) + 1; break;\n\t\t\t// CubicInOut\n\t\t\tcase 12 : n = ((n = n * 2) < 1) ? n * n * n * 0.5 : 0.5 * ((n -= 2) * n * n + 2); break;\n\t\t\t////////////////////////\n\t\t\t// ExpoIn\n\t\t\tcase 13 : n = n == 0.0 ? 0.0 : pow(2, 10 * (n - 1)); break;\n\t\t\t// ExpoOut\n\t\t\tcase 14 : n = n == 1.0 ? 1.0 : -pow(2, -10 * n) + 1; break;\n\t\t\t// ExpoInOut\n\t\t\tcase 15 : n = ((n = n * 2) < 1) ? (n == 0.0 ? 0.0 : 0.5 * pow(2, 10 * (n - 1))) : (n == 2.0 ? 1.0 : -0.5 * pow(2, -10 * (n - 1)) + 1); break;\n\t\t\t////////////////////////\n\t\t\t// QuadIn\n\t\t\tcase 16 : n = n * n; break;\n\t\t\t// QuadOut\n\t\t\tcase 17 : n = ((2 - n) * n); break;\n\t\t\t// QuadInOut\n\t\t\tcase 18 : n = ((n = n * 2) < 1) ? n * n * 0.5 : 0.5 * ((2 - (n -= 1)) * n + 1); break;\n\t\t\t////////////////////////\n\t\t\t// QuartIn\n\t\t\tcase 19 : n = n * n * n * n; break;\n\t\t\t// QuartOut\n\t\t\tcase 20 : n = 1 - ((n -= 1) * n * n * n); break;\n\t\t\t// QuartInOut\n\t\t\tcase 21 : n = ((n = n * 2) < 1) ? n * n * n * n * 0.5 : 1 - ((n -= 2) * n * n * n * 0.5); break;\n\t\t\t////////////////////////\n\t\t\t// SineIn\n\t\t\tcase 22 : n = -cos(n * HPI) + 1; break;\n\t\t\t// SineOut\n\t\t\tcase 23 : n = sin(n * HPI); break;\n\t\t\t// SineInOut\n\t\t\tcase 24 : n = (-cos(n * PI) + 1) * 0.5; break;\n\t\t\t////////////////////////\n\t\t\t// ElasticIn\n\t\t\tcase 25 : n = n == 0.0 ? 0.0 : n == 1.0 ? 1.0 : -1 * pow(2, 10 * (n -= 1)) * sin((n - 0.075) * (PI2) / 0.3); break;\n\t\t\t// ElasticOut\n\t\t\tcase 26 : n = n == 0.0 ? 0.0 : n == 1.0 ? 1.0 : pow(2, -10 * n) * sin((n - 0.075) * (PI2) / 0.3) + 1; break;\n\t\t\t// ElasticInOut\n\t\t\tcase 27 : n =( (n == 0.0 ? 0.0 : (n == 1.0 ? 1.0 : n *= 2)), (n < 1) ? -0.5 * pow(2, 10 * (n -= 1)) * sin((n - 0.075) * (PI2) / 0.3) : 0.5 * pow(2, -10 * (n -= 1)) * sin((n - 0.075) * (PI2) / 0.3) + 1); break;\n\t\t}\n\t\treturn n;\n\t}\n\tfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\tfloat randomRange(float min, float max, float v)\n\t{\n        float newValue = rand(v);\n\t\treturn (newValue * (max-min)) + min;\n\t}\n\tvoid main() {\n\t\tuint index = gl_GlobalInvocationID.x;\n\t\tParticle targetParticle = particlesA.particles[index];\n\t\n\t\tfloat age = params.time - targetParticle.startTime;\n\t\tfloat lifeRatio = age/targetParticle.life;\n\t\tif(lifeRatio>=1) {\n\t\t\tfloat uuid = params.time + index;\n\t\t\tparticlesA.particles[index].startTime = params.time;\n\t\t\tparticlesA.particles[index].life = randomRange( params.minLife, params.maxLife, uuid );\n\t\t\t// position\n\t\t\tparticlesA.particles[index].infoPosition.infoX.startValue = randomRange( params.minStartX, params.maxStartX, uuid + 1 );\n\t\t\tparticlesA.particles[index].infoPosition.infoX.endValue   = randomRange( params.minEndX, params.maxEndX, uuid + 2 );\n\t\t\tparticlesA.particles[index].infoPosition.infoX.easeType   = params.easeX;\n\t\t\tparticlesA.particles[index].infoPosition.infoY.startValue = randomRange( params.minStartY, params.maxStartY, uuid + 3 );\n\t\t\tparticlesA.particles[index].infoPosition.infoY.endValue   = randomRange( params.minEndY, params.maxEndY, uuid + 4 );\n\t\t\tparticlesA.particles[index].infoPosition.infoY.easeType   = params.easeY;\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.startValue = randomRange( params.minStartZ, params.maxStartZ, uuid + 5 );\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.endValue   = randomRange( params.minEndZ, params.maxEndZ, uuid + 6 );\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.easeType   = params.easeZ;\n\t\t\t// alpha\n\t\t\tparticlesA.particles[index].infoAlpha.startValue = randomRange( params.minStartAlpha, params.maxStartAlpha, uuid + 7 );\n\t\t\tparticlesA.particles[index].infoAlpha.endValue   = randomRange( params.minEndAlpha, params.maxEndAlpha, uuid + 8 );\n\t\t\tparticlesA.particles[index].infoAlpha.easeType   = params.easeAlpha;\n\t\t\t// scale\n\t\t\tparticlesA.particles[index].infoScale.startValue = randomRange( params.minStartScale, params.maxStartScale, uuid + 9 );\n\t\t\tparticlesA.particles[index].infoScale.endValue   = randomRange( params.minEndScale, params.maxEndScale, uuid + 10 );\n\t\t\tparticlesA.particles[index].infoScale.easeType   = params.easeScale;\n\t\t\t// rotation\n\t\t\tparticlesA.particles[index].infoRotation.infoX.startValue = randomRange( params.minStartRotationX, params.maxStartRotationX, uuid + 11 );\n\t\t\tparticlesA.particles[index].infoRotation.infoX.endValue   = randomRange( params.minEndRotationX, params.maxEndRotationX, uuid + 12 );\n\t\t\tparticlesA.particles[index].infoRotation.infoX.easeType   = params.easeRotationX;\n\t\t\tparticlesA.particles[index].infoRotation.infoY.startValue = randomRange( params.minStartRotationY, params.maxStartRotationY, uuid + 13 );\n\t\t\tparticlesA.particles[index].infoRotation.infoY.endValue   = randomRange( params.minEndRotationY, params.maxEndRotationY, uuid + 14 );\n\t\t\tparticlesA.particles[index].infoRotation.infoY.easeType   = params.easeRotationY;\n\t\t\tparticlesA.particles[index].infoRotation.infoZ.startValue = randomRange( params.minStartRotationZ, params.maxStartRotationZ, uuid + 15 );\n\t\t\tparticlesA.particles[index].infoRotation.infoZ.endValue   = randomRange( params.minEndRotationZ, params.maxEndRotationZ, uuid + 16 );\n\t\t\tparticlesA.particles[index].infoRotation.infoZ.easeType   = params.easeRotationZ;\n\t\t\t// birth position\n\t\t\tparticlesA.particles[index].infoPosition.infoX.birthCenterValue = params.currentPositionX;\n\t\t\tparticlesA.particles[index].infoPosition.infoY.birthCenterValue = params.currentPositionY;\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.birthCenterValue = params.currentPositionZ;\n\t\t\tlifeRatio = 0;\n\t\t}\n\t\tInfo tInfo;\n\t\t// position\n\t\ttInfo = targetParticle.infoPosition.infoX;\n\t\tparticlesA.particles[index].valuePosition.x = tInfo.birthCenterValue + tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\ttInfo = targetParticle.infoPosition.infoY;\n\t\tparticlesA.particles[index].valuePosition.y = tInfo.birthCenterValue + tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\ttInfo = targetParticle.infoPosition.infoZ;\n\t\tparticlesA.particles[index].valuePosition.z = tInfo.birthCenterValue + tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\t\n\t\t// alpha\n\t\ttInfo = targetParticle.infoAlpha;\n\t\tparticlesA.particles[index].valueAlpha = tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\t\n\t\t// scale\n\t\ttInfo = targetParticle.infoScale;\n\t\tparticlesA.particles[index].valueScale = tInfo.startValue + (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\t\t\t\n\t\t// rotation\n\t\ttInfo = targetParticle.infoRotation.infoX;\n\t\tparticlesA.particles[index].valueRotation.x = (tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType)) * PI/180;\n\t\ttInfo = targetParticle.infoRotation.infoY;\n\t\tparticlesA.particles[index].valueRotation.y = (tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType)) * PI/180;\n\t\ttInfo = targetParticle.infoRotation.infoZ;\n\t\tparticlesA.particles[index].valueRotation.z = (tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType)) * PI/180;\n\t}\n`)(this._particleNum),s={code:t.glslang.compileGLSL(a,"compute"),source:a},l=t.device.createShaderModule(s);const u=t.device.createBindGroupLayout({bindings:[{binding:0,visibility:GPUShaderStage.COMPUTE,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.COMPUTE,type:"storage-buffer"}]}),c=t.device.createPipelineLayout({bindGroupLayouts:[u]});this.particleBindGroup=t.device.createBindGroup({layout:u,bindings:[{binding:0,resource:{buffer:this.simParamBuffer,offset:0,size:_classPrivateFieldGet(this,Ei).byteLength}},{binding:1,resource:{buffer:this.particleBuffer,offset:0,size:r.byteLength}}]}),this.computePipeline=t.device.createComputePipeline({layout:c,computeStage:{module:l,entryPoint:"main"}})}}var bi=new WeakMap,Ei=new WeakMap;_defineProperty(Particle,"Linear",0),_defineProperty(Particle,"QuintIn",1),_defineProperty(Particle,"QuintOut",2),_defineProperty(Particle,"QuintInOut",3),_defineProperty(Particle,"BackIn",4),_defineProperty(Particle,"BackOut",5),_defineProperty(Particle,"BackInOut",6),_defineProperty(Particle,"CircIn",7),_defineProperty(Particle,"CircOut",8),_defineProperty(Particle,"CircInOut",9),_defineProperty(Particle,"CubicIn",10),_defineProperty(Particle,"CubicOut",11),_defineProperty(Particle,"CubicInOut",12),_defineProperty(Particle,"ExpoIn",13),_defineProperty(Particle,"ExpoOut",14),_defineProperty(Particle,"ExpoInOut",15),_defineProperty(Particle,"QuadIn",16),_defineProperty(Particle,"QuadOut",17),_defineProperty(Particle,"QuadInOut",18),_defineProperty(Particle,"QuartIn",19),_defineProperty(Particle,"QuartOut",20),_defineProperty(Particle,"QuartInOut",21),_defineProperty(Particle,"SineIn",22),_defineProperty(Particle,"SineOut",23),_defineProperty(Particle,"SineInOut",24),_defineProperty(Particle,"ElasticIn",25),_defineProperty(Particle,"ElasticOut",26),_defineProperty(Particle,"ElasticInOut",27);class Camera2D extends BaseObject3D{constructor(t){super(t)}}let Bi,Di,wi,Fi,Ri,Ci,Ii=[],Ni=[],Ai=[],Oi=[],Vi={},renderScene=(t,e,r,n,a=0)=>{let s,l,u,c,h,p,v,S,y,G,U,b,E,C,I,N,$,k,W,H,q,J,K,pt,_t,gt,yt,Pt,Gt,Ut,Bt,wt,Rt,Ct,Nt,At,Yt,Xt,zt,$t,kt,Wt,Zt,Ht,qt,Qt,Jt,Kt,te,ee,re,ie,ne,ae,oe,se,le,ue,fe,me,ce,he,de,pe,_e,ve,ge,Se,xe,ye,Pe,Te,Me=Math.PI/180;kt=3.141592653589793,Wt=6.283185307179586,Zt=.225,Ht=1.27323954,qt=.405284735,Qt=1.5707963267948966,s=n.length,Jt=Ii[0],Kt=Ii[1],te=Ii[2],ee=Ii[3],re=Ii[4],ie=Ii[5];let Le=n==e.scene._flatChildList,Ge=e.camera instanceof Camera2D;for(;s--;){if(he=n[s],ce=he._material,me=he._geometry,ue=he._parent,se=0,Te=1,le=0,Pe=he._opacity,ue&&(le=ue._renderTimeDirtyTransform,se=ue.matrix,Te=ue._sumOpacity),he._sumOpacity!=Pe*Te&&(he.sumOpacity=Pe*Te),de=he.dirtyTransform,he._renderTimeDirtyTransform=le||de,_e=he.dirtyPipeline,pe=he.pipeline,fe=he.skinInfo,ne=he.matrix,oe=he.localMatrix,ve=0,Bi.object3DNum++,ce&&(ce.needResetBindingInfo&&(ce.resetBindingInfo(),ce.needResetBindingInfo=!1,ve=he._prevMaterialUUID!=ce._UUID,Ci[ce._UUID]=1),ce instanceof SpriteSheetMaterial&&ce.update(Di),ve=Ci[ce._UUID]),me){(_e||ve)&&(pe instanceof PipelineBasic||pe instanceof PipelineParticle)&&(pe.update(t,e),Bi.dirtyPipelineNum++),ge=1;let n=!1;a==Render.DRAW_LAYER_INDEX0&&he._renderDrawLayerIndex==Render.DRAW_LAYER_INDEX1?Ni.push(he):he._renderDrawLayerIndex==Render.DRAW_LAYER_INDEX2_Z_POINT_SORT||ce instanceof SpriteSheetMaterial?(E=e.camera.matrix[2],$=e.camera.matrix[6],q=e.camera.matrix[10],_t=e.camera.matrix[14],yt=ne[12],Pt=ne[13],Gt=ne[14],Ut=1,Oi.push({z:yt*E+Pt*$+Gt*q+Ut*_t,targetText:he})):n=!0,(n||a)&&(e._useFrustumCulling&&(Se=me._volume||me.volume,xe=Se.xSize*he.matrix[0],ye=Se.ySize*he.matrix[5],xe=xe<ye?ye:xe,ye=Se.zSize*he.matrix[10],xe=xe<ye?ye:xe,U=ne[12],b=ne[13],E=ne[14],(Jt[0]*U+Jt[1]*b+Jt[2]*E+Jt[3]<=-xe||Kt[0]*U+Kt[1]*b+Kt[2]*E+Kt[3]<=-xe||te[0]*U+te[1]*b+te[2]*E+te[3]<=-xe||ee[0]*U+ee[1]*b+ee[2]*E+ee[3]<=-xe||re[0]*U+re[1]*b+re[2]*E+re[3]<=-xe||ie[0]*U+ie[1]*b+ie[2]*E+ie[3]<=-xe)&&(ge=0)),he instanceof Particle?(he.compute(Di),r.setPipeline(pe.GPURenderPipeline),wi!=me.interleaveBuffer._UUID&&(r.setVertexBuffer(0,me.interleaveBuffer.GPUBuffer),wi=me.interleaveBuffer._UUID),r.setVertexBuffer(1,he.particleBuffer),r.setBindGroup(2,he.GPUBindGroup),Ri!=ce._UUID&&(r.setBindGroup(3,ce.uniformBindGroup_material.GPUBindGroup),Ri=ce._UUID),me.indexBuffer?(Fi!=me.indexBuffer._UUID&&(r.setIndexBuffer(me.indexBuffer.GPUBuffer),Fi=me.indexBuffer._UUID),r.drawIndexed(me.indexBuffer.indexNum,he._particleNum,0,0,0),Bi.triangleNum+=me.indexBuffer.indexNum/3):(r.draw(me.interleaveBuffer.vertexCount,he._particleNum,0,0,0),Bi.triangleNum+=me.interleaveBuffer.data.length/me.interleaveBuffer.stride),Bi.drawCallNum++):ge&&(r.setPipeline(pe.GPURenderPipeline),wi!=me.interleaveBuffer._UUID&&(r.setVertexBuffer(0,me.interleaveBuffer.GPUBuffer),wi=me.interleaveBuffer._UUID),r.setBindGroup(2,he.GPUBindGroup),Ri!=ce._UUID&&(r.setBindGroup(3,ce.uniformBindGroup_material.GPUBindGroup),Ri=ce._UUID),me.indexBuffer?(Fi!=me.indexBuffer._UUID&&(r.setIndexBuffer(me.indexBuffer.GPUBuffer),Fi=me.indexBuffer._UUID),r.drawIndexed(me.indexBuffer.indexNum,1,0,0,0),Bi.triangleNum+=me.indexBuffer.indexNum/3):(r.draw(me.interleaveBuffer.vertexCount,1,0,0,0),Bi.triangleNum+=me.interleaveBuffer.data.length/me.interleaveBuffer.stride),Bi.drawCallNum++),he._prevMaterialUUID=ce._UUID)}if(de&&(U=1,b=0,E=0,I=0,N=1,$=0,W=0,H=0,q=1,oe[12]=he._x,oe[13]=he._y*(Ge?-1:1),oe[14]=he._z,oe[15]=1,S=he._rotationX*Me,y=he._rotationY*Me,G=he._rotationZ*Me,$t=S%Wt,$t<-kt?$t+=Wt:$t>kt&&($t-=Wt),$t=$t<0?Ht*$t+qt*$t*$t:Ht*$t-qt*$t*$t,l=$t<0?.225*($t*-$t-$t)+$t:.225*($t*$t-$t)+$t,$t=(S+Qt)%Wt,$t<-kt?$t+=Wt:$t>kt&&($t-=Wt),$t=$t<0?Ht*$t+qt*$t*$t:Ht*$t-qt*$t*$t,h=$t<0?.225*($t*-$t-$t)+$t:.225*($t*$t-$t)+$t,$t=y%Wt,$t<-kt?$t+=Wt:$t>kt&&($t-=Wt),$t=$t<0?Ht*$t+qt*$t*$t:Ht*$t-qt*$t*$t,u=$t<0?.225*($t*-$t-$t)+$t:.225*($t*$t-$t)+$t,$t=(y+Qt)%Wt,$t<-kt?$t+=Wt:$t>kt&&($t-=Wt),$t=$t<0?Ht*$t+qt*$t*$t:Ht*$t-qt*$t*$t,p=$t<0?.225*($t*-$t-$t)+$t:.225*($t*$t-$t)+$t,$t=G%Wt,$t<-kt?$t+=Wt:$t>kt&&($t-=Wt),$t=$t<0?Ht*$t+qt*$t*$t:Ht*$t-qt*$t*$t,c=$t<0?.225*($t*-$t-$t)+$t:.225*($t*$t-$t)+$t,$t=(G+Qt)%Wt,$t<-kt?$t+=Wt:$t>kt&&($t-=Wt),$t=$t<0?Ht*$t+qt*$t*$t:Ht*$t-qt*$t*$t,v=$t<0?.225*($t*-$t-$t)+$t:.225*($t*$t-$t)+$t,Bt=p*v,wt=l*u*v-h*c,Rt=h*u*v+l*c,Ct=p*c,Nt=l*u*c+h*v,At=h*u*c-l*v,Yt=-u,Xt=l*p,zt=h*p,S=he._scaleX,y=he._scaleY,G=he._scaleZ,oe[0]=(U*Bt+I*wt+W*Rt)*S,oe[1]=(b*Bt+N*wt+H*Rt)*S,oe[2]=(E*Bt+$*wt+q*Rt)*S,oe[3]=oe[3]*S,oe[4]=(U*Ct+I*Nt+W*At)*y,oe[5]=(b*Ct+N*Nt+H*At)*y,oe[6]=(E*Ct+$*Nt+q*At)*y,oe[7]=oe[7]*y,oe[8]=(U*Yt+I*Xt+W*zt)*G,oe[9]=(b*Yt+N*Xt+H*zt)*G,oe[10]=(E*Yt+$*Xt+q*zt)*G,oe[11]=oe[11]*G,(he._pivotX||he._pivotY||he._pivotZ)&&(U=oe[0],b=oe[1],E=oe[2],C=oe[3],I=oe[4],N=oe[5],$=oe[6],k=oe[7],W=oe[8],H=oe[9],q=oe[10],J=oe[11],K=oe[12],pt=oe[13],_t=oe[14],gt=oe[15],yt=1,Pt=0,Gt=0,Ut=0,oe[0]=yt*U+Pt*I+Gt*W+Ut*K,oe[1]=yt*b+Pt*N+Gt*H+Ut*pt,oe[2]=yt*E+Pt*$+Gt*q+Ut*_t,oe[3]=yt*C+Pt*k+Gt*J+Ut*gt,yt=0,Pt=1,Gt=0,Ut=0,oe[4]=yt*U+Pt*I+Gt*W+Ut*K,oe[5]=yt*b+Pt*N+Gt*H+Ut*pt,oe[6]=yt*E+Pt*$+Gt*q+Ut*_t,oe[7]=yt*C+Pt*k+Gt*J+Ut*gt,yt=0,Pt=0,Gt=1,Ut=0,oe[8]=yt*U+Pt*I+Gt*W+Ut*K,oe[9]=yt*b+Pt*N+Gt*H+Ut*pt,oe[10]=yt*E+Pt*$+Gt*q+Ut*_t,oe[11]=yt*C+Pt*k+Gt*J+Ut*gt,Ge?se?(yt=-he._pivotX,Pt=he._pivotY,Gt=-he._pivotZ,Ut=1):(yt=-he._pivotX/S,Pt=he._pivotY/y,Gt=-he._pivotZ,Ut=1):(yt=-he._pivotX,Pt=-he._pivotY,Gt=-he._pivotZ,Ut=1),oe[12]=yt*U+Pt*I+Gt*W+Ut*K,oe[13]=yt*b+Pt*N+Gt*H+Ut*pt,oe[14]=yt*E+Pt*$+Gt*q+Ut*_t,oe[15]=yt*C+Pt*k+Gt*J+Ut*gt)),(le||de)&&(Bi.dirtyTransformNum++,se?(U=se[0],b=se[1],E=se[2],C=se[3],I=se[4],N=se[5],$=se[6],k=se[7],W=se[8],H=se[9],q=se[10],J=se[11],K=se[12],pt=se[13],_t=se[14],gt=se[15],yt=oe[0],Pt=oe[1],Gt=oe[2],Ut=oe[3],ne[0]=yt*U+Pt*I+Gt*W+Ut*K,ne[1]=yt*b+Pt*N+Gt*H+Ut*pt,ne[2]=yt*E+Pt*$+Gt*q+Ut*_t,ne[3]=yt*C+Pt*k+Gt*J+Ut*gt,yt=oe[4],Pt=oe[5],Gt=oe[6],Ut=oe[7],ne[4]=yt*U+Pt*I+Gt*W+Ut*K,ne[5]=yt*b+Pt*N+Gt*H+Ut*pt,ne[6]=yt*E+Pt*$+Gt*q+Ut*_t,ne[7]=yt*C+Pt*k+Gt*J+Ut*gt,yt=oe[8],Pt=oe[9],Gt=oe[10],Ut=oe[11],ne[8]=yt*U+Pt*I+Gt*W+Ut*K,ne[9]=yt*b+Pt*N+Gt*H+Ut*pt,ne[10]=yt*E+Pt*$+Gt*q+Ut*_t,ne[11]=yt*C+Pt*k+Gt*J+Ut*gt,yt=oe[12],Pt=oe[13],Gt=oe[14],Ut=oe[15],ne[12]=yt*U+Pt*I+Gt*W+Ut*K,ne[13]=yt*b+Pt*N+Gt*H+Ut*pt,ne[14]=yt*E+Pt*$+Gt*q+Ut*_t,ne[15]=yt*C+Pt*k+Gt*J+Ut*gt):(ne[0]=oe[0],ne[1]=oe[1],ne[2]=oe[2],ne[3]=oe[3],ne[4]=oe[4],ne[5]=oe[5],ne[6]=oe[6],ne[7]=oe[7],ne[8]=oe[8],ne[9]=oe[9],ne[10]=oe[10],ne[11]=oe[11],ne[12]=oe[12],ne[13]=oe[13],ne[14]=oe[14],ne[15]=oe[15]),ae=he.normalMatrix,U=ne[0],b=ne[1],E=ne[2],C=ne[3],I=ne[4],N=ne[5],$=ne[6],k=ne[7],W=ne[8],H=ne[9],q=ne[10],J=ne[11],pt=ne[12],_t=ne[13],gt=ne[14],yt=ne[15],K=U*N-b*I,Pt=U*$-E*I,Gt=U*k-C*I,Ut=b*$-E*N,Bt=b*k-C*N,wt=E*k-C*$,Rt=W*_t-H*pt,Ct=W*gt-q*pt,Nt=W*yt-J*pt,At=H*gt-q*_t,Yt=H*yt-J*_t,At=q*yt-J*gt,zt=K*At-Pt*Yt+Gt*At+Ut*Nt-Bt*Ct+wt*Rt,zt=1/zt,ae[0]=(N*At-$*Yt+k*At)*zt,ae[4]=(-b*At+E*Yt-C*At)*zt,ae[8]=(_t*wt-gt*Bt+yt*Ut)*zt,ae[12]=(-H*wt+q*Bt-J*Ut)*zt,ae[1]=(-I*At+$*Nt-k*Ct)*zt,ae[5]=(U*At-E*Nt+C*Ct)*zt,ae[9]=(-pt*wt+gt*Gt-yt*Pt)*zt,ae[13]=(W*wt-q*Gt+J*Pt)*zt,ae[2]=(I*Yt-N*Nt+k*Rt)*zt,ae[6]=(-U*Yt+b*Nt-C*Rt)*zt,ae[10]=(pt*Bt-_t*Gt+yt*K)*zt,ae[14]=(-W*Bt+H*Gt-J*K)*zt,ae[3]=(-I*At+N*Ct-$*Rt)*zt,ae[7]=(U*At-b*Ct+E*Rt)*zt,ae[11]=(-pt*Ut+_t*Pt-gt*K)*zt,ae[15]=(W*Ut-H*Pt+q*K)*zt,!Ai.includes(he.uniformBuffer_meshMatrix)&&Ai.push(he.uniformBuffer_meshMatrix),he.uniformBuffer_meshMatrix.meshFloat32Array.set(he.matrix,he.offsetMatrix/Float32Array.BYTES_PER_ELEMENT),he.uniformBuffer_meshMatrix.meshFloat32Array.set(he.normalMatrix,he.offsetNormalMatrix/Float32Array.BYTES_PER_ELEMENT)),fe){let t,e=fe.joints,r=0,n=e.length,a=new Float32Array(16*n),s=new Float32Array([ne[0],ne[1],ne[2],ne[3],ne[4],ne[5],ne[6],ne[7],ne[8],ne[9],ne[10],ne[11],ne[12],ne[13],ne[14],ne[15]]),l=s,u=s,c=u[0],h=u[1],p=u[2],v=u[3],S=u[4],y=u[5],G=u[6],U=u[7],b=u[8],E=u[9],C=u[10],I=u[11],N=u[12],$=u[13],k=u[14],W=u[15],H=E*k*U-$*C*U+$*G*I-y*k*I-E*G*W+y*C*W,q=N*C*U-b*k*U-N*G*I+S*k*I+b*G*W-S*C*W,J=b*$*U-N*E*U+N*y*I-S*$*I-b*y*W+S*E*W,K=N*E*G-b*$*G-N*y*C+S*$*C+b*y*k-S*E*k,pt=c*H+h*q+p*J+v*K;if(0===pt)return mat4.identity(s);{const t=1/pt;l[0]=H*t,l[1]=($*C*v-E*k*v-$*p*I+h*k*I+E*p*W-h*C*W)*t,l[2]=(y*k*v-$*G*v+$*p*U-h*k*U-y*p*W+h*G*W)*t,l[3]=(E*G*v-y*C*v-E*p*U+h*C*U+y*p*I-h*G*I)*t,l[4]=q*t,l[5]=(b*k*v-N*C*v+N*p*I-c*k*I-b*p*W+c*C*W)*t,l[6]=(N*G*v-S*k*v-N*p*U+c*k*U+S*p*W-c*G*W)*t,l[7]=(S*C*v-b*G*v+b*p*U-c*C*U-S*p*I+c*G*I)*t,l[8]=J*t,l[9]=(N*E*v-b*$*v-N*h*I+c*$*I+b*h*W-c*E*W)*t,l[10]=(S*$*v-N*y*v+N*h*U-c*$*U-S*h*W+c*y*W)*t,l[11]=(b*y*v-S*E*v-b*h*U+c*E*U+S*h*I-c*y*I)*t,l[12]=K*t,l[13]=(b*$*p-N*E*p+N*h*C-c*$*C-b*h*k+c*E*k)*t,l[14]=(N*y*p-S*$*p-N*h*G+c*$*G+S*h*k-c*y*k)*t,l[15]=(S*E*p-b*y*p+b*h*G-c*E*G-S*h*C+c*y*C)*t}for(;r<n;r++)t=e[r].matrix,a[16*r+0]=t[0],a[16*r+1]=t[1],a[16*r+2]=t[2],a[16*r+3]=t[3],a[16*r+4]=t[4],a[16*r+5]=t[5],a[16*r+6]=t[6],a[16*r+7]=t[7],a[16*r+8]=t[8],a[16*r+9]=t[9],a[16*r+10]=t[10],a[16*r+11]=t[11],a[16*r+12]=t[12],a[16*r+13]=t[13],a[16*r+14]=t[14],a[16*r+15]=t[15];ce.uniformBuffer_vertex.float32Array.set(s,ce.uniformBufferDescriptor_vertex.redStructOffsetMap.globalTransformOfNodeThatTheMeshIsAttachedTo/Float32Array.BYTES_PER_ELEMENT),ce.uniformBuffer_vertex.float32Array.set(a,ce.uniformBufferDescriptor_vertex.redStructOffsetMap.jointMatrix/Float32Array.BYTES_PER_ELEMENT),fe.inverseBindMatrices._UUID||(fe.inverseBindMatrices._UUID=JSON.stringify(fe.inverseBindMatrices));let _t=ce.uniformBuffer_vertex._UUID;Vi[_t]!=fe.inverseBindMatrices._UUID&&(ce.uniformBuffer_vertex.float32Array.set(fe.inverseBindMatrices,ce.uniformBufferDescriptor_vertex.redStructOffsetMap.inverseBindMatrixForJoint/Float32Array.BYTES_PER_ELEMENT),Vi[_t]=fe.inverseBindMatrices._UUID),ce.uniformBuffer_vertex.GPUBuffer.setSubData(0,ce.uniformBuffer_vertex.float32Array)}Le||renderScene(t,e,r,he.children),he.dirtyPipeline=!1,he.dirtyTransform=!1}},Yi=(t=>{let e,r=[];return(t,n,a)=>{e=n.scene,e.skyBox&&(.6*n.camera.farClipping!=e.skyBox._prevScale&&(e.skyBox.scaleX=e.skyBox.scaleY=e.skyBox.scaleZ=e.skyBox._prevScale=.6*n.camera.farClipping),r.push(e.skyBox)),e.grid&&r.push(e.grid),e.axis&&r.push(e.axis),r.length&&renderScene(t,n,a,r),r.length=0}})(),renderView=(t,e,r,n)=>{let a,s,l=performance.now();a=e.scene,s=a.backgroundColorRGBA,e.camera.update&&e.camera.update(),Ii=e.computeViewFrustumPlanes(e);let u={colorAttachments:[{attachment:e.baseAttachmentView,resolveTarget:e.baseAttachment_ResolveTargetView,loadValue:{r:s[0],g:s[1],b:s[2],a:s[3]}},{attachment:e.baseAttachment_mouseColorID_depthView,resolveTarget:e.baseAttachment_mouseColorID_depth_ResolveTargetView,loadValue:{r:0,g:0,b:0,a:0}}],depthStencilAttachment:{attachment:e.baseDepthStencilAttachmentView,depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}},c=t.device.createCommandEncoder(),h=c.beginRenderPass(u);e.updateSystemUniform(h,t);let p=e.viewRect;h.setViewport(0,0,p[2],p[3],0,1),h.setScissorRect(0,0,p[2],p[3]),Yi(t,e,h),renderScene(t,e,h,a._flatChildList),((t,e,r)=>{Ni.length&&renderScene(t,e,r,Ni,Render.DRAW_LAYER_INDEX1),Ni.length=0})(t,e,h),((t,e,r)=>{if(Oi.length){let n=[],a=Oi.length;for(Oi.sort((t,e)=>t.z>e.z?-1:t.z<e.z?1:0);a--;)n[a]=Oi[a].targetText;renderScene(t,e,r,n,Render.DRAW_LAYER_INDEX2_Z_POINT_SORT)}Oi.length=0})(t,e,h),((t,e,r)=>{if(e.debugLightList.length){let n=e.useFrustumCulling;e.useFrustumCulling=!1,renderScene(t,e,r,e.debugLightList),e.useFrustumCulling=n}})(t,e,h),h.endPass(),Bi.baseRenderTime=performance.now()-l,l=performance.now();let v=e.postEffect.effectList.length?((t,e)=>{let r=e.baseAttachment_ResolveTargetView,n=e.baseAttachment_ResolveTarget,a=0,s=e.postEffect.effectList.length;for(;a<s;a++){let s=e.postEffect.effectList[a];s.render(t,e,renderScene,r),r=s.baseAttachmentView,n=s.baseAttachment}return n})(t,e):e.baseAttachment_ResolveTarget;Bi.postEffectRenderTime=performance.now()-l,l=performance.now(),((t,e,r,n,a)=>{let s,l,u=e.viewRect,[c,h,p,v]=u,[S,y]=[t.canvas.width,t.canvas.height];s=0,l=0,c<0?(s=-c,p+=c,c=0,p<0&&(s=0,p=0)):(p=p+c>S?p-c:p,p>S&&(p=S-c),p<0&&(p=0),p+c>S&&(p=0),c>S&&(c=S)),h<0?(l=-h,v+=h,h=0,v<0&&(l=0,v=0)):(v=v+h>y?v-h:v,v>y&&(v=y-h),v<0&&(v=0),v+h>y&&(v=0),h>y&&(h=y)),r.copyTextureToTexture({texture:n,origin:{x:s,y:l,z:0}},{texture:a,origin:{x:c,y:h,z:0}},{width:p,height:v,depth:1})})(t,e,c,v,r),t.device.defaultQueue.submit([c.finish()]),Bi.finalRenderTime=performance.now()-l};class Render{constructor(){}render(t,e){Di=t;let r,n=Ti.resetData(e.viewList),a=0,s=e.viewList.length;Ci={};let l=[];for(;a<s;a++)r=e.viewList[a],Bi=n[a],Render.clearStateCache(),DisplayContainer.needFlatListUpdate&&(r.scene._flatChildList=Fe.getFlatChildList(r.scene._children)),renderView(e,r,e.swapChain.getCurrentTexture()),l.push(r.mouseEventChecker.check(e));for(l.includes("pointer")?e.canvas.style.cursor="pointer":e.canvas.style.cursor="default",a=Ai.length;a--;)Ai[a].GPUBuffer.setSubData(0,Ai[a].meshFloat32Array);DisplayContainer.needFlatListUpdate=!1,Ai.length=0,Si.animationLooper(t),Ti.update()}}_defineProperty(Render,"clearStateCache",t=>{wi=null,Fi=null,Ri=null}),_defineProperty(Render,"DRAW_LAYER_INDEX0",0),_defineProperty(Render,"DRAW_LAYER_INDEX1",1),_defineProperty(Render,"DRAW_LAYER_INDEX2_Z_POINT_SORT",2);class BaseLight extends UUID{get color(){return _classPrivateFieldGet(this,Xi)}set color(t){_classPrivateFieldSet(this,Xi,t);let e=Fe.hexToRGB_ZeroToOne(t);this._colorRGBA[0]=e[0],this._colorRGBA[1]=e[1],this._colorRGBA[2]=e[2],this._colorRGBA[3]=1,this._debugMaterial.color=t}get colorRGBA(){return this._colorRGBA}get x(){return this._x}set x(t){this._x=this._debugMesh.x=t,this._debugMesh.targetTo(0,0,0)}get y(){return this._y}set y(t){this._y=this._debugMesh.y=t,this._debugMesh.targetTo(0,0,0)}get z(){return this._z}set z(t){this._z=this._debugMesh.z=t,this._debugMesh.targetTo(0,0,0)}get intensity(){return this._intensity}set intensity(t){this._intensity=t}constructor(t){super(),_defineProperty(this,"_intensity",1),_defineProperty(this,"_x",0),_defineProperty(this,"_y",0),_defineProperty(this,"_z",0),Xi.set(this,{writable:!0,value:"#ff0000"}),_defineProperty(this,"_colorRGBA",new Float32Array([1,0,0,1])),_defineProperty(this,"_debugMesh",void 0),_defineProperty(this,"_debugMaterial",void 0),_defineProperty(this,"useDebugMesh",!1),this._debugMesh=new Mesh(t),this._debugMaterial=new ColorMaterial(t),this._debugMaterial.colorAlpha=.5}}var Xi=new WeakMap;class PipelinePostEffect extends UUID{constructor(t,e){super(),zi.set(this,{writable:!0,value:void 0}),$i.set(this,{writable:!0,value:void 0}),_defineProperty(this,"GPURenderPipeline",void 0),_classPrivateFieldSet(this,zi,t),_classPrivateFieldSet(this,$i,e),this.GPURenderPipeline=null}update(t,e){let r=_classPrivateFieldGet(this,$i);const n=t.device,a={layout:n.createPipelineLayout({bindGroupLayouts:[e.systemUniformInfo_vertex.GPUBindGroupLayout,e.systemUniformInfo_fragment.GPUBindGroupLayout,r.GPUBindGroupLayout,r._material.GPUBindGroupLayout]}),vertexStage:{module:r._material.vShaderModule.GPUShaderModule,entryPoint:"main"},fragmentStage:{module:r._material.fShaderModule.GPUShaderModule,entryPoint:"main"},vertexState:r._geometry.vertexState,colorStates:[{format:t.swapChainFormat,colorBlend:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alphaBlend:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"}}],rasterizationState:{frontFace:"ccw",cullMode:r._cullMode},primitiveTopology:r._primitiveTopology,sampleCount:1};this.GPURenderPipeline=n.createRenderPipeline(a)}}var zi=new WeakMap,$i=new WeakMap;class BasePostEffect extends(er.mix(BaseMaterial)){constructor(t){super(t),ki.set(this,{writable:!0,value:[]}),_defineProperty(this,"baseAttachment",void 0),_defineProperty(this,"baseAttachmentView",void 0),this.quad=new Mesh(t,new Plane(t),this),this.quad.pipeline=new PipelinePostEffect(t,this.quad),this.sampler=new Sampler(t,{magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"repeat"})}checkSize(t,e){if([_classPrivateFieldGet(this,ki)[2],_classPrivateFieldGet(this,ki)[3]].toString()!=[e.viewRect[2],e.viewRect[3]].toString())return this.baseAttachment&&this.baseAttachment.destroy(),_classPrivateFieldSet(this,ki,e.viewRect.concat()),this.baseAttachment=t.device.createTexture({size:{width:e.viewRect[2],height:e.viewRect[3],depth:1},sampleCount:1,format:t.swapChainFormat,usage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.SAMPLED}),this.baseAttachmentView=this.baseAttachment.createView(),!0}render(t,e,r,n){let a=this.checkSize(t,e);const s=t.device.createCommandEncoder(),l=s.beginRenderPass({colorAttachments:[{attachment:this.baseAttachmentView,loadValue:{r:0,g:0,b:0,a:0}}]});let u=this.sourceTexture===n;this.sourceTexture=n,u||this.resetBindingInfo(),a&&this.quad.pipeline.update(t,e),Render.clearStateCache(),e.updateSystemUniform(l,t),r(t,e,l,[this.quad]),l.endPass(),t.device.defaultQueue.submit([s.finish()])}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this.sampler.GPUSampler},{binding:2,resource:this.sourceTexture}],this._afterResetBindingInfo()}}var ki=new WeakMap;_defineProperty(BasePostEffect,"vertexShaderGLSL",""),_defineProperty(BasePostEffect,"fragmentShaderGLSL",""),_defineProperty(BasePostEffect,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(BasePostEffect,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(BasePostEffect,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(BasePostEffect,"uniformBufferDescriptor_fragment",BaseMaterial.uniformBufferDescriptor_empty);var Wi=new WeakMap,Zi=new WeakMap,Hi=new WeakMap,ji=new WeakMap,qi=new WeakMap,Qi=new WeakMap,Ji=new WeakMap,Ki=new WeakMap,tn=new WeakMap,en=new WeakMap,rn=new WeakMap,nn=new WeakMap,an=new WeakMap,on=new WeakMap,sn=new WeakMap;class AmbientLight extends BaseLight{constructor(t,e="#111",r=.1){super(t),this.color=e,this.intensity=r}}class Sphere extends baseGeometry{constructor(t,e=1,r=8,n=8,a=0,s=2*Math.PI,l=0,u=Math.PI,c=1){let h;if(super(),ln.set(this,{writable:!0,value:function(){let t,e,r,n,a,s,l,u,c=[],h=new Float32Array([0,0,0]),p=new Float32Array([0,0,0]);return function(v,S,y,G,U,b,E,C,I,N){t=C+I,n=0,c.length=0,h[0]=0,h[1]=0,h[2]=0,p[0]=0,p[1]=0,p[2]=0;let $=[],k=[];for(r=0;r<=U;r++){let t=[],a=r/U;for(e=0;e<=G;e++){let r=e/G;h.x=-y*Math.cos(b+r*E)*Math.sin(C+a*I),h.y=y*Math.cos(C+a*I),h.z=y*Math.sin(b+r*E)*Math.sin(C+a*I),$.push(h.x,h.y,h.z),p[0]=h.x,p[1]=h.y,p[2]=h.z,Ue.vec3.normalize(p,p),$.push(p[0],p[1],p[2]),$.push(r*N,a*N),t.push(n++)}c.push(t)}for(r=0;r<U;r++)for(e=0;e<G;e++)a=c[r][e+1],s=c[r][e],l=c[r+1][e],u=c[r+1][e+1],(0!==r||C>0)&&k.push(a,s,u),(r!==U-1||t<Math.PI)&&k.push(s,l,u);return new Geometry(v,new Buffer(v,`${S}_interleaveBuffer`,Buffer.TYPE_VERTEX,new Float32Array($),[new InterleaveInfo("vertexPosition","float3"),new InterleaveInfo("vertexNormal","float3"),new InterleaveInfo("texcoord","float2")]),new Buffer(v,`${S}_indexBuffer`,Buffer.TYPE_INDEX,new Uint32Array(k)))}}()}),r=Math.max(3,Math.floor(r)),n=Math.max(2,Math.floor(n)),h=[this.constructor.name,e,r,n,a,s,l,u,c].join("_"),t.state.Geometry.has(h))return t.state.Geometry.get(h);let p=_classPrivateFieldGet(this,ln).call(this,t,h,e,r,n,a,s,l,u,c);this.interleaveBuffer=p.interleaveBuffer,this.indexBuffer=p.indexBuffer,this.vertexState=p.vertexState,t.state.Geometry.set(h,this)}}var ln=new WeakMap;class Cylinder extends baseGeometry{constructor(t,e=1,r=1,n=1,a=8,s=1,l=!1,u=0,c=2*Math.PI,h=1){let p;if(super(),un.set(this,{writable:!0,value:function(){let t,e;return function(r,n,a,s,l,u,c,h,p,v,S){let y=[],G=[],U=0,b=[],E=l/2;return t=function(){let t,e,r=[],n=[],h=(s-a)/l;for(e=0;e<=c;e++){let G=[],C=e/c,I=C*(s-a)+a;for(t=0;t<=u;t++){let e=t/u,a=e*v+p,s=Math.sin(a),c=Math.cos(a);n[0]=I*s,n[1]=-C*l+E,n[2]=I*c,y.push(n[0],n[1],n[2]),r[0]=s,r[1]=h,r[2]=c,Ue.vec3.normalize(r,r),y.push(r[0],r[1],r[2]),y.push(e*S,C*S),G.push(U++)}b.push(G)}for(t=0;t<u;t++)for(e=0;e<c;e++){let r=b[e][t],n=b[e+1][t],a=b[e+1][t+1],s=b[e][t+1];G.push(r,n,s),G.push(n,a,s)}},e=function(t){let e,r,n,l=[],c=[],h=!0===t?a:s,b=!0===t?1:-1;for(r=U,e=1;e<=u;e++)y.push(0,E*b,0),y.push(0,b,0),y.push(.5*S,.5*S),U++;for(n=U,e=0;e<=u;e++){let t=e/u*v+p,r=Math.cos(t),n=Math.sin(t);c[0]=h*n,c[1]=E*b,c[2]=h*r,y.push(c[0],c[1],c[2]),y.push(0,b,0),l[0]=.5*r+.5,l[1]=.5*n*b+.5,y.push(l[0]*S,S-l[1]*S),U++}for(e=0;e<u;e++){let a=r+e,s=n+e;!0===t?G.push(s,s+1,a):G.push(s+1,s,a)}},t(),!1===h&&(a>0&&e(!0),s>0&&e(!1)),new Geometry(r,new Buffer(r,`${n}_interleaveBuffer`,Buffer.TYPE_VERTEX,new Float32Array(y),[new InterleaveInfo("vertexPosition","float3"),new InterleaveInfo("vertexNormal","float3"),new InterleaveInfo("texcoord","float2")]),new Buffer(r,`${n}_indexBuffer`,Buffer.TYPE_INDEX,new Uint32Array(G)))}}()}),p=[this.constructor.name,t,e,r,n,a,s,l,u,c,h].join("_"),t.state.Geometry.has(p))return t.state.Geometry.get(p);let v=_classPrivateFieldGet(this,un).call(this,t,p,e,r,n,a,s,l,u,c,h);this.interleaveBuffer=v.interleaveBuffer,this.indexBuffer=v.indexBuffer,this.vertexState=v.vertexState,t.state.Geometry.set(p,this)}}var un=new WeakMap;class DirectionalLight extends BaseLight{constructor(t,e="#ffffff",r=1){super(t),mn.set(this,{writable:!0,value:t=>{let e=new Mesh(t,new Sphere(t,1,16,16,16),this._debugMaterial);e.primitiveTopology="line-strip",this._debugMesh.addChild(e),[-.7,0,.7].forEach((e,r)=>{let n,a;n=new Mesh(t,new Cylinder(t,.01,.01,1==r?1e5:2),this._debugMaterial),n.rotationX=90,n.x=e,n.z=-1,a=new Mesh(t,new Cylinder(t,0,.25,.5),this._debugMaterial),a.y=1,n.addChild(a),this._debugMesh.addChild(n)})}}),_classPrivateFieldGet(this,mn).call(this,t),this.color=e,this.intensity=r}}var mn=new WeakMap;class PointLight extends BaseLight{get radius(){return this._radius}set radius(t){this._radius=t,this._debugMesh.setScale(t,t,t)}constructor(t,e="#ffffff",r=1,n=1){super(t),_defineProperty(this,"_radius",1),cn.set(this,{writable:!0,value:t=>{let e=new Mesh(t,new Sphere(t,1,32,32,32),this._debugMaterial);e.primitiveTopology="line-strip",this._debugMesh.addChild(e)}}),this.color=e,this.intensity=r,this.radius=n,_classPrivateFieldGet(this,cn).call(this,t)}}var cn=new WeakMap;class SpotLight extends BaseLight{constructor(t,e="#ffffff",r=1,n=.1,a=80){super(t),hn.set(this,{writable:!0,value:t=>{let e=new Mesh(t,new Cylinder(t,0,1,2),this._debugMaterial);e.rotationX=-90,e.primitiveTopology="line-strip",this._debugMesh.addChild(e)}}),this.color=e,this.intensity=r,this.cutoff=n,this.exponent=a,_classPrivateFieldGet(this,hn).call(this,t)}}var hn=new WeakMap;let dn=new Float32Array(1);class RefractionMaterial extends(er.mix(BaseMaterial,er.diffuseTexture,er.normalTexture,er.specularTexture,er.emissiveTexture,er.refractionTexture,er.displacementTexture,er.basicLightPropertys,er.alpha)){constructor(t,e,r,n,a,s,l){super(t),pn.set(this,{writable:!0,value:void 0}),this.diffuseTexture=e,this.refractionTexture=r,this.normalTexture=n,this.emissiveTexture=s,this.specularTexture=a,this.displacementTexture=l,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"refractionTexture":this._refractionTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(dn[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],dn):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],dn)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,dn[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],dn):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],dn),this.needResetBindingInfo=!0)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:12,resource:this._refractionTexture?this._refractionTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:13,resource:this._refractionTexture?this._refractionTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView}],this._afterResetBindingInfo()}}var pn=new WeakMap;_defineProperty(RefractionMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.calcDisplacement}    \n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\t\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n    } vertexUniforms;\n\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uDisplacementSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += calcDisplacement(vNormal, vertexUniforms.displacementFlowSpeedX, vertexUniforms.displacementFlowSpeedY, vertexUniforms.displacementPower, uv, uDisplacementTexture, uDisplacementSampler);\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\t\t\n\t}\n\t`),_defineProperty(RefractionMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float refractionPower;\n\t    float refractionRatio;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __refractionTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uSpecularSampler;\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 12 ) uniform sampler uRefractionSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 13 ) uniform textureCube uRefractionTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tfloat testAlpha = 0.0;\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uDiffuseSampler), vUV) ;\n\t\t\t\n\t    vec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\n\t\tif(fragmentUniforms.__refractionTextureRenderYn == TRUTHY) {\n\t\t\tvec3 I = normalize(vVertexPosition.xyz - systemUniforms.cameraPosition);\n\t\t\tvec3 R = refract(I, N, fragmentUniforms.refractionRatio);\n\t\t\tvec4 refractionColor = texture(samplerCube(uRefractionTexture,uRefractionSampler), R);\n\t\t\tdiffuseColor = mix(diffuseColor, refractionColor, fragmentUniforms.refractionPower);\n\t\t}\n\t\t\n\t\ttestAlpha = diffuseColor.a;\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t\tcalcPointLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(RefractionMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(RefractionMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"sampler"},{binding:2,visibility:GPUShaderStage.VERTEX,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:5,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:6,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:7,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:8,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:9,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:10,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:11,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:12,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:13,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture",textureDimension:"cube"}]}),_defineProperty(RefractionMaterial,"uniformBufferDescriptor_vertex",[{size:Ee.float,valueName:"displacementFlowSpeedX"},{size:Ee.float,valueName:"displacementFlowSpeedY"},{size:Ee.float,valueName:"displacementPower"},{size:Ee.float,valueName:"__displacementTextureRenderYn"}]),_defineProperty(RefractionMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"normalPower"},{size:Ee.float,valueName:"shininess"},{size:Ee.float,valueName:"specularPower"},{size:Ee.float4,valueName:"specularColorRGBA"},{size:Ee.float,valueName:"emissivePower"},{size:Ee.float,valueName:"refractionPower"},{size:Ee.float,valueName:"refractionRatio"},{size:Ee.float,valueName:"alpha"},{size:Ee.float,valueName:"useFlatMode"},{size:Ee.float,valueName:"__diffuseTextureRenderYn"},{size:Ee.float,valueName:"__refractionTextureRenderYn"},{size:Ee.float,valueName:"__normalTextureRenderYn"},{size:Ee.float,valueName:"__specularTextureRenderYn"},{size:Ee.float,valueName:"__emissiveTextureRenderYn"}]);let _n=new Float32Array(1);class Sprite3DMaterial extends(er.mix(BaseMaterial,er.diffuseTexture,er.alpha)){constructor(t,e){super(t),vn.set(this,{writable:!0,value:!1}),this.diffuseTexture=e,this.needResetBindingInfo=!0}get useFixedScale(){return _classPrivateFieldGet(this,vn)}set useFixedScale(t){_classPrivateFieldSet(this,vn,t),_n[0]=t?1:0,this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap.useFixedScale,_n),this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e}r&&(_n[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],_n):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],_n)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,_n[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.uniformBuffer_vertex.GPUBuffer.setSubData(this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],_n):this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],_n),this.needResetBindingInfo=!0)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}var vn=new WeakMap;_defineProperty(Sprite3DMaterial,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\n\tlayout( location = 3 ) out float vSumOpacity;\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float useFixedScale;\n    } vertexUniforms;\n    ${ShareGLSL.GLSL_SystemUniforms_vertex.getSprite3DMatrix}\n\tvoid main() {\n\t\tgl_Position = systemUniforms.perspectiveMTX * getSprite3DMatrix( systemUniforms.cameraMTX, meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] ) * vec4(position,1.0);\n\t\tif(vertexUniforms.useFixedScale == TRUTHY)  {\n\t\t\tgl_Position /= gl_Position.w;\n\t\t\tgl_Position.xy += position.xy * vec2((systemUniforms.perspectiveMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ])[0][0],(systemUniforms.perspectiveMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ])[1][1]);\n\t\t}\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t}\n\t`),_defineProperty(Sprite3DMaterial,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\t\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),_defineProperty(Sprite3DMaterial,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(Sprite3DMaterial,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(Sprite3DMaterial,"uniformBufferDescriptor_vertex",[{size:Ee.float,valueName:"useFixedScale"}]),_defineProperty(Sprite3DMaterial,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"alpha"},{size:Ee.float,valueName:"__diffuseTextureRenderYn"}]);class Box extends baseGeometry{constructor(t,e=1,r=1,n=1,a=1,s=1,l=1,u=1){let c;if(super(),gn.set(this,{writable:!0,value:function(){let t,e;return e=function(e,r,n,a,s,l,u,c,h,p,v,S,y){let G,U,b=c/v,E=h/S,C=c/2,I=h/2,N=p/2,$=v+1,k=S+1,W=0,H=[];for(U=0;U<k;U++){let t=U*E-I;for(G=0;G<$;G++){let r=G*b-C;H[n]=r*l,H[a]=t*u,H[s]=N,e.push(H.x,H.y,H.z),H[n]=0,H[a]=0,H[s]=p>0?1:-1,e.push(H.x,H.y,H.z),e.push(G/v*y,U/S*y),W+=1}}for(U=0;U<S;U++)for(G=0;G<v;G++){let e=t+G+$*U,n=t+G+$*(U+1),a=t+(G+1)+$*(U+1),s=t+(G+1)+$*U;r.push(e,n,s,n,a,s)}t+=W},function(r,n,a,s,l,u,c,h,p){let v=[],S=[];return t=0,e(v,S,"z","y","x",-1,-1,l,s,a,h,c,p),e(v,S,"z","y","x",1,-1,l,s,-a,h,c,p),e(v,S,"x","z","y",1,1,a,l,s,u,h,p),e(v,S,"x","z","y",1,-1,a,l,-s,u,h,p),e(v,S,"x","y","z",1,-1,a,s,l,u,c,p),e(v,S,"x","y","z",-1,-1,a,s,-l,u,c,p),new Geometry(r,new Buffer(r,`${n}_interleaveBuffer`,Buffer.TYPE_VERTEX,new Float32Array(v),[new InterleaveInfo("vertexPosition","float3"),new InterleaveInfo("vertexNormal","float3"),new InterleaveInfo("texcoord","float2")]),new Buffer(r,`${n}_indexBuffer`,Buffer.TYPE_INDEX,new Uint32Array(S)))}}()}),c=[this.constructor.name,e,r,n,a,s,l,u].join("_"),t.state.Geometry.has(c))return t.state.Geometry.get(c);let h=_classPrivateFieldGet(this,gn).call(this,t,c,e,r,n,a,s,l,u);this.interleaveBuffer=h.interleaveBuffer,this.indexBuffer=h.indexBuffer,this.vertexState=h.vertexState,t.state.Geometry.set(c,this)}}var gn=new WeakMap;var xn=new WeakMap,yn=new WeakMap,Tn=new WeakMap,Ln=new WeakMap,Gn=new WeakMap;let Un,En,Bn,Dn,Fn,Cn,Nn,On,Vn,Yn,setTexture=function(t){t._height=+t._height,t._svg.setAttribute("width",t._width),t._svg.setAttribute("height",t._height),t._svg.querySelector("foreignObject").setAttribute("height",t._height),t._svg.querySelector("table").style.height=t._height+"px",t._img.src="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(t._svg.outerHTML)};Un=function(t,e,r){let n;n=t._svg.querySelector("td").style,t["_"+e]=r,Object.defineProperty(t,e,{get:function(){return t["_"+e]},set:function(r){t["_"+e]=r,n[e]="number"==typeof r?r+="px":r,setTexture(t)}}),t[e]=r};Yn=function(t,e,r){let n=Ue.vec2.sqrDist(e,r);if(0===n)return Ue.vec2.sqrDist(t,e);let a=((t[0]-e[0])*(r[0]-e[0])+(t[1]-e[1])*(r[1]-e[1]))/n;return a=Math.max(0,Math.min(1,a)),Ue.vec2.sqrDist(t,Ue.vec2.lerp([0,0],e,r,a))},Vn=function(t,e,r,n,a){let s=a||[],l=t[e],u=t[r-1],c=0,h=1,p=e+1;for(;p<r-1;++p){let e=Yn(t[p],l,u);e>c&&(c=e,h=p)}return Math.sqrt(c)>n?(Vn(t,e,h+1,n,s),Vn(t,h,r,n,s)):s.push(l,u),s},Dn=function(t,e){null==e&&(e=1);let r,n,a,s,l=t.length,u=l-2,c=0;for(;c<l-1;c++)r=c?t[c-1].point:t[c].point,n=t[c].point,a=t[c+1].point,s=c===u?a:t[c+2].point,t[c].outPoint[0]=n[0]+(a[0]-r[0])/6*e,t[c].outPoint[1]=n[1]+(a[1]-r[1])/6*e,t[c].outPoint[2]=n[2]+(a[2]-r[2])/6*e,t[c+1].inPoint[0]=a[0]-(s[0]-n[0])/6*e,t[c+1].inPoint[1]=a[1]-(s[1]-n[1])/6*e,t[c+1].inPoint[2]=a[2]-(s[2]-n[2])/6*e;return t},Cn=function(t){let e,r,n,a=[],s=0;for(e=0,r=t.length;e<r;e++)n=t[e],0===s?(a[s++]=n.point,a[s++]=n.outPoint):(a[s++]=n.inPoint,a[s++]=n.point,t[e+1]&&(a[s++]=n.outPoint));return a},Fn=function(){let t,e;return t=function(t,e){let r=t[e+0],n=t[e+1],a=t[e+2],s=t[e+3],l=3*n[0]-2*r[0]-s[0],u=3*n[1]-2*r[1]-s[1],c=3*a[0]-2*s[0]-r[0],h=3*a[1]-2*s[1]-r[1];return l*=l,u*=u,c*=c,h*=h,l<c&&(l=c),u<h&&(u=h),l+u},e=function(r,n,a,s){let l=s||[];if(t(r,n)<a)l.push(r[n+0],r[n+3]);else{let t=.5,s=r[n+0],u=r[n+1],c=r[n+2],h=r[n+3],p=Ue.vec3.lerp([0,0],s,u,t),v=Ue.vec3.lerp([0,0],u,c,t),S=Ue.vec3.lerp([0,0],c,h,t),y=Ue.vec3.lerp([0,0],p,v,t),G=Ue.vec3.lerp([0,0],v,S,t),U=Ue.vec3.lerp([0,0],y,G,t);U.colorRGBA=s.colorRGBA,e([s,p,y,U],0,a,l),e([U,G,S,h],0,a,l)}return l},function(t,r){let n=[],a=(t.length-1)/3;a=Math.floor(a);let s,l=0;for(;l<a;++l)s=3*l,e(t,s,r,n);return n}}(),On=function(t){},Nn=function(t,e,r,n,a){let s,l,u,c;switch(t._interleaveData.length=0,t.type){case Line.CATMULL_ROM:case Line.BEZIER:if(e.length>1)for(t._serializedPoints=Cn(Line.CATMULL_ROM===t.type?Dn(e,r):e),s=Fn(t._serializedPoints,n),s=Vn(s,0,s.length,a),l=0,u=s.length;l<u;l++)c=s[l],t._interleaveData.push(c[0],c[1],c[2],...c.colorRGBA);else t._interleaveData.push(0,0,0,...Fe.hexToRGB_ZeroToOne(t.color));break;default:for(l=0,u=e.length;l<u;l++)c=e[l].point,t._interleaveData.push(c[0],c[1],c[2],...c.colorRGBA)}t.debug,t._upload()};class LinePoint{constructor(t=0,e=0,r=0,n=0,a=0,s=0,l=0,u=0,c=0,h,p){let v=[...Fe.hexToRGB_ZeroToOne(h),p];this.inPoint=[n,a,s],this.inPoint.colorRGBA=v,this.point=[t,e,r],this.point.colorRGBA=v,this.outPoint=[l,u,c],this.outPoint.colorRGBA=v}}class Line extends BaseObject3D{get type(){return _classPrivateFieldGet(this,Xn)}set type(t){t!==Line.LINEAR&&t!==Line.CATMULL_ROM&&t!==Line.BEZIER&&Fe.throwFunc("Line : 허용하지 않는 타입","입력값 : "+t),_classPrivateFieldSet(this,Xn,t),Nn(this,_classPrivateFieldGet(this,Zn),_classPrivateFieldGet(this,$n),_classPrivateFieldGet(this,Wn),_classPrivateFieldGet(this,kn))}get tension(){return _classPrivateFieldGet(this,$n)}set tension(t){_classPrivateFieldSet(this,$n,t),Nn(this,_classPrivateFieldGet(this,Zn),_classPrivateFieldGet(this,$n),_classPrivateFieldGet(this,Wn),_classPrivateFieldGet(this,kn))}get distance(){return _classPrivateFieldGet(this,kn)}set distance(t){_classPrivateFieldSet(this,kn,t),Nn(this,_classPrivateFieldGet(this,Zn),_classPrivateFieldGet(this,$n),_classPrivateFieldGet(this,Wn),_classPrivateFieldGet(this,kn))}get tolerance(){return _classPrivateFieldGet(this,Wn)}set tolerance(t){_classPrivateFieldSet(this,Wn,t),Nn(this,_classPrivateFieldGet(this,Zn),_classPrivateFieldGet(this,$n),_classPrivateFieldGet(this,Wn),_classPrivateFieldGet(this,kn))}constructor(t,e="#ff0000",r=Line.LINEAR){super(t),Xn.set(this,{writable:!0,value:void 0}),$n.set(this,{writable:!0,value:void 0}),kn.set(this,{writable:!0,value:void 0}),Wn.set(this,{writable:!0,value:void 0}),Zn.set(this,{writable:!0,value:[]}),this.redGPUContext=t,this._interleaveData=[0,0,0],this.primitiveTopology="line-strip",this._serializedPoints=[],_classPrivateFieldSet(this,$n,1),_classPrivateFieldSet(this,Wn,.01),_classPrivateFieldSet(this,kn,.1),this.color=e,_classPrivateFieldSet(this,Xn,r),this._debug=!1,this.material=new LineMaterial(this.redGPUContext),this.dirtyPipeline=!1}addPoint(t=0,e=0,r=0,n,a=1,s=0,l=0,u=0,c=0,h=0,p=0){"number"==typeof t||Fe.throwFunc("Line : addPoint - x값은 숫자만 허용","입력값 : "+t),"number"==typeof e||Fe.throwFunc("Line : addPoint - y값은 숫자만 허용","입력값 : "+e),"number"==typeof r||Fe.throwFunc("Line : addPoint - z값은 숫자만 허용","입력값 : "+r),"number"==typeof s||Fe.throwFunc("Line : addPoint - inX값은 숫자만 허용","입력값 : "+s),"number"==typeof l||Fe.throwFunc("Line : addPoint - inY값은 숫자만 허용","입력값 : "+l),"number"==typeof u||Fe.throwFunc("Line : addPoint - inZ값은 숫자만 허용","입력값 : "+u),"number"==typeof c||Fe.throwFunc("Line : addPoint - outX값은 숫자만 허용","입력값 : "+c),"number"==typeof h||Fe.throwFunc("Line : addPoint - outY값은 숫자만 허용","입력값 : "+h),"number"==typeof p||Fe.throwFunc("Line : addPoint - outZ값은 숫자만 허용","입력값 : "+p),_classPrivateFieldGet(this,Zn).push(new LinePoint(t,e,r,s,l,u,c,h,p,n||this.color,a)),Nn(this,_classPrivateFieldGet(this,Zn),_classPrivateFieldGet(this,$n),_classPrivateFieldGet(this,Wn),_classPrivateFieldGet(this,kn))}addPointAt(t,e=0,r=0,n=0,a,s=1,l=0,u=0,c=0,h=0,p=0,v=0){"number"==typeof e||Fe.throwFunc("Line : addPoint - x값은 숫자만 허용","입력값 : "+e),"number"==typeof r||Fe.throwFunc("Line : addPoint - y값은 숫자만 허용","입력값 : "+r),"number"==typeof n||Fe.throwFunc("Line : addPoint - z값은 숫자만 허용","입력값 : "+n),"number"==typeof l||Fe.throwFunc("Line : addPoint - inX값은 숫자만 허용","입력값 : "+l),"number"==typeof u||Fe.throwFunc("Line : addPoint - inY값은 숫자만 허용","입력값 : "+u),"number"==typeof c||Fe.throwFunc("Line : addPoint - inZ값은 숫자만 허용","입력값 : "+c),"number"==typeof h||Fe.throwFunc("Line : addPoint - outX값은 숫자만 허용","입력값 : "+h),"number"==typeof p||Fe.throwFunc("Line : addPoint - outY값은 숫자만 허용","입력값 : "+p),"number"==typeof v||Fe.throwFunc("Line : addPoint - outZ값은 숫자만 허용","입력값 : "+v),"number"==typeof t||Fe.throwFunc("addPointAt","index는 숫자만 입력가능","입력값 : "+t),_classPrivateFieldGet(this,Zn).length<t&&(t=_classPrivateFieldGet(this,Zn).length),null!=t?_classPrivateFieldGet(this,Zn).splice(t,0,new LinePoint(e,r,n,l,u,c,h,p,v,a||this.color,s)):_classPrivateFieldGet(this,Zn).push(new LinePoint(e,r,n,l,u,c,h,p,v,a||this.color,s)),Nn(this,_classPrivateFieldGet(this,Zn),_classPrivateFieldGet(this,$n),_classPrivateFieldGet(this,Wn),_classPrivateFieldGet(this,kn))}removePointAt(t){"number"!=typeof t&&Fe.throwFunc("removeChildAt","index가 Number형이 아님 ","입력값 : "+t),_classPrivateFieldGet(this,Zn)[t]?_classPrivateFieldGet(this,Zn).splice(t,1):Fe.throwFunc("removeChildAt","index 해당인덱스에 위치한 포인트가 없음.","입력값 : "+t),Nn(this,_classPrivateFieldGet(this,Zn),_classPrivateFieldGet(this,$n),_classPrivateFieldGet(this,Wn),_classPrivateFieldGet(this,kn))}removeAllPoint(){_classPrivateFieldGet(this,Zn).length=0,Nn(this,_classPrivateFieldGet(this,Zn),_classPrivateFieldGet(this,$n),_classPrivateFieldGet(this,Wn),_classPrivateFieldGet(this,kn)),this._upload()}_upload(){this._UUID=UUID.getNextUUID(),_classPrivateFieldGet(this,Zn).length?(this._interleaveBuffer=new Buffer(this.redGPUContext,"Line_InterleaveBuffer_"+this._UUID,Buffer.TYPE_VERTEX,new Float32Array(this._interleaveData),[new InterleaveInfo("vertexPosition","float3"),new InterleaveInfo("vertexColor","float4")]),this.geometry=new Geometry(this.redGPUContext,this._interleaveBuffer)):(this._interleaveBuffer=null,this.geometry=null)}}var Xn=new WeakMap,$n=new WeakMap,kn=new WeakMap,Wn=new WeakMap,Zn=new WeakMap;_defineProperty(Line,"LINEAR","linear"),_defineProperty(Line,"CATMULL_ROM","catmullRom"),_defineProperty(Line,"BEZIER","bezier");const Hn=new Float32Array(1);class PostEffect_BrightnessContrast extends BasePostEffect{get brightness(){return this._brightness}set brightness(t){this._brightness=t,Hn[0]=this._brightness/255,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.brightness,Hn)}get contrast(){return this._contrast}set contrast(t){this._contrast=t,Hn[0]=this._contrast/255,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.contrast,Hn)}constructor(t){super(t),_defineProperty(this,"_brightness",0),_defineProperty(this,"_contrast",0)}}_defineProperty(PostEffect_BrightnessContrast,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),_defineProperty(PostEffect_BrightnessContrast,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float brightness;\n        float contrast;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tif ( fragmentUniforms.contrast > 0.0 ) finalColor.rgb = ( finalColor.rgb - 0.5 ) / ( 1.0 - fragmentUniforms.contrast ) + 0.5;\n\t\telse finalColor.rgb = ( finalColor.rgb - 0.5 ) * ( 1.0 + fragmentUniforms.contrast ) + 0.5;\n\t\tfinalColor.rgb += fragmentUniforms.brightness;\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_BrightnessContrast,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_BrightnessContrast,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_BrightnessContrast,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_BrightnessContrast,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"brightness"},{size:Ee.float,valueName:"contrast"}]);class PostEffect_Gray extends BasePostEffect{constructor(t){super(t)}}_defineProperty(PostEffect_Gray,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),_defineProperty(PostEffect_Gray,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV ) ;\n\t    float gray = (diffuseColor.r  + diffuseColor.g + diffuseColor.b)/3.0;\n\t\toutColor = vec4( gray, gray, gray, 1.0);;\n\t}\n`),_defineProperty(PostEffect_Gray,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_Gray,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_Gray,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_Gray,"uniformBufferDescriptor_fragment",BaseMaterial.uniformBufferDescriptor_empty);const qn=new Float32Array(1);class PostEffect_HueSaturation extends BasePostEffect{get hue(){return this._hue}set hue(t){this._hue=t,qn[0]=this._hue/180,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.hue,qn)}get saturation(){return this._saturation}set saturation(t){this._saturation=t,qn[0]=this._saturation/100,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.saturation,qn)}constructor(t){super(t),_defineProperty(this,"_hue",0),_defineProperty(this,"_saturation",0)}}_defineProperty(PostEffect_HueSaturation,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),_defineProperty(PostEffect_HueSaturation,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float hue;\n        float saturation;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\t\n\t\tfloat hue_value = fragmentUniforms.hue;\n\t\tfloat angle = hue_value * 3.1415926535897932384626433832795;\n\t\tfloat s = sin(angle), c = cos(angle);\n\t\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\n\t\tfloat len = length(finalColor.rgb);\n\t\t\n\t\tfinalColor.rgb = vec3(\n\t\t\tdot(finalColor.rgb, weights.xyz),\n\t\t\tdot(finalColor.rgb, weights.zxy),\n\t\t\tdot(finalColor.rgb, weights.yzx)\n\t\t);\n\t\t\n\t\tfloat average = (finalColor.r + finalColor.g + finalColor.b) / 3.0;\n\t\tfloat saturation_value = fragmentUniforms.saturation;\n\t\tif (saturation_value > 0.0) finalColor.rgb += (average - finalColor.rgb) * (1.0 - 1.0 / (1.001 - saturation_value));\n\t\telse finalColor.rgb += (average - finalColor.rgb) * (-saturation_value);\n\t\t\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_HueSaturation,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_HueSaturation,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_HueSaturation,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_HueSaturation,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"hue"},{size:Ee.float,valueName:"saturation"}]);class PostEffect_Invert extends BasePostEffect{constructor(t){super(t)}}_defineProperty(PostEffect_Invert,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),_defineProperty(PostEffect_Invert,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV ) ;\n\t\tdiffuseColor.rgb = 1.0 - diffuseColor.rgb;\n\t\toutColor = diffuseColor;\n\t}\n`),_defineProperty(PostEffect_Invert,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_Invert,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_Invert,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_Invert,"uniformBufferDescriptor_fragment",BaseMaterial.uniformBufferDescriptor_empty);const Qn=new Float32Array(1);class PostEffect_Threshold extends BasePostEffect{get threshold(){return this._threshold}set threshold(t){this._threshold=t,Qn[0]=this._threshold,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.threshold,Qn)}constructor(t){super(t),_defineProperty(this,"_threshold",128)}}_defineProperty(PostEffect_Threshold,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),_defineProperty(PostEffect_Threshold,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float threshold;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tfloat v = 0.0;\n\t\tif( 0.2126 * finalColor.r + 0.7152 * finalColor.g + 0.0722 * finalColor.b >= fragmentUniforms.threshold/255.0 ) v = 1.0;\n\t\tfinalColor.r = finalColor.g = finalColor.b = v;\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_Threshold,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_Threshold,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_Threshold,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_Threshold,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"threshold"}]);const Jn=new Float32Array(1);class PostEffect_BlurX extends BasePostEffect{get size(){return this._size}set size(t){this._size=t,Jn[0]=this._size,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.size,Jn)}constructor(t){super(t),_defineProperty(this,"_size",50)}}_defineProperty(PostEffect_BlurX,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),_defineProperty(PostEffect_BlurX,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float size;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tvec2 delta;\n\t\tfloat total = 0.0;\n\t\tfloat offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\t\tdelta = vec2( fragmentUniforms.size/systemUniforms.resolution.x, 0.0 );\n\t\tfor (float t = -10.0; t <= 10.0; t++) {\n\t\t\tfloat percent = (t + offset - 0.5) / 10.0;\n\t\t\tfloat weight = 1.0 - abs(percent);\n\t\t\tvec4 color = texture( sampler2D( uSourceTexture, uSampler ), vUV  + delta * percent );\n\t\t\tcolor.rgb *= color.a;\n\t\t\tfinalColor += color * weight;\n\t\t\ttotal += weight;\n\t\t}\n\t\tfinalColor = finalColor / total;\n\t\tfinalColor.rgb /= finalColor.a + 0.00001;\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_BlurX,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_BlurX,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_BlurX,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_BlurX,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"size"}]);const Kn=new Float32Array(1);class PostEffect_BlurY extends BasePostEffect{get size(){return this._size}set size(t){this._size=t,Kn[0]=this._size,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.size,Kn)}constructor(t){super(t),_defineProperty(this,"_size",50)}}_defineProperty(PostEffect_BlurY,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),_defineProperty(PostEffect_BlurY,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float size;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tvec2 delta;\n\t\tfloat total = 0.0;\n\t\tfloat offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\t\tdelta = vec2( 0.0, fragmentUniforms.size/systemUniforms.resolution.y );\n\t\tfor (float t = -10.0; t <= 10.0; t++) {\n\t\t\tfloat percent = (t + offset - 0.5) / 10.0;\n\t\t\tfloat weight = 1.0 - abs(percent);\n\t\t\tvec4 color = texture( sampler2D( uSourceTexture, uSampler ), vUV  + delta * percent );\n\t\t\tcolor.rgb *= color.a;\n\t\t\tfinalColor += color * weight;\n\t\t\ttotal += weight;\n\t\t}\n\t\tfinalColor = finalColor / total;\n\t\tfinalColor.rgb /= finalColor.a + 0.00001;\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_BlurY,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_BlurY,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_BlurY,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_BlurY,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"size"}]);class PostEffect_GaussianBlur extends BasePostEffect{get radius(){return this._radius}set radius(t){this._radius=t,_classPrivateFieldGet(this,ta).size=t,_classPrivateFieldGet(this,ea).size=t}constructor(t){super(t),ta.set(this,{writable:!0,value:void 0}),ea.set(this,{writable:!0,value:void 0}),_defineProperty(this,"_radius",void 0),_classPrivateFieldSet(this,ta,new PostEffect_BlurX(t)),_classPrivateFieldSet(this,ea,new PostEffect_BlurY(t)),this.radius=5}render(t,e,r,n){this.checkSize(t,e),_classPrivateFieldGet(this,ta).render(t,e,r,n),_classPrivateFieldGet(this,ea).render(t,e,r,_classPrivateFieldGet(this,ta).baseAttachmentView),this.baseAttachment=_classPrivateFieldGet(this,ea).baseAttachment,this.baseAttachmentView=_classPrivateFieldGet(this,ea).baseAttachmentView}}var ta=new WeakMap,ea=new WeakMap;_defineProperty(PostEffect_GaussianBlur,"vertexShaderGLSL",`\n\t\t${ShareGLSL.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),_defineProperty(PostEffect_GaussianBlur,"fragmentShaderGLSL",`\n\t\t${ShareGLSL.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),_defineProperty(PostEffect_GaussianBlur,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_GaussianBlur,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_GaussianBlur,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_GaussianBlur,"uniformBufferDescriptor_fragment",BaseMaterial.uniformBufferDescriptor_empty);const ra=new Float32Array(1);class PostEffect_Bloom_blend extends BasePostEffect{get bloomStrength(){return this._bloomStrength}set bloomStrength(t){this._bloomStrength=t,ra[0]=this._bloomStrength,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.bloomStrength,ra)}get exposure(){return this._exposure}set exposure(t){this._exposure=t,ra[0]=this._exposure,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.exposure,ra)}constructor(t){super(t),_defineProperty(this,"blurTexture",void 0),_defineProperty(this,"_bloomStrength",15),_defineProperty(this,"_exposure",15)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this.sampler.GPUSampler},{binding:2,resource:this.sourceTexture},{binding:3,resource:this.blurTexture}],this._afterResetBindingInfo()}}_defineProperty(PostEffect_Bloom_blend,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),_defineProperty(PostEffect_Bloom_blend,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float bloomStrength;\n        float exposure;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uBlurTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor;\n\t\tvec4 blurColor;\n\t\tvec4 finalColor;\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tblurColor = texture( sampler2D( uBlurTexture, uSampler ), vUV );\t\n\t\tfinalColor = diffuseColor;\n\t\tfinalColor.rgb = (finalColor.rgb  + blurColor.rgb * fragmentUniforms.bloomStrength ) * fragmentUniforms.exposure ;\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_Bloom_blend,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_Bloom_blend,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(PostEffect_Bloom_blend,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_Bloom_blend,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"bloomStrength"},{size:Ee.float,valueName:"exposure"}]);class PostEffect_Bloom extends BasePostEffect{get blur(){return _classPrivateFieldGet(this,oa)}set blur(t){_classPrivateFieldSet(this,oa,t),_classPrivateFieldGet(this,ia).radius=t}get threshold(){return _classPrivateFieldGet(this,sa)}set threshold(t){_classPrivateFieldSet(this,sa,t),_classPrivateFieldGet(this,aa).threshold=t}get exposure(){return _classPrivateFieldGet(this,la)}set exposure(t){_classPrivateFieldSet(this,la,t),_classPrivateFieldGet(this,na).exposure=t}get bloomStrength(){return _classPrivateFieldGet(this,ua)}set bloomStrength(t){_classPrivateFieldSet(this,ua,t),_classPrivateFieldGet(this,na).bloomStrength=t}constructor(t){super(t),ia.set(this,{writable:!0,value:void 0}),na.set(this,{writable:!0,value:void 0}),aa.set(this,{writable:!0,value:void 0}),oa.set(this,{writable:!0,value:void 0}),sa.set(this,{writable:!0,value:void 0}),la.set(this,{writable:!0,value:void 0}),ua.set(this,{writable:!0,value:void 0}),_classPrivateFieldSet(this,aa,new PostEffect_Threshold(t)),_classPrivateFieldSet(this,ia,new PostEffect_GaussianBlur(t)),_classPrivateFieldSet(this,na,new PostEffect_Bloom_blend(t)),this.blur=20,this.threshold=75,this.exposure=1,this.bloomStrength=1.2}render(t,e,r,n){this.checkSize(t,e),_classPrivateFieldGet(this,aa).render(t,e,r,n),_classPrivateFieldGet(this,ia).render(t,e,r,_classPrivateFieldGet(this,aa).baseAttachmentView),_classPrivateFieldGet(this,na).blurTexture=_classPrivateFieldGet(this,ia).baseAttachmentView,_classPrivateFieldGet(this,na).render(t,e,r,n),this.baseAttachment=_classPrivateFieldGet(this,na).baseAttachment,this.baseAttachmentView=_classPrivateFieldGet(this,na).baseAttachmentView}}var ia=new WeakMap,na=new WeakMap,aa=new WeakMap,oa=new WeakMap,sa=new WeakMap,la=new WeakMap,ua=new WeakMap;_defineProperty(PostEffect_Bloom,"vertexShaderGLSL",`\n\t\t${ShareGLSL.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),_defineProperty(PostEffect_Bloom,"fragmentShaderGLSL",`\n\t\t${ShareGLSL.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),_defineProperty(PostEffect_Bloom,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_Bloom,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_Bloom,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_Bloom,"uniformBufferDescriptor_fragment",BaseMaterial.uniformBufferDescriptor_empty);class PostEffect_Blur extends BasePostEffect{constructor(t){super(t)}}_defineProperty(PostEffect_Blur,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),_defineProperty(PostEffect_Blur,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec2 px = vec2(1.0/systemUniforms.resolution.x, 1.0/systemUniforms.resolution.y);\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-7.0*px.x, -7.0*px.y) )*0.0044299121055113265;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-6.0*px.x, -6.0*px.y) )*0.00895781211794;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-5.0*px.x, -5.0*px.y) )*0.0215963866053;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-4.0*px.x, -4.0*px.y) )*0.0443683338718;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-3.0*px.x, -3.0*px.y) )*0.0776744219933;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-2.0*px.x, -2.0*px.y) )*0.115876621105;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-1.0*px.x, -1.0*px.y) )*0.147308056121;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV                             )*0.159576912161;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 1.0*px.x,  1.0*px.y) )*0.147308056121;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 2.0*px.x,  2.0*px.y) )*0.115876621105;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 3.0*px.x,  3.0*px.y) )*0.0776744219933;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 4.0*px.x,  4.0*px.y) )*0.0443683338718;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 5.0*px.x,  5.0*px.y) )*0.0215963866053;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 6.0*px.x,  6.0*px.y) )*0.00895781211794;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 7.0*px.x,  7.0*px.y) )*0.0044299121055113265;\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_Blur,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_Blur,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_Blur,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_Blur,"uniformBufferDescriptor_fragment",BaseMaterial.uniformBufferDescriptor_empty);const fa=new Float32Array(1);class PostEffect_ZoomBlur extends BasePostEffect{constructor(t){super(t),_defineProperty(this,"_centerX",0),_defineProperty(this,"_centerY",0),_defineProperty(this,"_amount",38)}get centerX(){return this._centerX}set centerX(t){this._centerX=t,fa[0]=this._centerX,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerX,fa)}get centerY(){return this._centerY}set centerY(t){this._centerY=t,fa[0]=this._centerY,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerY,fa)}get amount(){return this._amount}set amount(t){this._amount=t,fa[0]=this._amount,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.amount,fa)}get radius(){return this._radius}}_defineProperty(PostEffect_ZoomBlur,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),_defineProperty(PostEffect_ZoomBlur,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float centerX;\n        float centerY;\n        float amount;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tvec2 center = vec2( fragmentUniforms.centerX + 0.5, -fragmentUniforms.centerY + 0.5 );\n\t\tvec2 toCenter = center - vUV ;\n\t\tfloat offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\t\tfloat total = 0.0;\n\t\t\n\t\tfor (float t = 0.0; t <= 30.0; t++) {\n\t\t\tfloat percent = (t + offset) / 30.0;\n\t\t\tfloat weight = 3.0 * (percent - percent * percent);\n\t\t\tvec4 color = texture( sampler2D( uSourceTexture, uSampler ), vUV + toCenter * percent * fragmentUniforms.amount / 100.0 );\n\t\t\tcolor.rgb *= color.a;\n\t\t\tfinalColor += color * weight;\n\t\t\ttotal += weight;\n\t\t}\n\t\tfinalColor = finalColor / total;\n\t\tfinalColor.rgb /= finalColor.a + 0.00001;\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_ZoomBlur,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_ZoomBlur,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_ZoomBlur,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_ZoomBlur,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"centerX"},{size:Ee.float,valueName:"centerY"},{size:Ee.float,valueName:"amount"}]);const ma=new Float32Array(1);class PostEffect_DoF_blend extends BasePostEffect{get focusLength(){return this._focusLength}set focusLength(t){this._focusLength=t,ma[0]=this._focusLength,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.focusLength,ma)}constructor(t){super(t),_defineProperty(this,"blurTexture",void 0),_defineProperty(this,"depthTexture",void 0),_defineProperty(this,"_focusLength",15)}resetBindingInfo(){this.bindings=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this.sampler.GPUSampler},{binding:2,resource:this.sourceTexture},{binding:3,resource:this.blurTexture},{binding:4,resource:this.depthTexture}],this._afterResetBindingInfo()}}_defineProperty(PostEffect_DoF_blend,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),_defineProperty(PostEffect_DoF_blend,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float focusLength;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uBlurTexture;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform texture2D uDepthTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor;\n\t\tvec4 blurColor;\n\t\tvec4 depthColor;\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tblurColor = texture( sampler2D( uBlurTexture, uSampler ), vUV );\n\t\tdepthColor = texture( sampler2D( uDepthTexture, uSampler ), vUV );\n\t\tdepthColor = depthColor * fragmentUniforms.focusLength;\n\t\t\n\t\tdiffuseColor.rgb *= min(depthColor.g,1.0);\n\t\tblurColor.rgb *= max(1.0 - depthColor.g,0.0);\n\t\toutColor = diffuseColor + blurColor;\n\t}\n`),_defineProperty(PostEffect_DoF_blend,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_DoF_blend,"uniformsBindGroupLayoutDescriptor_material",{bindings:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),_defineProperty(PostEffect_DoF_blend,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_DoF_blend,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"focusLength"}]);class PostEffect_DoF extends BasePostEffect{get blur(){return _classPrivateFieldGet(this,da)}set blur(t){_classPrivateFieldSet(this,da,t),_classPrivateFieldGet(this,ca).radius=t}get focusLength(){return _classPrivateFieldGet(this,pa)}set focusLength(t){_classPrivateFieldSet(this,pa,t),_classPrivateFieldGet(this,ha).focusLength=t}constructor(t){super(t),ca.set(this,{writable:!0,value:void 0}),ha.set(this,{writable:!0,value:void 0}),da.set(this,{writable:!0,value:void 0}),pa.set(this,{writable:!0,value:void 0}),_classPrivateFieldSet(this,ca,new PostEffect_GaussianBlur(t)),_classPrivateFieldSet(this,ha,new PostEffect_DoF_blend(t)),this.blur=5,this.focusLength=15}render(t,e,r,n){this.checkSize(t,e),_classPrivateFieldGet(this,ca).render(t,e,r,n),_classPrivateFieldGet(this,ha).blurTexture=_classPrivateFieldGet(this,ca).baseAttachmentView,_classPrivateFieldGet(this,ha).depthTexture=e.baseAttachment_mouseColorID_depth_ResolveTargetView,_classPrivateFieldGet(this,ha).render(t,e,r,n),this.baseAttachment=_classPrivateFieldGet(this,ha).baseAttachment,this.baseAttachmentView=_classPrivateFieldGet(this,ha).baseAttachmentView}}var ca=new WeakMap,ha=new WeakMap,da=new WeakMap,pa=new WeakMap;_defineProperty(PostEffect_DoF,"vertexShaderGLSL",`\n\t\t${ShareGLSL.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),_defineProperty(PostEffect_DoF,"fragmentShaderGLSL",`\n\t\t${ShareGLSL.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),_defineProperty(PostEffect_DoF,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_DoF,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_DoF,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_DoF,"uniformBufferDescriptor_fragment",BaseMaterial.uniformBufferDescriptor_empty);const _a=new Float32Array(1);class PostEffect_HalfTone extends BasePostEffect{get centerX(){return this._centerX}set centerX(t){this._centerX=t,_a[0]=this._centerX,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerX,_a)}get centerY(){return this._centerY}set centerY(t){this._centerY=t,_a[0]=this._centerY,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerY,_a)}get angle(){return this._angle}set angle(t){this._angle=t,_a[0]=this._angle,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.angle,_a)}get radius(){return this._radius}set radius(t){this._radius=t,_a[0]=this._radius,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.radius,_a)}get grayMode(){return this._grayMode}set grayMode(t){this._grayMode=t?1:0,_a[0]=this._grayMode?1:0,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.grayMode,_a)}constructor(t){super(t),_defineProperty(this,"_centerX",0),_defineProperty(this,"_centerY",0),_defineProperty(this,"_angle",0),_defineProperty(this,"_radius",2),_defineProperty(this,"_grayMode",0)}}_defineProperty(PostEffect_HalfTone,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),_defineProperty(PostEffect_HalfTone,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float centerX;\n        float centerY;\n        float angle;\n        float radius;\n        float grayMode;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat pattern(float angle) {\n\t\tangle = angle * 3.141592653589793/180.0;\n\t\tfloat s = sin(angle), c = cos(angle);\n\t\tvec2 tex = vUV;\n\t\ttex.x -= fragmentUniforms.centerX + 0.5;\n\t\ttex.y -= fragmentUniforms.centerY + 0.5;\n\t\tvec2 point = vec2(\n\t\t\tc * tex.x - s * tex.y,\n\t\t\ts * tex.x + c * tex.y\n\t\t) * systemUniforms.resolution /fragmentUniforms.radius;\n\t\treturn (sin(point.x) * sin(point.y)) * 4.0;\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tif(fragmentUniforms.grayMode == 1.0) {\n\t\t\tfloat average = (finalColor.r + finalColor.g + finalColor.b) / 3.0;\n\t\t\tfinalColor = vec4(vec3(average * 10.0 - 5.0 + pattern(fragmentUniforms.angle)), finalColor.a);\n\t\t}else{\n\t\t\tvec3 cmy = 1.0 - finalColor.rgb;\n\t\t\tfloat k = min(cmy.x, min(cmy.y, cmy.z));\n\t\t\tcmy = (cmy - k) / (1.0 - k);\n\t\t\tcmy = clamp(cmy * 10.0 - 3.0 + vec3(pattern(fragmentUniforms.angle + 0.26179), pattern(fragmentUniforms.angle + 1.30899), pattern(fragmentUniforms.angle)), 0.0, 1.0);\n\t\t\tk = clamp(k * 10.0 - 5.0 + pattern(fragmentUniforms.angle + 0.78539), 0.0, 1.0);\n\t\t\tfinalColor = vec4(1.0 - cmy - k, finalColor.a);\n\t\t}\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_HalfTone,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_HalfTone,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_HalfTone,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_HalfTone,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"centerX"},{size:Ee.float,valueName:"centerY"},{size:Ee.float,valueName:"angle"},{size:Ee.float,valueName:"radius"},{size:Ee.float,valueName:"grayMode"}]);const va=new Float32Array(1);class PostEffect_Pixelize extends BasePostEffect{get width(){return this._width}set width(t){this._width=t,va[0]=this._width,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.width,va)}get height(){return this._height}set height(t){this._height=t,va[0]=this._height,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.height,va)}constructor(t){super(t),_defineProperty(this,"_width",5),_defineProperty(this,"_height",5)}}_defineProperty(PostEffect_Pixelize,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),_defineProperty(PostEffect_Pixelize,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float width;\n        float height;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor;\n\t\tfloat dx = 1.0/systemUniforms.resolution.x * fragmentUniforms.width;\n\t\tfloat dy = 1.0/systemUniforms.resolution.y * fragmentUniforms.height;\n\t\tvec2 coord = vec2(\n\t\t\tdx * (floor(vUV.x / dx) + 0.5),\n\t\t\tdy * (floor(vUV.y / dy) + 0.5)\n\t\t);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), coord );\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_Pixelize,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_Pixelize,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_Pixelize,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_Pixelize,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"width"},{size:Ee.float,valueName:"height"}]);const ga=new Float32Array(1);class PostEffect_Convolution extends BasePostEffect{get kernel(){return this._kernel}set kernel(t){this._kernel=t,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.kernel,this._kernel),this.kernelWeight=1}get kernelWeight(){return this._kernelWeight}set kernelWeight(t){let e=0,r=this._kernel.length;for(;r--;)e+=this._kernel[r];this._kernelWeight=e,ga[0]=e,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.kernelWeight,ga)}constructor(t,e=PostEffect_Convolution.NORMAL){super(t),_defineProperty(this,"_kernel",void 0),_defineProperty(this,"_kernelWeight",void 0),this.kernel=e}}_defineProperty(PostEffect_Convolution,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vTime;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvTime = systemUniforms.time;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),_defineProperty(PostEffect_Convolution,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float kernelWeight;\n        mat3 kernel;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vTime;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tvoid main() {\n\n\t\tvec2 perPX = vec2(1.0/systemUniforms.resolution.x, 1.0/systemUniforms.resolution.y);\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2(-1.0, -1.0)) * fragmentUniforms.kernel[0][0] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 0.0, -1.0)) * fragmentUniforms.kernel[0][1] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 1.0, -1.0)) * fragmentUniforms.kernel[0][2] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2(-1.0,  0.0)) * fragmentUniforms.kernel[1][0] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 0.0,  0.0)) * fragmentUniforms.kernel[1][1] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 1.0,  0.0)) * fragmentUniforms.kernel[1][2] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2(-1.0,  1.0)) * fragmentUniforms.kernel[2][0] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 0.0,  1.0)) * fragmentUniforms.kernel[2][1] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 1.0,  1.0)) * fragmentUniforms.kernel[2][2] ;\n\t\n\t\toutColor = vec4((finalColor / fragmentUniforms.kernelWeight).rgb, 1.0);\n\t}\n`),_defineProperty(PostEffect_Convolution,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_Convolution,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_Convolution,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_Convolution,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"kernelWeight"},{size:Ee.mat3,valueName:"kernel"}]),_defineProperty(PostEffect_Convolution,"NORMAL",new Float32Array([0,0,0,0,0,1,0,0,0,0,0,0])),_defineProperty(PostEffect_Convolution,"SHARPEN",new Float32Array([0,-1,0,0,-1,5,-1,0,0,-1,0,0])),_defineProperty(PostEffect_Convolution,"BLUR",new Float32Array([1,1,1,0,1,1,1,0,1,1,1,0])),_defineProperty(PostEffect_Convolution,"EDGE",new Float32Array([0,1,0,0,1,-4,1,0,0,1,0,0])),_defineProperty(PostEffect_Convolution,"EMBOSS",new Float32Array([-2,-1,0,0,-1,1,1,0,0,1,2,0]));const Sa=new Float32Array(1);class PostEffect_Film extends BasePostEffect{get scanlineIntensity(){return this._scanlineIntensity}set scanlineIntensity(t){this._scanlineIntensity=t,Sa[0]=this._scanlineIntensity,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.scanlineIntensity,Sa)}get noiseIntensity(){return this._noiseIntensity}set noiseIntensity(t){this._noiseIntensity=t,Sa[0]=this._noiseIntensity,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.noiseIntensity,Sa)}get scanlineCount(){return this._scanlineCount}set scanlineCount(t){this._scanlineCount=t,Sa[0]=this._scanlineCount,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.scanlineCount,Sa)}get grayMode(){return this._grayMode}set grayMode(t){this._grayMode=t,Sa[0]=this._grayMode?1:0,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.grayMode,Sa)}constructor(t){super(t),_defineProperty(this,"_scanlineIntensity",.5),_defineProperty(this,"_noiseIntensity",.5),_defineProperty(this,"_scanlineCount",2048),_defineProperty(this,"_grayMode",!1)}}_defineProperty(PostEffect_Film,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vTime;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvTime = systemUniforms.time;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),_defineProperty(PostEffect_Film,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float scanlineIntensity;\n        float noiseIntensity;\n        float scanlineCount;\n        float grayMode;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vTime;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\n\t\tvec4 diffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\n\t\t// make some noise\n\t\tfloat x = vUV.x * vUV.y * vTime;\n\t\tx = mod( x, 13.0 ) * mod( x, 123.0 );\n\t\tfloat dx = mod( x, 0.01 );\n\t\t\n\t\t// add noise\n\t\tvec3 finalColor = diffuseColor.rgb + diffuseColor.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );\n\t\t\n\t\t// get us a sine and cosine\n\t\tvec2 sc = vec2( sin( vUV.y * fragmentUniforms.scanlineCount ), cos( vUV.y * fragmentUniforms.scanlineCount ) );\n\t\t\n\t\t// add scanlines\n\t\tfinalColor += diffuseColor.rgb * vec3( sc.x, sc.y, sc.x ) * fragmentUniforms.scanlineIntensity;\n\t\t\n\t\t// interpolate between source and result by intensity\n\t\tfinalColor = diffuseColor.rgb + clamp( fragmentUniforms.noiseIntensity, 0.0, 1.0 ) * ( finalColor - diffuseColor.rgb );\n\t\t\n\t\t// convert to grayscale if desired\n\t\tif(fragmentUniforms.grayMode == 1.0) finalColor = vec3( finalColor.r * 0.3 + finalColor.g * 0.59 + finalColor.b * 0.11 );\n\t\toutColor = vec4( finalColor, diffuseColor.a );\n\t}\n`),_defineProperty(PostEffect_Film,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_Film,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_Film,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_Film,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"scanlineIntensity"},{size:Ee.float,valueName:"noiseIntensity"},{size:Ee.float,valueName:"scanlineCount"},{size:Ee.float,valueName:"grayMode"}]);const xa=new Float32Array(1);class PostEffect_Vignetting extends BasePostEffect{get intensity(){return this._intensity}set intensity(t){this._intensity=t,xa[0]=this._intensity,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.intensity,xa)}get size(){return this._size}set size(t){this._size=t,xa[0]=this._size,this.uniformBuffer_fragment.GPUBuffer.setSubData(this.uniformBufferDescriptor_fragment.redStructOffsetMap.size,xa)}constructor(t){super(t),_defineProperty(this,"_intensity",.85),_defineProperty(this,"_size",.1)}}_defineProperty(PostEffect_Vignetting,"vertexShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_vertex.systemUniforms}\n    layout( set = ${ShareGLSL.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n        mat4 modelMatrix;\n    } meshMatrixUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),_defineProperty(PostEffect_Vignetting,"fragmentShaderGLSL",`\n\t${ShareGLSL.GLSL_VERSION}\n\t${ShareGLSL.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float intensity;\n        float size;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${ShareGLSL.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\n\tvoid main() {\n\t\tvec4 finalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tfloat dist = distance(vUV, vec2(0.5, 0.5));\n\t\tfinalColor.rgb *= smoothstep(0.8, fragmentUniforms.size * 0.799, dist * ( fragmentUniforms.intensity + fragmentUniforms.size ));\n\t\toutColor = finalColor;\n\t}\n`),_defineProperty(PostEffect_Vignetting,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),_defineProperty(PostEffect_Vignetting,"uniformsBindGroupLayoutDescriptor_material",BasePostEffect.uniformsBindGroupLayoutDescriptor_material),_defineProperty(PostEffect_Vignetting,"uniformBufferDescriptor_vertex",BaseMaterial.uniformBufferDescriptor_empty),_defineProperty(PostEffect_Vignetting,"uniformBufferDescriptor_fragment",[{size:Ee.float,valueName:"intensity"},{size:Ee.float,valueName:"size"}]);var ya=new WeakMap,Pa=new WeakMap,Ta=new WeakMap,Ma=new WeakMap,La=new WeakMap,Ga=new WeakMap,Ua=new WeakMap,ba=new WeakMap,Ea=new WeakMap,Ba=new WeakMap;const Da={glMatrix:Ue,DetectorGPU:DetectorGPU,UUID:UUID,Mix:er,baseGeometry:baseGeometry,BaseLight:BaseLight,BaseMaterial:BaseMaterial,DisplayContainer:DisplayContainer,BaseObject3D:BaseObject3D,ShareGLSL:ShareGLSL,BasePostEffect:BasePostEffect,BaseTexture:BaseTexture,PipelineBasic:PipelineBasic,BindGroup:BindGroup,Buffer:Buffer,UniformBuffer:UniformBuffer,UniformBufferDescriptor:UniformBufferDescriptor,Camera2D:Camera2D,Camera3D:Camera3D,ObitController:class ObitController extends Camera3D{get needUpdate(){return _classPrivateFieldGet(this,sn)}set needUpdate(t){_classPrivateFieldSet(this,sn,t)}get centerX(){return _classPrivateFieldGet(this,Wi)}set centerX(t){_classPrivateFieldSet(this,Wi,t)}get centerY(){return _classPrivateFieldGet(this,Zi)}set centerY(t){_classPrivateFieldSet(this,Zi,t)}get centerZ(){return _classPrivateFieldGet(this,Hi)}set centerZ(t){_classPrivateFieldSet(this,Hi,t)}get distance(){return _classPrivateFieldGet(this,ji)}set distance(t){_classPrivateFieldSet(this,ji,t)}get speedDistance(){return _classPrivateFieldGet(this,qi)}set speedDistance(t){_classPrivateFieldSet(this,qi,t)}get delayDistance(){return _classPrivateFieldGet(this,Qi)}set delayDistance(t){_classPrivateFieldSet(this,Qi,t)}get speedRotation(){return _classPrivateFieldGet(this,Ji)}set speedRotation(t){_classPrivateFieldSet(this,Ji,t)}get delayRotation(){return _classPrivateFieldGet(this,Ki)}set delayRotation(t){_classPrivateFieldSet(this,Ki,t)}get minTilt(){return _classPrivateFieldGet(this,en)}set minTilt(t){_classPrivateFieldSet(this,en,t)}get maxTilt(){return _classPrivateFieldGet(this,rn)}set maxTilt(t){_classPrivateFieldSet(this,rn,t)}get pan(){return _classPrivateFieldGet(this,nn)}set pan(t){_classPrivateFieldSet(this,nn,t)}get tilt(){return _classPrivateFieldGet(this,tn)}set tilt(t){_classPrivateFieldSet(this,tn,t)}constructor(t){super(t),Wi.set(this,{writable:!0,value:0}),Zi.set(this,{writable:!0,value:0}),Hi.set(this,{writable:!0,value:0}),ji.set(this,{writable:!0,value:10}),qi.set(this,{writable:!0,value:1}),Qi.set(this,{writable:!0,value:.1}),Ji.set(this,{writable:!0,value:3}),Ki.set(this,{writable:!0,value:.1}),tn.set(this,{writable:!0,value:-45}),en.set(this,{writable:!0,value:-90}),rn.set(this,{writable:!0,value:90}),nn.set(this,{writable:!0,value:0}),an.set(this,{writable:!0,value:0}),on.set(this,{writable:!0,value:0}),_defineProperty(this,"currentDistance",0),sn.set(this,{writable:!0,value:!0}),_defineProperty(this,"targetView",void 0),(e=>{let r,n,a,s,l,u,c,h,p,v,S,y,G,U;U=t=>{let e=this.targetView;if(e){let r,n,a=e.viewRect;if(r=t[p],n=t[v],!(a[0]<r&&r<a[0]+a[2]))return;if(!(a[1]<n&&n<a[1]+a[3]))return}return!0},S=t.detector.move,y=t.detector.up,G=t.detector.down,l=0,u=0,c=0,h=0,p="layerX",v="layerY",r=e=>{U(e)&&_classPrivateFieldGet(this,sn)&&(l=e[p],u=e[v],t.canvas.addEventListener(S,n),window.addEventListener(y,a))},n=t=>{U(t)&&_classPrivateFieldGet(this,sn)&&(c=t[p]-l,h=t[v]-u,l=t[p],u=t[v],_classPrivateFieldSet(this,nn,_classPrivateFieldGet(this,nn)-c*_classPrivateFieldGet(this,Ji)*.1),_classPrivateFieldSet(this,tn,_classPrivateFieldGet(this,tn)-h*_classPrivateFieldGet(this,Ji)*.1))},a=e=>{t.canvas.removeEventListener(S,n),window.removeEventListener(y,a)},s=t=>{if(_classPrivateFieldGet(this,sn)){if(!U(t))return;_classPrivateFieldSet(this,ji,_classPrivateFieldGet(this,ji)+t.deltaY/100*_classPrivateFieldGet(this,qi))}},t.canvas.addEventListener(G,r),t.canvas.addEventListener("wheel",s)})()}update(t){let e,r,n;n=Math.PI/180,_classPrivateFieldGet(this,sn)&&(_classPrivateFieldGet(this,tn)<_classPrivateFieldGet(this,en)&&_classPrivateFieldSet(this,tn,_classPrivateFieldGet(this,en)),_classPrivateFieldGet(this,tn)>_classPrivateFieldGet(this,rn)&&_classPrivateFieldSet(this,tn,_classPrivateFieldGet(this,rn)),e=_classPrivateFieldGet(this,Ki),r=this.matrix,_classPrivateFieldSet(this,an,_classPrivateFieldGet(this,an)+(_classPrivateFieldGet(this,nn)-_classPrivateFieldGet(this,an))*e),_classPrivateFieldSet(this,on,_classPrivateFieldGet(this,on)+(_classPrivateFieldGet(this,tn)-_classPrivateFieldGet(this,on))*e),_classPrivateFieldGet(this,ji)<this.nearClipping&&_classPrivateFieldSet(this,ji,this.nearClipping),this.currentDistance+=(_classPrivateFieldGet(this,ji)-this.currentDistance)*_classPrivateFieldGet(this,Qi),this.currentDistance<this.nearClipping&&(this.currentDistance=this.nearClipping),Ue.mat4.identity(r),Ue.mat4.translate(r,r,[_classPrivateFieldGet(this,Wi),_classPrivateFieldGet(this,Zi),_classPrivateFieldGet(this,Hi)]),Ue.mat4.rotateY(r,r,_classPrivateFieldGet(this,an)*n),Ue.mat4.rotateX(r,r,_classPrivateFieldGet(this,on)*n),Ue.mat4.translate(r,r,[0,0,this.currentDistance]),this.x=r[12],this.y=r[13],this.z=r[14],this.lookAt(_classPrivateFieldGet(this,Wi),_classPrivateFieldGet(this,Zi),_classPrivateFieldGet(this,Hi)))}},Geometry:Geometry,InterleaveInfo:InterleaveInfo,AmbientLight:AmbientLight,DirectionalLight:DirectionalLight,PointLight:PointLight,SpotLight:SpotLight,GLTFLoader:Si,TextureLoader:TextureLoader,GridMaterial:GridMaterial,PBRMaterial_System:PBRMaterial_System,SkyBoxMaterial:SkyBoxMaterial,BitmapMaterial:BitmapMaterial,ColorMaterial:ColorMaterial,ColorPhongMaterial:ColorPhongMaterial,ColorPhongTextureMaterial:ColorPhongTextureMaterial,SpriteSheetAction:class SpriteSheetAction extends UUID{constructor(t,e=60,r=1,n=1,a=1){super(),this.texture=t,this.frameRate=e,this.segmentW=r,this.segmentH=n,this.totalFrame=a}},SpriteSheetMaterial:SpriteSheetMaterial,Sprite3DMaterial:Sprite3DMaterial,EnvironmentMaterial:EnvironmentMaterial,RefractionMaterial:RefractionMaterial,StandardMaterial:StandardMaterial,Axis:class Axis extends BaseObject3D{constructor(t){let e,r,n,a,s,l,u;super(t),n=new Box(t),a=new Cylinder(t,0,.5),s=new ColorMaterial(t,"#ff0000"),l=new ColorMaterial(t,"#00ff00"),u=new ColorMaterial(t,"#0000ff"),e=new Mesh(t,a,s),r=new Mesh(t,n,s),r.setScale(5,.1,.1),e.x=5,e.rotationZ=90,r.x=2.5,this.addChild(r,e),e=new Mesh(t,a,l),r=new Mesh(t,n,l),r.setScale(.1,5,.1),e.y=5,r.y=2.5,this.addChild(r,e),e=new Mesh(t,a,u),r=new Mesh(t,n,u),r.setScale(.1,.1,5),e.z=5,e.rotationX=-90,r.z=2.5,this.addChild(r,e),this.addChild(new Mesh(t,new Sphere(t,.25,16,16,16),new ColorMaterial(t,"#ff00ff")))}},Grid:class Grid extends BaseObject3D{get color(){return _classPrivateFieldGet(this,Ln)}set color(t){_classPrivateFieldSet(this,Ln,t),this.makeGridGeometry()}get centerColor(){return _classPrivateFieldGet(this,Tn)}set centerColor(t){_classPrivateFieldSet(this,Tn,t),this.makeGridGeometry()}get divisions(){return _classPrivateFieldGet(this,yn)}set divisions(t){_classPrivateFieldSet(this,yn,t),this.makeGridGeometry()}get size(){return _classPrivateFieldGet(this,xn)}set size(t){_classPrivateFieldSet(this,xn,t),this.makeGridGeometry()}constructor(t,e=100,r=100,n="#cccccc",a="#666666"){super(t),xn.set(this,{writable:!0,value:100}),yn.set(this,{writable:!0,value:100}),Tn.set(this,{writable:!0,value:"#cccccc"}),Ln.set(this,{writable:!0,value:"#666666"}),Gn.set(this,{writable:!0,value:void 0}),_classPrivateFieldSet(this,Gn,t),this.size=e,this.divisions=r,this.centerColor=n,this.color=a,this.makeGridGeometry(),this.material=new GridMaterial(t),this.primitiveTopology="line-list"}makeGridGeometry(){let t,e,r,n,a,s,l=_classPrivateFieldGet(this,Gn),u=[];for(t=this.divisions/2,e=this.size/this.divisions,r=this.size/2,n=0,a=-r;n<=this.divisions;n++,a+=e)s=n===t?Fe.hexToRGB_ZeroToOne(this.centerColor):Fe.hexToRGB_ZeroToOne(this.color),u.push(-r,0,a,s[0],s[1],s[2],1,r,0,a,s[0],s[1],s[2],1,a,0,-r,s[0],s[1],s[2],1,a,0,r,s[0],s[1],s[2],1);this.geometry=new Geometry(l,new Buffer(l,"gridInterleaveBuffer_"+this.size+"_"+this.divisions+"_"+this.centerColor+"_"+this.color,Buffer.TYPE_VERTEX,new Float32Array(u),[new InterleaveInfo("vertexPosition","float3"),new InterleaveInfo("vertexColor","float4")]))}},Mesh:Mesh,SkyBox:class SkyBox extends BaseObject3D{constructor(t,e){super(t),this.geometry=new Box(t),this.material=new SkyBoxMaterial(t,e),this.cullMode="front"}},Sprite3D:class Sprite3D extends BaseObject3D{set material(t){t instanceof Sprite3DMaterial?(this._material=t,this.dirtyPipeline=!0):Fe.throwFunc(`addChild - only allow Sprite3DMaterial Instance. - inputValue : ${t} { type : ${typeof t} }`)}get material(){return this._material}get rotationX(){return this._rotationX}set rotationX(t){}get rotationY(){return this._rotationY}set rotationY(t){}get rotationZ(){return this._rotationZ}set rotationZ(t){}get useFixedScale(){return this.material.useFixedScale}set useFixedScale(t){this.material.useFixedScale=t}constructor(t,e,r){super(t),this.geometry=e,this.material=r,this.cullMode="none",this.renderDrawLayerIndex=Render.DRAW_LAYER_INDEX2_Z_POINT_SORT}addChild(t){}},Text:class Text extends BaseObject3D{get height(){return this._height}set height(t){this.material.height=this._height=t<2?2:t,setTexture(this)}get width(){return this._width}set width(t){this.material.width=this._width=t<2?2:t,setTexture(this)}get useFixedScale(){return this.material.useFixedScale}set useFixedScale(t){this.material.useFixedScale=t}get useSprite3DMode(){return this.material.useSprite3DMode}set useSprite3DMode(t){this.material.useSprite3DMode=t}constructor(t,e=256,r=128){super(t),_defineProperty(this,"_cvs",void 0),_defineProperty(this,"_ctx",void 0),_defineProperty(this,"_svg",void 0),_defineProperty(this,"_img",void 0),_defineProperty(this,"_width",256),_defineProperty(this,"_height",128),this.renderDrawLayerIndex=Render.DRAW_LAYER_INDEX2_Z_POINT_SORT,e>1920&&(e=1920),r>1920&&(r=1920),this._cvs=new OffscreenCanvas(e,r),this._ctx=this._cvs.getContext("2d"),this._svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this._svg.setAttribute("xmlns","http://www.w3.org/2000/svg"),this._svg.style="position:absolute;top:0px;left:0px;text-align:center;z-index:10",this._svg.innerHTML='<foreignObject  width="100%" style="position:absolute;top:0;left:0">   <table xmlns="http://www.w3.org/1999/xhtml" style="border-collapse: collapse;position:table;top:0;left:0;width:100%;table-layout:fixed">       <tr xmlns="http://www.w3.org/1999/xhtml">       <td xmlns="http://www.w3.org/1999/xhtml"  > </td>       </tr>   </table></foreignObject>',this.geometry=new Plane(t),this.material=new TextMaterial(t),this.cullMode="none",this.depthWriteEnabled=!1,this._img=new Image,this.width=e,this.height=r,Un(this,"padding",0),Un(this,"background",""),Un(this,"color","#000"),Un(this,"fontFamily","Arial"),Un(this,"fontSize",22),Un(this,"fontWeight","normal"),Un(this,"fontStyle","normal"),Un(this,"lineHeight",33),Un(this,"letterSpacing",0),Un(this,"wordBreak","break-all"),Un(this,"verticalAlign","middle"),Un(this,"textAlign","center"),this._img.onload=e=>{let r,n;r=this._width,n=this._height,this._cvs.width=r,this._cvs.height=n,this._ctx.clearRect(0,0,r,n),this._ctx.drawImage(this._img,0,0,r,n),this.material.width=r,this.material.height=n,this._cvs.convertToBlob().then(e=>{new BitmapTexture(t,URL.createObjectURL(e),{magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"repeat"},!0,t=>{this.material.diffuseTexture&&this.material.diffuseTexture.GPUTexture.destroy(),this.material.diffuseTexture=t})})}}addChild(t){}set material(t){t instanceof TextMaterial?(this._material=t,this.dirtyPipeline=!0):Fe.throwFunc(`addChild - only allow TextMaterial Instance. - inputValue : ${t} { type : ${typeof t} }`)}get material(){return this._material}get text(){return this._text}set text(t){En=this._svg,Bn=En.querySelector("foreignObject td"),t=t.toString(),this._text=t.replace(/\<br\>/gi,"<div/>");let e=this,r=this._text.match(/<img .*?>/g),n=[],a=this._text;r=r||[];let s=r.length,l=0;r.forEach((function(t){let r=t.match(/src\s*=\s*(\'|\").*?(\'|\")/g)[0];r=r.replace(/src\s*=\s*(\'|\")/g,"").replace(/(\'|\")/g,"");let u=document.createElement("div");u.innerHTML=t;let c=u.querySelector("img");c.onload=function(){let t=document.createElement("canvas");t.width=c.style.width?+c.style.width:c.width,t.height=c.style.height?+c.style.height:c.height;let r=t.getContext("2d");r.scale(t.width/c.naturalWidth,t.height/c.naturalHeight),r.drawImage(c,0,0),h.result='<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink= "http://www.w3.org/1999/xlink" width="'+c.width+'" height="'+c.height+'" display="inline" style="vertical-align: middle;display: inline-block"><image xlink:href="'+t.toDataURL("image/png")+'" height="'+c.height+'px" width="'+c.width+'px" /></svg>',l++,l==s&&(n.forEach((function(t){a=a.replace(t.source,t.result)})),Bn.innerHTML=a,setTexture(e)),c.onload=null};let h={source:t,sourceSrc:r,result:""};n.push(h)})),0==r.length&&(Bn.innerHTML=a,setTexture(this))}},Line:Line,Particle:Particle,PostEffect_BrightnessContrast:PostEffect_BrightnessContrast,PostEffect_Gray:PostEffect_Gray,PostEffect_HueSaturation:PostEffect_HueSaturation,PostEffect_Invert:PostEffect_Invert,PostEffect_Threshold:PostEffect_Threshold,PostEffect_Bloom:PostEffect_Bloom,PostEffect_Bloom_blend:PostEffect_Bloom_blend,PostEffect_Blur:PostEffect_Blur,PostEffect_BlurX:PostEffect_BlurX,PostEffect_BlurY:PostEffect_BlurY,PostEffect_GaussianBlur:PostEffect_GaussianBlur,PostEffect_ZoomBlur:PostEffect_ZoomBlur,PostEffect_DoF:PostEffect_DoF,PostEffect_DoF_blend:PostEffect_DoF_blend,PostEffect_HalfTone:PostEffect_HalfTone,PostEffect_Pixelize:PostEffect_Pixelize,PostEffect:PostEffect,PostEffect_Convolution:PostEffect_Convolution,PostEffect_Film:PostEffect_Film,PostEffect_Vignetting:PostEffect_Vignetting,Box:Box,Cylinder:Cylinder,Plane:Plane,Sphere:Sphere,Render:Render,Debugger:Ti,CopyBufferToTexture:CopyBufferToTexture,ImageLoader:ImageLoader,BitmapCubeTexture:BitmapCubeTexture,BitmapTexture:BitmapTexture,Sampler:Sampler,ShaderModule_GLSL:ShaderModule_GLSL,TypeSize:Ee,UTILColor:Be,UTILMath:De,UTIL:Fe,RedGPUContext:RedGPUContext,Scene:class Scene extends DisplayContainer{get grid(){return _classPrivateFieldGet(this,ba)}set grid(t){_classPrivateFieldSet(this,ba,t)}get axis(){return _classPrivateFieldGet(this,Ea)}set axis(t){_classPrivateFieldSet(this,Ea,t)}get skyBox(){return _classPrivateFieldGet(this,Ba)}set skyBox(t){_classPrivateFieldSet(this,Ba,t)}get backgroundColor(){return _classPrivateFieldGet(this,ya)}set backgroundColor(t){_classPrivateFieldSet(this,ya,t);let e=Fe.hexToRGB_ZeroToOne(t);_classPrivateFieldSet(this,Ta,[e[0]*_classPrivateFieldGet(this,Pa),e[1]*_classPrivateFieldGet(this,Pa),e[2]*_classPrivateFieldGet(this,Pa),_classPrivateFieldGet(this,Pa)])}get backgroundColorAlpha(){return _classPrivateFieldGet(this,Pa)}set backgroundColorAlpha(t){_classPrivateFieldSet(this,Pa,t);let e=Fe.hexToRGB_ZeroToOne(_classPrivateFieldGet(this,ya));_classPrivateFieldSet(this,Ta,[e[0]*_classPrivateFieldGet(this,Pa),e[1]*_classPrivateFieldGet(this,Pa),e[2]*_classPrivateFieldGet(this,Pa),_classPrivateFieldGet(this,Pa)])}get backgroundColorRGBA(){return _classPrivateFieldGet(this,Ta)}get directionalLightList(){return _classPrivateFieldGet(this,Ma)}get pointLightList(){return _classPrivateFieldGet(this,La)}get ambientLight(){return _classPrivateFieldGet(this,Ua)}get spotLightList(){return _classPrivateFieldGet(this,Ga)}constructor(){super(),ya.set(this,{writable:!0,value:"#000"}),Pa.set(this,{writable:!0,value:1}),Ta.set(this,{writable:!0,value:[0,0,0,_classPrivateFieldGet(this,Pa)]}),Ma.set(this,{writable:!0,value:[]}),La.set(this,{writable:!0,value:[]}),Ga.set(this,{writable:!0,value:[]}),Ua.set(this,{writable:!0,value:void 0}),ba.set(this,{writable:!0,value:void 0}),Ea.set(this,{writable:!0,value:void 0}),Ba.set(this,{writable:!0,value:void 0}),_defineProperty(this,"_flatChildList",[])}addLight(t){switch(t.constructor){case DirectionalLight:_classPrivateFieldGet(this,Ma).length===ShareGLSL.MAX_DIRECTIONAL_LIGHT&&Fe.throwFunc(`addLight : DirectionalLight - Up to ${ShareGLSL.MAX_DIRECTIONAL_LIGHT} are allowed.`),_classPrivateFieldGet(this,Ma).push(t);break;case PointLight:_classPrivateFieldGet(this,La).length===ShareGLSL.MAX_POINT_LIGHT&&Fe.throwFunc(`addLight : PointLight - Up to ${ShareGLSL.MAX_POINT_LIGHT} are allowed.`),_classPrivateFieldGet(this,La).push(t);break;case SpotLight:Fe.throwFunc("addLight : spotLightList -아직사용할 수없는 유형의 라이트");break;case AmbientLight:_classPrivateFieldSet(this,Ua,t);break;default:Fe.throwFunc(`addLight : only allow BaseLight Instance - inputValue : ${t} { type : ${typeof t} }`)}}removeLight(t){let e;switch(t.constructor){case DirectionalLight:e=_classPrivateFieldGet(this,Ma).indexOf(t),e>-1&&_classPrivateFieldGet(this,Ma).splice(e,1);break;case PointLight:e=_classPrivateFieldGet(this,La).indexOf(t),e>-1&&_classPrivateFieldGet(this,La).splice(e,1);break;case SpotLight:break;case AmbientLight:_classPrivateFieldSet(this,Ua,null);break;default:Fe.throwFunc(`removeLight : only allow BaseLight Instance - inputValue : ${t} { type : ${typeof t} }`)}}removeLightAll(){_classPrivateFieldGet(this,Ma).length=0,_classPrivateFieldGet(this,La).length=0,_classPrivateFieldGet(this,Ga).length=0,_classPrivateFieldSet(this,Ua,null)}},View:View};export default Da;
